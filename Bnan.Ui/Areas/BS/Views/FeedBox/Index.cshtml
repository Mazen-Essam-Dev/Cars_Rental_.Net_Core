@using Bnan.Core.Extensions
@using Bnan.Ui.ViewModels.BS;
@using Microsoft.AspNetCore.Identity;
@using Microsoft.EntityFrameworkCore;
@model BSLayoutVM
@inject UserManager<CrMasUserInformation> userManager
@inject SignInManager<CrMasUserInformation> signinManager
@inject IViewLocalizer localizer
@{
    var user = await userManager.GetUserAsync(User);
    var requestCulture = Context.Features.Get<IRequestCultureFeature>();
    ViewData["returnUrl"] = string.IsNullOrEmpty(Context.Request.Path) ? "~/" : $"~{Context.Request.Path.Value}";
    var userInfo = await userManager.Users
          .Include(l => l.CrMasUserMainValidations)
          .Include(l => l.CrMasUserSubValidations)
          .Include(l => l.CrMasUserInformationLessorNavigation)
          .Include(l => l.CrMasUserContractValidity)
          .FirstOrDefaultAsync(l => l.UserName == user.UserName);
    var lessorInfo = await userManager.Users.Include(l => l.CrMasUserInformationLessorNavigation).ThenInclude(l => l.CrMasLessorImage).FirstOrDefaultAsync(x => x.UserName == user.UserName);
}

<link href="~/BranchSys/Pages/css/style.css" rel="styleSheet">
@if (requestCulture?.RequestCulture.UICulture.Name != "ar-EG")
{
    <link href="~/BranchSys/Pages/css/English_style.css" rel="styleSheet">
}
<!--Pdf-->
<link rel="stylesheet" href="~/PdfJS/style/style/style.css">
<!--Pdf-->
<style>
    .sec-loader-container {
        position: fixed !important;
        height: 100% !important;
    }
</style>


<div class="container-fluid">
    <section class="section-mainCard">
        <div class="row justify-content-center w-100 h-100">
            <div class="col-11 col-sm-10 col-md-11 col-lg-11 col-xl-10 text-center p-0 ">
                <div class="card main-card ">
                    <div class="row pt-2">
                        <a style="width: fit-content;" asp-action="Index" asp-area="BS" asp-controller="Home">
                            <div>
                                <img src="~/BranchSys/Pages/img/Close.svg" alt="close-icon" class="close-icon" style="margin-left:10px">
                            </div>

                        </a>
                    </div>
                    <div class="row layout-row">

                        <div class="row" style="flex-direction: row-reverse;">
                            <div class="col justify-content-center d-flex title-row">
                                <h1 class="card-title">
                                    @localizer["Feedbox"]
                                </h1>
                            </div>

                        </div>
                        <div class="row justify-content-center h-100 content-row">

                            <div class="col-md-11 mx-0 h-100">
                                <form id="msform" asp-action="AcceptOrNot" asp-controller="FeedBox" asp-area="BS">
                                    <input hidden name="AdministrativeNo" asp-for="@Model.CrCasSysAdministrativeProcedure.CrCasSysAdministrativeProceduresNo">
                                    <input hidden id="status" name="status">
                                    <input hidden id="SavePdfReceipt" name="SavePdfReceipt">
                                    <input hidden id="AccountReceiptNo" name="AccountReceiptNo">
                                    <input hidden id="branch" name="branch">
                                    <fieldset>
                                        <div class="form-card  px-lg-5 py-lg-5 feed-card">
                                            <div class="row data-row">
                                                <div class="col-auto">
                                                    <p id="feed-number"> @localizer["FeedNo"] </p>

                                                </div>
                                                <div class="col-auto personal-data">
                                                    <p>@Model.CrCasSysAdministrativeProcedure.CrCasSysAdministrativeProceduresNo</p>
                                                </div>
                                            </div>
                                            <div class="row data-row">
                                                <div class="col-auto">
                                                    <p id="feed-number"> @localizer["Feeder"]</p>

                                                </div>
                                                <div class="col-auto personal-data">
                                                    @if (requestCulture?.RequestCulture.UICulture.Name == "en-US")
                                                    {
                                                        <p>@userManager.FindByIdAsync(Model.CrCasSysAdministrativeProcedure.CrCasSysAdministrativeProceduresUserInsert).Result.CrMasUserInformationEnName</p>
                                                    }
                                                    else
                                                    {
                                                        <p>@userManager.FindByIdAsync(Model.CrCasSysAdministrativeProcedure.CrCasSysAdministrativeProceduresUserInsert).Result.CrMasUserInformationArName</p>
                                                    }
                                                </div>
                                            </div>
                                            <div class="row data-row">
                                                <div class="col-auto">
                                                    <p id="feed-number">@localizer["Date"]</p>

                                                </div>
                                                <div class="col-auto personal-data">
                                                    <p>@Model.CrCasSysAdministrativeProcedure.CrCasSysAdministrativeProceduresDate?.ToString("yyyy/MM/dd", CultureInfo.InvariantCulture)</p>
                                                </div>
                                            </div>
                                            <div class="row data-row">
                                                <div class="col-auto">
                                                    <p id="feed-number">@localizer["FeedBoxAmount"]</p>

                                                </div>
                                                <div class="col-auto personal-data">
                                                    <p>@Model.CrCasSysAdministrativeProcedure.CrCasSysAdministrativeProceduresDebit?.ToString("N2", CultureInfo.InvariantCulture)</p>
                                                </div>
                                            </div>
                                            <div class="row data-row ">
                                                <div class="col-auto">
                                                    <p id="notes">@localizer["reasons"]</p>
                                                </div>
                                                <div class="col-sm-5 col-md-6 col-lg-6">
                                                    <textarea class="form-control textarea-inputs @(requestCulture?.RequestCulture.UICulture.Name != "ar-EG" ? "text-start" : "text-end")" id="reasons" maxlength="100" name="reasons" asp-for="CrCasSysAdministrativeProcedure.CrCasSysAdministrativeProceduresReasons"></textarea>
                                                </div>

                                            </div>
                                            <div class="row data-row text-end">
                                                <div class="col-md-6">
                                                    <p style="color:#D92626;text-align: end;">@localizer["HintFeedBox"]</p>
                                                </div>
                                            </div>

                                        </div>

                                        <div class="row  g-3" style=" justify-content:center;">
                                            <div class="button-card gap-4">
                                                <a class="btn btn-secondary px-5" onclick="AcceptOrNot('Z')"> @localizer["Reject"]</a>
                                                <a class="btn feed-acceptt-btn px-5" onclick="AcceptOrNot('Q')">@localizer["Accept"]</a>
                                            </div>
                                        </div>
                                    </fieldset>
                                </form>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </section>
</div>
<!-- Footer -->
<footer class="fixed-bottom-xl">
    <div class="before-footer-widget">
        <svg width: 100%; height:auto viewbox="0 0 2444 132">
            <path fill="rgba(254, 248, 232, 1)" fill-rule="evenodd"
                  d="M1222 0h1222c-444.13 88-852.127 132-1223.993 132C849.253 132 442.585 88.263 0 .789V0h1222z">
            </path>
        </svg>
    </div>
</footer>
<!-- Footer-->
@section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js"></script>
    <!--Pdf-->
    <script src="~/PdfJS/Receipts/Receipt.js"></script>
    <script src="~/PdfJS/PdfAndImages.js"></script>
    <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/1.5.3/jspdf.min.js"></script>
    <script src="https://mozilla.github.io/pdf.js/build/pdf.js"></script>
    <!--Pdf-->
    <!--Create Receipt PDf-->
    <script>
        const CreateReceiptPdf = async () => {
            try {
                const accountReceiptNo = "@ViewBag.AccountReceiptNo";
                const canvas = document.getElementById("myCanvas");
                const dates = getFormattedDatesMiliadiAndHijri();
                var getAfterAndBeforeDecimalAmountPayed =await getFormattedAmount();
                console.log("getAfterAndBeforeDecimalAmountPayed",getAfterAndBeforeDecimalAmountPayed);
                const UserNameAr = '@Html.Raw(userManager.FindByIdAsync(Model.CrCasSysAdministrativeProcedure.CrCasSysAdministrativeProceduresUserInsert).Result.CrMasUserInformationArName)';
                const UserNameEn = '@Html.Raw(userManager.FindByIdAsync(Model.CrCasSysAdministrativeProcedure.CrCasSysAdministrativeProceduresUserInsert).Result.CrMasUserInformationEnName)';
                const ReferenceNo = '@ViewBag.ReferenceNo';
                var reverseReferenceNo = reverseParts(ReferenceNo);
                var arBranch = decodeHTMLEntities("@Model.CrCasBranchInformation?.CrCasBranchInformationArShortName");
                var enBranch = decodeHTMLEntities("@Model.CrCasBranchInformation?.CrCasBranchInformationEnShortName");
                const dynamicData = {
                    DATE_AR:dates.hijriDate.ar,
                    DATE_EN: dates.miladiDate.en,
                    HIJRI_DATE_AR: dates.hijriDate.en,
                    HIJRI_DATE_EN: dates.miladiDate.ar ,
                    CONTRACT_NUMBER: accountReceiptNo,
                    AMOUNT: getAfterAndBeforeDecimalAmountPayed.beforeDecimal,
                    HALALAS: getAfterAndBeforeDecimalAmountPayed.afterDecimal,
                    TENANT_NAME_AR: UserNameAr,
                    TENANT_NAME_EN: UserNameEn,
                    AMOUNT_AR: getAfterAndBeforeDecimalAmountPayed.arabicText,
                    AMOUNT_EN: getAfterAndBeforeDecimalAmountPayed.englishText,
                    PAYMENT_METHOD_AR: "نقدا",
                    PAYMENT_METHOD_EN: "CASH",
                    PAYMENT_DESC_AR: `تغذية صندوق فرع ${arBranch} , رقم المرجع ${reverseReferenceNo} `,
                    PAYMENT_DESC_EN: `Feed box for ${enBranch} Branch ,Reference No. ${ReferenceNo}`,
                    NOTES_AR: document.getElementById("reasons").value,
                    APPROVER_NAME_AR: decodeHTMLEntities("@user.CrMasUserInformationArName"),
                    APPROVER_NAME_EN: decodeHTMLEntities("@user.CrMasUserInformationEnName"),
                    images: {
                        background: "@Url.Content(userInfo?.CrMasUserInformationLessorNavigation?.CrMasLessorImage.CrMasLessorImageReceipt)",
                        signature: "@Url.Content(user?.CrMasUserInformationSignature)",
                        qr: "@Url.Content(userInfo?.CrMasUserInformationLessorNavigation?.CrMasLessorImage.CrMasLessorImageQrCodeSite)",
                        stamp: "@Url.Content(userInfo?.CrMasUserInformationLessorNavigation?.CrMasLessorImage.CrMasLessorImageStamp)",
                    },
                };
                const loadedImages = await loadDynamicImages(dynamicData.images);
                const dataWithImages = { ...dynamicData, images: loadedImages };
                console.log("dataWithImages",dataWithImages);
                await drawReceipt(canvas, dataWithImages);
                await createPdf(accountReceiptNo, canvas, "SavePdfReceipt", "AccountReceiptNo");
           }
            catch (error) {
                console.error("خطأ في إنشاء الفاتورة:", error);
            }
        }
        async function getFormattedAmount() {
                        // الحصول على قيمة الإدخال من العنصر
            var AmountPayed = '@Html.Raw(Model.CrCasSysAdministrativeProcedure.CrCasSysAdministrativeProceduresDebit)';
            // تحويل القيمة إلى رقم والتأكد من وجود خانتين عشريتين
            const rawAmountPayed = parseFloat(AmountPayed).toFixed(2);

            // تقسيم الرقم إلى جزأين: الجزء الصحيح والجزء العشري
            const [beforeDecimalll, afterDecimal] = rawAmountPayed.split(".");

            // تنسيق الجزء الصحيح ليشمل فاصلة الآلاف
                const beforeDecimal = parseInt(beforeDecimalll).toLocaleString('en-US');

                    // استدعاء البيانات لتغيير الرقم إلى نص
                    const numberToText = await dataChanged(rawAmountPayed);

                    // النص بالعربية والإنجليزية
                    const arabicText = numberToText.ar_concatenate;
                    const englishText = numberToText.en_concatenate;

                    // إرجاع النتيجة
                    return {
                        beforeDecimal,
                        afterDecimal,
                        arabicText,
                        englishText
                    };
            }
        function getFormattedDatesMiliadiAndHijri() {
            // الحصول على التاريخ الميلادي الحالي من الخادم
            var dateTimeNow = decodeHTMLEntities('@DateTime.Now.ToString("yyyy-MM-ddTHH:mm:ss.fffK")');
            const miladiDate = new Date(dateTimeNow);

            // تنسيق التاريخ الميلادي
            const miladiOptions = { year: 'numeric', month: '2-digit', day: '2-digit' };
            const miladiDateString = miladiDate.toLocaleDateString('en-US', miladiOptions).split('/').join('/');

            // تنسيق التاريخ الهجري
            const hijriDateStringAr = formatHijriDate(miladiDate, 'ar');
            const hijriDateStringEn = formatHijriDate(miladiDate, 'en');

            return {
                miladiDate: {
                    en: miladiDateString,
                    ar: miladiDateString // يمكن تنسيق التاريخ الميلادي بالعربية إذا أردت
                },
                hijriDate: {
                    ar: hijriDateStringAr,
                    en: hijriDateStringEn
                }
            };
        }
        // Function to format Hijri date
        function formatHijriDate(date, language) {
            const parsedDate = new Date(date);
            const options = { weekday: 'long', day: 'numeric', year: 'numeric', month: 'long', calendar: 'islamic-umalqura' };
            if (language === 'ar') {
                return parsedDate.toLocaleDateString('ar-SA', options).replace(/هـ/g, ''); // إزالة "هـ" من التاريخ العربي
            } else {
                return parsedDate.toLocaleDateString('en-US-u-ca-islamic-umalqura', options).replace(/AH/g, ''); // إزالة "AH" من التاريخ الإنجليزي
            }
        }
    </script>

    <script>
        async function AcceptOrNot(status) {
            var form = document.getElementById('msform');
            // Set the value of the hidden input field
            document.getElementById('status').value = status;
            document.getElementById('branch').value = '@Model.SelectedBranch';
            $("#ContainerLoader").show();
            if (status == "@Status.Accept") {
                await CreateReceiptPdf();
            }
            // Submit the form
            setTimeout(function () {
                form.submit();
            }, 5000);
        }
    </script>
    <script>

        // To decode some string
        function decodeHTMLEntities(text) {
            var textArea = document.createElement("textarea");
            textArea.innerHTML = text;
            return textArea.value;
        }

        function reverseParts(input) {
            let parts = input.split('-');
            parts.reverse();
            return parts.join("-");
        }
        async function dataChanged(number) {
            try {
                const response = await $.ajax({
                    url: "/BS/Contract/Get_ConvertedNumber_Action",
                    type: "GET",
                    data: { our_No: number },
                });
                return response;
            } catch (error) {
                console.error("Error occurred: ", error);
            }
        }
    </script>
}