@using Bnan.Core.Extensions;
@using Bnan.Ui.ViewModels.BS;
@using Microsoft.AspNetCore.Identity;
@using Microsoft.EntityFrameworkCore;
@using Newtonsoft.Json;
@model BSLayoutVM
@inject IViewLocalizer localizer
@{
    var requestCulture = Context.Features.Get<IRequestCultureFeature>();
    ViewData["returnUrl"] = string.IsNullOrEmpty(Context.Request.Path) ? "~/" : $"~{Context.Request.Path.Value}";
}



<link href="~/BranchSys/Pages/css/style.css" rel="styleSheet">
@if (requestCulture?.RequestCulture.UICulture.Name != "ar-EG")
{
    <link href="~/BranchSys/Pages/css/English_style.css" rel="styleSheet">
}

@{
    var branchValidity = Model.CrMasUserBranchValidity;
    var totalAvaliableBalanceInBranch = branchValidity?.CrMasUserBranchValidityBranchCashAvailable +
    branchValidity?.CrMasUserBranchValidityBranchSalesPointAvailable +
    branchValidity?.CrMasUserBranchValidityBranchTransferAvailable;

    var totalResevedBalanceInBranch = branchValidity?.CrMasUserBranchValidityBranchCashReserved +
    branchValidity?.CrMasUserBranchValidityBranchSalesPointReserved +
    branchValidity?.CrMasUserBranchValidityBranchTransferReserved;

    var totalBalanceInBranch = branchValidity?.CrMasUserBranchValidityBranchSalesPointBalance +
    branchValidity?.CrMasUserBranchValidityBranchCashBalance +
    branchValidity?.CrMasUserBranchValidityBranchTransferBalance;

}

<div class="container-fluid ">
    <section class="section-mainCard">
        <div class="row justify-content-center w-100 h-100">
            <div class="col-11 col-sm-10 col-md-11 col-lg-11 col-xl-10 text-center p-0 ">
                <div class="card main-card ">
                    <div class="row pt-2">
                        <a asp-action="Index" asp-area="BS" asp-controller="Home" style="width: fit-content;">
                            <img src="~/BranchSys/Pages/img/cancel.png" alt="cancle_icon" class="cancle-icon">
                        </a>
                    </div>
                    <div class="row layout-row custody-layout-row">

                        <div class="row" style="flex-direction: row-reverse;">
                            <div class="col justify-content-center d-flex title-row">
                                <h1 class="card-title">
                                    @localizer["ReceivingCustody"]
                                </h1>
                            </div>

                        </div>
                        <div class="row justify-content-center h-100 content-row">

                            <div class="col-md-11 mx-0 h-100">
                                <form id="custody-form" class="needs-validation" asp-action="SendCustody" asp-controller="Custody" asp-area="BS" novalidate>

                                    <input hidden asp-for="SelectedBranch" id="branch" />
                                    <input hidden id="SalesPoint" name="SalesPoint" />
                                    <input hidden id="ReferenceNo" name="ReferenceNo" value="@ViewBag.ReceiptPassingReferenceNo" />
                                    <input hidden id="ReceiptsNo" name="ReceiptsNo" />
                                    <input hidden id="TotalPayment" name="TotalPayment" />
                                    <input hidden id="TotalReceipt" name="TotalReceipt" />
                                    <input hidden id="TotalReceived" name="TotalReceived" />
                                    <fieldset>

                                        <div class="form-card details-card">

                                            <div class="row g-0 pt-2" style="flex-direction:row-reverse">
                                                <div class=" col-lg-6 col-xl-4 d-flex data-col flex-md-nowrap">
                                                    <div class="col-auto ">
                                                        <P>@localizer["CustodyNo"]</P>
                                                    </div>
                                                    <div class="col-auto  personal-data">
                                                        <P>@ViewBag.ReceiptPassingReferenceNo</P>
                                                    </div>
                                                </div>
                                                <div class=" col-lg-6 col-xl-4  d-flex data-col">
                                                    <div class="col-auto ">
                                                        <P>@localizer["Date"]</P>
                                                    </div>
                                                    <div class="col-auto  personal-data">
                                                        <P>@ViewBag.Date</P>
                                                    </div>
                                                </div>
                                                <div class="row " style="flex-direction:row-reverse">
                                                    <div class=" col-lg-6 col-xl-4  flex-wrap    d-flex" style="flex-direction: row-reverse;">
                                                        <div class="col-auto">
                                                            <label for="selling-point-drop">@localizer["SalesPoint"]</label>
                                                        </div>
                                                        <div class=" col-md-9 personal-data">
                                                            <div id="dropdown-container ">
                                                                <div>
                                                                    <select class="form-select form-select-selling" id="selling-point-drop" style="font-size: .8rem;" asp-for="SalesPointSelected" required>
                                                                        <option selected disabled></option>
                                                                        @foreach (var item in Model.SalesPointHaveBalance)
                                                                        {
                                                                            if (requestCulture?.RequestCulture.UICulture.Name == "ar-EG")
                                                                            {
                                                                                <option class="text-right" value="@item.CrCasAccountSalesPointCode">
                                                                                    @item.CrCasAccountSalesPointArName
                                                                                </option>
                                                                            }
                                                                            else
                                                                            {
                                                                                <option class="text-left" value="@item.CrCasAccountSalesPointCode">
                                                                                    @item.CrCasAccountSalesPointEnName
                                                                                </option>
                                                                            }
                                                                        }
                                                                    </select>
                                                                    <div class="row requird-field-row-last">
                                                                        <span class="requird-field" asp-validation-for="@Model.SalesPointSelected"></span>
                                                                    </div>
                                                                </div>
                                                            </div>

                                                        </div>
                                                    </div>

                                                </div>
                                            </div>
                                            <div id="CustodyData">
                                                <partial name="_CustodyData" />
                                            </div>
                                        </div>
                                        <div class="row button-row pt-3 pb-1 ps-4">
                                            <div class="button-card55">
                                                <a id="SubmitBtn" class="btn btn-custom">@localizer["Save"]</a>
                                            </div>
                                            <div class="button-card55">
                                            </div>
                                        </div>
                                    </fieldset>

                                </form>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </section>
</div>
<footer class="fixed-bottom-xl">
    <div class="before-footer-widget">
        <svg width: 100%; height:auto viewbox="0 0 2444 132">
            <path fill="rgba(254, 248, 232, 1)" fill-rule="evenodd"
                  d="M1222 0h1222c-444.13 88-852.127 132-1223.993 132C849.253 132 442.585 88.263 0 .789V0h1222z">
            </path>
        </svg>
    </div>
</footer>

@section scripts {
    <partial name="_ValidationScriptsPartial" />
    <script>
        // $(document).ready(function () {
        //     // Attach a change event handler to the select element
        //     $('#selling-point-drop').change(function () {
        //         // Get the selected value
        //         var salesPoint = $(this).val();
        //         var branch = $("#branch").val();
        //         //Store SalesPoint Code in Hidden Input
        //         $("#SalesPointSelected").val(salesPoint);
        //         $.ajax({
        //             type: "GET",
        //             data: {
        //                 branchCode: branch,
        //                 salesPointCode: salesPoint
        //             },
        //             url: "@Url.Action("GetDetailsByBranch", "Custody", new { Area = "BS" })",
        //             success: function (response) {
        //                 $("#CustodyData").html(response);
        //             },
        //         });
        //     });
        // });
    </script>
    <script>
        var checkedReceiptNos = [];
        var totalTransfer = 0;
        $(document).ready(function () {
            // Attach a change event handler to the select element
            $('#selling-point-drop').change(function () {
                // Get the selected value
                var salesPoint = $(this).val();
                var branch = $("#branch").val();
                // Store SalesPoint Code in Hidden Input
                $("#SalesPointSelected").val(salesPoint);
                $.ajax({
                    type: "GET",
                    data: {
                        branchCode: branch,
                        salesPointCode: salesPoint
                    },
                    url: "@Url.Action("GetDetailsByBranch", "Custody", new { Area = "BS" })",
                    success: function (response) {
                        $("#CustodyData").html(response);
                        // Automatically check all checkboxes with Receipt_ value > 0
                        document.querySelectorAll('.custody-input').forEach(function (checkbox) {
                            var row = checkbox.closest('tr');
                            var receiptNo = checkbox.value;
                            var receiptReceiptText = row.querySelector('td[id^="Receipt_' + receiptNo + '"]').textContent;
                            var receiptReceipt = parseFloat(receiptReceiptText.replace(/,/g, "")) || 0;

                            if (receiptReceipt > 0) {
                                checkbox.checked = true;
                                if (!checkedReceiptNos.includes(receiptNo)) {
                                    checkedReceiptNos.push(receiptNo);
                                }
                                checkbox.disabled = true; // Disable the checkbox
                            }
                        });
                        console.log("checkedReceiptNos", checkedReceiptNos)
                        // Update totals after checking
                        updateTotals();
                    },
                });
            });
        });
        function handleCheckboxChange(checkbox) {
            var receiptNo = checkbox.value;

            if (checkbox.checked) {
                if (!checkedReceiptNos.includes(receiptNo)) {
                    checkedReceiptNos.push(receiptNo);
                }
            } else {
                var index = checkedReceiptNos.indexOf(receiptNo);
                if (index !== -1) {
                    checkedReceiptNos.splice(index, 1);
                }

                // Check if all enabled checkboxes are unchecked
                if (allEnabledUnchecked()) {
                    // Remove all disabled checkboxes' values from checkedReceiptNos
                    document.querySelectorAll('.custody-input:disabled').forEach(function (disabledCheckbox) {
                        var disabledReceiptNo = disabledCheckbox.value;
                        var disabledIndex = checkedReceiptNos.indexOf(disabledReceiptNo);
                        if (disabledIndex !== -1) {
                            checkedReceiptNos.splice(disabledIndex, 1);
                        }
                    });
                }
            }

            updateTotals();
        }
        // Function to check if all enabled checkboxes are unchecked
        function allEnabledUnchecked() {
            var allUnchecked = true;
            document.querySelectorAll('.custody-input:not(:disabled)').forEach(function (checkbox) {
                if (checkbox.checked) {
                    allUnchecked = false;
                }
            });
            return allUnchecked;
        }
        function updateTotals() {
            var totalReceipts = 0;
            var totalPayments = 0;

            document.querySelectorAll('.custody-input').forEach(function (checkbox) {
                var row = checkbox.closest('tr');
                var receiptNo = checkbox.value;
                var receiptReceiptText = row.querySelector('td[id^="Receipt_' + receiptNo + '"]').textContent;
                var receiptPaymentText = row.querySelector('td[id^="Payment_' + receiptNo + '"]').textContent;
                var receiptReceipt = parseFloat(receiptReceiptText.replace(/,/g, "")) || 0;
                var receiptPayment = parseFloat(receiptPaymentText.replace(/,/g, "")) || 0;

                receiptReceipt *= 100;
                receiptPayment *= 100;

                if (checkbox.checked) {
                    totalReceipts += receiptReceipt;
                    totalPayments += receiptPayment;
                }
            });

            totalReceipts /= 100;
            totalPayments /= 100;

            document.getElementById('totalReceipts').textContent = totalReceipts.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 });
            document.getElementById('totalPayments').textContent = totalPayments.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 });
            totalTransfer = totalPayments - totalReceipts;
            if (totalTransfer <= 0) {
                document.getElementById('totalTransfer').textContent = "0.00";
                totalTransfer = 0;
            }
            else {
                document.getElementById('totalTransfer').textContent = (totalPayments - totalReceipts).toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 });
            }
            document.getElementById('HiddenTotalReceipts').value = totalReceipts.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 });
            document.getElementById('HiddenTotalPayments').value = totalPayments.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 });
            document.getElementById('HiddenTotalTransfer').value = (totalPayments - totalReceipts).toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 });

            document.getElementById('ReceiptsNo').value = checkedReceiptNos.join(',');
            document.getElementById('TotalPayment').value = totalPayments;
            document.getElementById('TotalReceipt').value = totalReceipts;
            document.getElementById('TotalReceived').value = totalTransfer;
        }


        window.onload = function () {
            document.querySelectorAll('.custody-input').forEach(function (checkbox) {
                if (checkbox.checked || checkbox.disabled) {
                    checkedReceiptNos.push(checkbox.value);
                }
            });
            updateTotals();
        };

        document.getElementById('SubmitBtn').addEventListener('click', function (event) {
            // Retrieve the balances and parse them as floats
            var selectedCustodyBalance = parseFloat(document.getElementById('HiddenTotalTransfer').value.replace(/,/g, ''));
            var avaliableBalanceForRenter = parseFloat(document.getElementById('HiddenAvailableBalanceForRenterInBranch').value.replace(/,/g, ''));
            // Check if the receipts are valid
            var isValidReceipts = checkedReceiptNos.length > 0;

            // If the form is valid
            if ($("#custody-form").valid()) {
                // If receipts are not valid, show error message and prevent form submission
                if (!isValidReceipts) {
                    toastr.options = { "positionClass": '@localizer["toastPostion"]' };
                    toastr.error('@localizer["PleaseChooseAtLeastOneValue"]');
                    event.preventDefault();
                    return;
                }

                // Check if available balance is lower than selected custody balance
                if (avaliableBalanceForRenter < selectedCustodyBalance) {
                    toastr.options = { "positionClass": '@localizer["toastPostion"]' };
                    toastr.error('@localizer["AvailableLessThanCustody"]');
                    event.preventDefault();
                    return;
                }
                if (totalTransfer <= 0) {
                    toastr.options = { "positionClass": '@localizer["toastPostion"]' };
                    toastr.error('@localizer["TransferValueLessThanZero"]');
                    event.preventDefault();
                    return;
                }
                $("#ContainerLoader").show();
                // If all conditions are met, submit the form
                $("#custody-form").submit();
            }
        });

    </script>
}