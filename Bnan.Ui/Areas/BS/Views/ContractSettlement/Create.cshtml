@using Bnan.Ui.ViewModels.BS;
@using Microsoft.AspNetCore.Identity
@model BSLayoutVM
@inject IViewLocalizer localizer
@using Microsoft.EntityFrameworkCore;
@inject UserManager<CrMasUserInformation> userManager
@inject SignInManager<CrMasUserInformation> signinManager
@{
    var requestCulture = Context.Features.Get<IRequestCultureFeature>();
    ViewData["returnUrl"] = string.IsNullOrEmpty(Context.Request.Path) ? "~/" : $"~{Context.Request.Path.Value}";
    var user = await userManager.GetUserAsync(User);
    var userInfo = await userManager.Users
      .Include(l => l.CrMasUserMainValidations)
      .Include(l => l.CrMasUserSubValidations)
      .Include(x => x.CrMasUserBranchValidities)
      .Include(x => x.CrMasUserContractValidity)
      .Include(l => l.CrMasUserInformationLessorNavigation)
      .FirstOrDefaultAsync(l => l.UserName == user.UserName);
    var lessorInfo = await userManager.Users.Include(l => l.CrMasUserInformationLessorNavigation).ThenInclude(l => l.CrMasLessorImage).FirstOrDefaultAsync(x => x.UserName == user.UserName);
}
<link href="~/BranchSys/Pages/css/style.css" rel="styleSheet">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css" integrity="sha512-SnH5WK+bZxgPHs44uWIX+LLJAJ9/2PkPKZ5QiAj6Ta86w+fsb2TkcmfRyVX3pBnMFcV7oQPJkl9QevSCWr3W6A==" crossorigin="anonymous" referrerpolicy="no-referrer" />

@if (requestCulture?.RequestCulture.UICulture.Name != "ar-EG")
{
    <link href="~/BranchSys/Pages/css/English_style.css" rel="styleSheet">
}
<style>
    *:disabled {
        background-color: white !important;
    }
</style>
<!-- MultiStep Form -->
<div class="container-fluid" id="grad1">
    <section class="section-mainCard">
        <div class="row justify-content-center w-100 h-100">
            <div class="col-11 col-sm-10 col-md-11 col-lg-11 col-xl-10 text-center p-0 ">
                <div class="card main-card ">
                    <div class="row p-2 align-items-center">
                        <a asp-action="Index" asp-area="BS" asp-controller="Home" style="width: fit-content;">
                            <div>
                                <img src="~/BranchSys/Pages/img/Close.svg" alt="close_icon" class="close-icon" style="margin-left:10px;">
                            </div>
                        </a>
                        <a asp-action="Index" asp-area="BS" asp-controller="ContractSettlement" style="width: fit-content;">
                            <div>
                                <img src="~/BranchSys/Pages/img/Arrow_Left.svg" alt="back_icon" class="back-icon">
                            </div>
                        </a>
                    </div>

                    <div class="row flex-row-reverse">
                        <div class="col justify-content-center d-flex title-row">
                            <span class="card-title">
                                @localizer["ContractSettlement"]
                            </span>
                        </div>

                    </div>
                    <div class="row justify-content-center content-row h-100">

                        <div class="col-md-11 mx-0 h-100 pb-2">

                            <form id="SettlementForm" asp-area="BS" asp-controller="ContractSettlement" asp-action="Create" method="post" enctype="multipart/form-data" class="needs-validation" novalidate>
                                <input hidden asp-for="ContractSettlement.CrCasRenterContractBasicNo" />
                                <input hidden asp-for="SelectedBranch" />
                                <input hidden asp-for="ContractSettlement.ActualDaysNo" />
                                <input hidden asp-for="ContractSettlement.AdditionalKm" />
                                <input hidden asp-for="ContractSettlement.TaxValue" />
                                <input hidden asp-for="ContractSettlement.DiscountValue" />
                                <input hidden asp-for="ContractSettlement.ContractValueAfterDiscount" />
                                <input hidden asp-for="ContractSettlement.TotalContract" />
                                <input hidden asp-for="ContractSettlement.ContractValue" />
                                <input hidden asp-for="ContractSettlement.MaxHours" />
                                <input hidden asp-for="ContractSettlement.MaxMinutes" />
                                <input hidden asp-for="ContractSettlement.ExtraHoursValue" />
                                <input hidden asp-for="ContractSettlement.ChoicesValueTotal" />
                                <input hidden asp-for="ContractSettlement.PrivateDriverValueTotal" />
                                <input hidden asp-for="ContractSettlement.PreviousBalance" />
                                <input hidden asp-for="ContractSettlement.AmountRequired" />
                                <input hidden asp-for="ContractSettlement.AdvantagesValueTotal" />
                                <input hidden id="StaticContractCardImg" name="StaticContractCardImg" />
                                <input hidden id="SavePdfArInvoice" name="SavePdfArInvoice" />
                                <input hidden id="SavePdfEnInvoice" name="SavePdfEnInvoice" />
                                <input hidden id="SavePdfArReceipt" name="SavePdfArReceipt" />
                                <input hidden id="SavePdfEnReceipt" name="SavePdfEnReceipt" />
                                <input hidden id="SavePdfEnContract" name="SavePdfEnContract" />
                                <input hidden id="SavePdfArContract" name="SavePdfArContract" />
                                <input hidden asp-for="ContractSettlement.AccountReceiptNo" />
                                <input hidden asp-for="ContractSettlement.InitialInvoiceNo" />
                                <input hidden id="language" name="language" />
                                <div class=" ">
                                    <!-- progressbar -->
                                    <ul id="progressbar">
                                        <li class="active" id="Rental_terms">@localizer["TermsRented"]</li>
                                        <li id="Expenses">@localizer["Expenses"]</li>
                                        <li id="compensation">@localizer["Compensations"]</li>
                                        <li id="check">@localizer["VirtualInspection"]</li>
                                        <li id="payment">@localizer["Payment"]</li>
                                    </ul>
                                </div>
                                <fieldset id="firstFieldset">
                                    <div class="form-card SettlementCard1 ">
                                        <div class="d-flex mb-3 gap-3">
                                            
                                                <a href="@Url.Content(Model.ContractSettlement?.CrCasRenterContractBasicPdfFile?.ToString())" target="_blank" class="pdf-anchor"><img src="~/BranchSys/Pages/img/contract.svg" alt="pdf for contract details" class="pdf_img"></a>
                                            
                                            

                                           
                                                <a href="@Url.Content(Model.ContractSettlement?.InvoicePdfPath?.ToString())" target="_blank" class="pdf-anchor2"><img src="~/BranchSys/Pages/img/Invoice.svg" alt="pdf for contract details" class="pdf_img2"></a>
                                            
                                            
                                            @if (requestCulture?.RequestCulture.UICulture.Name != "ar-EG")
                                            {
                                                <a href="https://drive.google.com/file/d/1q2Mb1uLGjLIvRphej_9X4zHhc9OuCcyB/view"
                                                   target="_blank" class="pdf-anchor3">
                                                    <img src="~/BranchSys/Pages/img/naql.svg"
                                                         alt="pdf for contract details" class="pdf_img3">
                                                </a>
                                            }
                                            else
                                            {
                                                <a href="https://drive.google.com/file/d/1q2Mb1uLGjLIvRphej_9X4zHhc9OuCcyB/view"
                                                   target="_blank" class="pdf-anchor3">
                                                    <img src="~/BranchSys/Pages/img/naql.svg"
                                                         alt="pdf for contract details" class="pdf_img3">
                                                </a>
                                            }
                                        </div>
                                        <div class="row data-row-Settl ">
                                            <div class=" col-md-12 col-lg-7 data-col-Settl flex-wrap ">
                                                <div class="col-auto ">
                                                    <P>@localizer["ContractNo"]</P>
                                                </div>
                                                <div class="col-auto personal-data ">
                                                    <P>@Model.ContractSettlement.CrCasRenterContractBasicNo</P>
                                                </div>
                                                <div class="col-md-auto  seacrh-icon-col">
                                                    <div class="col-sm-12  d-flex justify-content-end">
                                                        <img src="~/BranchSys/Pages/img/Rectangle 129.svg" alt="seacrh-icon Image" id="hover-image-Settlement">
                                                    </div>
                                                    <div class="dropdown-content dropdown-content-extension" id="dropdown-content-Settlement">
                                                        <div class="row dropdown-content-row">
                                                            <div class="col-auto ">
                                                                <p>: @localizer["Renterr"] </p>
                                                            </div>
                                                            <div class="col personal-data">
                                                                @if (requestCulture?.RequestCulture.UICulture.Name != "ar-EG")
                                                                {
                                                                    <p>@Model.ContractSettlement.CrCasRenterContractBasic5?.CrCasRenterLessorNavigation.CrMasRenterInformationEnName</p>
                                                                }
                                                                else
                                                                {
                                                                    <p>@Model.ContractSettlement.CrCasRenterContractBasic5?.CrCasRenterLessorNavigation.CrMasRenterInformationArName</p>
                                                                }
                                                            </div>

                                                        </div>
                                                        <div class="row dropdown-content-row">
                                                            <div class="col-auto ">
                                                                <p>: @localizer["Car"]</p>
                                                            </div>
                                                            <div class="col personal-data">
                                                                @if (requestCulture?.RequestCulture.UICulture.Name != "ar-EG")
                                                                {
                                                                    <p>@Model.ContractSettlement.CrCasRenterContractBasicCarSerailNoNavigation?.CrCasCarInformationConcatenateEnName</p>
                                                                }
                                                                else
                                                                {
                                                                    <p>@Model.ContractSettlement.CrCasRenterContractBasicCarSerailNoNavigation?.CrCasCarInformationConcatenateArName</p>
                                                                }
                                                            </div>

                                                        </div>

                                                        <div class="row dropdown-content-row">
                                                            <div class="col-auto ">
                                                                <p>: @localizer["StartContract"]</p>
                                                            </div>
                                                            <div class="col personal-data">
                                                                <p>@Model.ContractSettlement.CrCasRenterContractBasicExpectedStartDate?.ToString("yyyy/MM/dd HH:mm", CultureInfo.InvariantCulture)</p>
                                                            </div>

                                                        </div>

                                                        <div class="row dropdown-content-row">
                                                            <div class="col-auto ">
                                                                <p>: @localizer["ExpectedEndContract"]</p>
                                                            </div>
                                                            <div class="col personal-data">
                                                                <p>@Model.ContractSettlement.CrCasRenterContractBasicExpectedEndDate?.ToString("yyyy/MM/dd HH:mm", CultureInfo.InvariantCulture)</p>
                                                            </div>

                                                        </div>
                                                        <div class="row dropdown-content-row">
                                                            <div class="col-auto ">
                                                                <p> : @localizer["ExpectedDaysNo"]</p>
                                                            </div>
                                                            <div class="col personal-data">
                                                                <p>@Model.ContractSettlement.CrCasRenterContractBasicExpectedRentalDays</p>
                                                            </div>

                                                        </div>
                                                        <div class="row dropdown-content-row">
                                                            <div class="col-auto ">
                                                                <p> : @localizer["FreeAdditionalHours"]</p>
                                                            </div>
                                                            <div class="col personal-data">
                                                                <p>
                                                                    <span>@Model.ContractSettlement.CrCasRenterContractBasicUserFreeHours?.ToString() + @Model.ContractSettlement.CrCasRenterContractBasicFreeHours?.ToString()</span>
                                                                </p>
                                                            </div>
                                                        </div>
                                                        <div class="row dropdown-content-row">
                                                            <div class="col-auto ">
                                                                <p> : @localizer["HourMax"]</p>
                                                            </div>
                                                            <div class="col personal-data">
                                                                <p>@Model.ContractSettlement.CrCasRenterContractBasicHourMax</p>
                                                            </div>
                                                        </div>
                                                        <div class="row dropdown-content-row">
                                                            <div class="col-auto ">
                                                                <p> : @localizer["DailyFreeKm"]</p>
                                                            </div>
                                                            <div class="col personal-data">
                                                                <p>
                                                                    <span>@Model.ContractSettlement.CrCasRenterContractBasicDailyFreeKmUser?.ToString() + @Model.ContractSettlement.CrCasRenterContractBasicTotalDailyFreeKm?.ToString()  </span>
                                                                </p>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                            @* <div class=" col-md-auto col-lg-6 data-col-Settl flex-wrap Settlement-date ">
                                            <div class="col-auto ">
                                            <P>@localizer["SettlementDate"]</P>
                                            </div>
                                            <div class="col-auto personal-data ">
                                            <P>@DateTime.Now.ToString("yyyy/MM/dd", CultureInfo.InvariantCulture)</P>
                                            </div>
                                            </div> *@
                                        </div>
                                        <div class="row data-row-Settl">
                                            <div class="col-md-12  col-lg-6 col-xl-4 data-col-Settl flex-wrap ">
                                                <div class="col-auto ">
                                                    <P>@localizer["ContractValue"]</P>
                                                </div>
                                                <div class="col-auto personal-data ">
                                                    <P>@Model.ContractSettlement.CrCasRenterContractBasicExpectedTotal?.ToString("N2", CultureInfo.InvariantCulture)</P>
                                                </div>
                                                <div class="col-md-5 col-lg-5 col-xl-4  seacrh-icon-col">
                                                    <div class="col-sm-12  d-flex justify-content-end">
                                                        <img src="~/BranchSys/Pages/img/Rectangle 129.svg" alt="seacrh-icon Image" id="contract-value-Settlement2">
                                                    </div>
                                                    <div class="dropdown-content  dropdown-content-extension" id="dropdown-content-Settlement2">
                                                        <div class="row dropdown-content-row">
                                                            <div class="col-auto ">
                                                                <p>: @localizer["Rent"]</p>
                                                            </div>
                                                            <div class="col personal-data">
                                                                <p>@Model.ContractSettlement.CrCasRenterContractBasicExpectedRentValue?.ToString("N2", CultureInfo.InvariantCulture)</p>
                                                            </div>

                                                        </div>
                                                        <div class="row dropdown-content-row">
                                                            <div class="col-auto ">
                                                                <p>: @localizer["Delegationn"]</p>
                                                            </div>
                                                            <div class="col personal-data">
                                                                <p>@Model.ContractSettlement.CrCasRenterContractBasicAuthorizationValue?.ToString("N2", CultureInfo.InvariantCulture)</p>
                                                            </div>
                                                        </div>

                                                        <div class="row dropdown-content-row">
                                                            <div class="col-auto ">
                                                                <p>: @localizer["Features"]</p>
                                                            </div>
                                                            <div class="col personal-data">
                                                                <p>@Model.ContractSettlement.AdvantagesValueTotal</p>
                                                            </div>
                                                        </div>

                                                        <div class="row dropdown-content-row">
                                                            <div class="col-auto ">
                                                                <p>: @localizer["AdditionalDriverr"]</p>
                                                            </div>
                                                            <div class="col personal-data">
                                                                <p>@Model.ContractSettlement.CrCasRenterContractBasicAdditionalDriverValue?.ToString("N2", CultureInfo.InvariantCulture)</p>
                                                            </div>

                                                        </div>
                                                        <div class="row dropdown-content-row">
                                                            <div class="col-auto ">
                                                                <p>: @localizer["PrivateDriver"] </p>
                                                            </div>
                                                            <div class="col personal-data">
                                                                <p>@Model.ContractSettlement.CrCasRenterContractBasicExpectedPrivateDriverValue?.ToString("N2", CultureInfo.InvariantCulture)</p>
                                                            </div>

                                                        </div>
                                                        <div class="row dropdown-content-row">
                                                            <div class="col-auto ">
                                                                <p>: @localizer["Choicess"]</p>
                                                            </div>
                                                            <div class="col personal-data">
                                                                <p>@Model.ContractSettlement.CrCasRenterContractBasicExpectedOptionsValue?.ToString("N2", CultureInfo.InvariantCulture)</p>
                                                            </div>

                                                        </div>
                                                        <div class="row dropdown-content-row">
                                                            <div class="col-auto ">
                                                                <p>: @localizer["Additionalss"]</p>
                                                            </div>
                                                            <div class="col personal-data">
                                                                <p> @Model.ContractSettlement.CrCasRenterContractBasicAdditionalValue?.ToString("N2", CultureInfo.InvariantCulture) </p>
                                                            </div>
                                                        </div>
                                                        <div class="row dropdown-content-row">
                                                            <div class="col-auto ">
                                                                <p>: @localizer["Discount"]</p>
                                                            </div>
                                                            <div class="col personal-data">
                                                                <p> @Model.ContractSettlement.CrCasRenterContractBasicExpectedDiscountValue?.ToString("N2", CultureInfo.InvariantCulture) </p>
                                                            </div>
                                                        </div>
                                                        <div class="row dropdown-content-row">
                                                            <div class="col-auto ">
                                                                <p>: @localizer["Tax"]</p>
                                                            </div>
                                                            <div class="col personal-data">
                                                                <p> @Model.ContractSettlement.CrCasRenterContractBasicExpectedTaxValue?.ToString("N2", CultureInfo.InvariantCulture) </p>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="row data-row-Settl g-3">
                                            <div class=" col-lg-5  data-col-Settl flex-wrap">
                                                <div class="col-auto">
                                                    <label for="contract_real_endTime">
                                                        @localizer["EndOfSettlement"]
                                                    </label>
                                                </div>
                                                <div class="col-md-6">
                                                    <input type="date" id="contract_real_endTime" class="form-control inputs" asp-for="ContractSettlement.ActualEndContractDate" aria-describedby="inputGroupPrepend" required>
                                                    <div class="row requird-field-row-last">
                                                        <span class="requird-field" id="requird_field_SettlementMechanism" asp-validation-for="@Model.ContractSettlement.ActualEndContractDate"></span>
                                                    </div>
                                                </div>
                                            </div>
                                            <div class=" col-lg-5  data-col-Settl flex-wrap">
                                                <div class="col-auto">
                                                    <p>@localizer["ActualNumberOfDays"]</p>
                                                </div>
                                                <div class="col-auto personal-data">
                                                    <P id="daysNo">0</P>
                                                </div>

                                            </div>
                                        </div>
                                        <div class="row data-row-Settl">
                                            <div class="col-md-5 data-col-Settl" id="divLateHours" style="display:none">
                                                <div class="col-auto">
                                                    <p id="AddOrLateHoursText">@localizer["FreeHourss"]</p>
                                                </div>
                                                <div class="col-auto personal-data">
                                                    <span id="diffHours">00</span>:<span id="diffMinutes">00</span>
                                                </div>
                                            </div>
                                            <div class="col-md-6 col-lg-5  data-col-Settl flex-wrap " id="mechanismSettlement" style="display:none">
                                                <div class="col-auto">
                                                    <label for="Settlement-mechanism">
                                                        @localizer["SettlementMechanism"]
                                                    </label>
                                                </div>
                                                <div class="col-12 col-md-7 col-lg-6">
                                                    <select class="form-select form-select-settel" id="Settlement-mechanism" asp-for="ContractSettlement.SettlementMechanism">
                                                        <option selected disabled>
                                                        </option>
                                                        <option value="0">@localizer["Without"]</option>
                                                        <option value="1">@localizer["Day"]</option>
                                                        <option value="2">@localizer["DayHalf"]</option>
                                                        <option value="3">@localizer["DayQuarter"]</option>
                                                    </select>
                                                    <div class="row requird-field-row-last">
                                                        <span class="requird-field" id="requird_field_SettlementMechanism" asp-validation-for="@Model.ContractSettlement.SettlementMechanism"></span>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="row data-row-Settl">
                                            <div class=" col-lg-5  data-col-Settl flex-wrap">
                                                <div class="col-auto">
                                                    <p>@localizer["ReceivingBranch"] </p>
                                                </div>
                                                <div class="col-auto personal-data">
                                                    @if (requestCulture?.RequestCulture.UICulture.Name != "ar-EG")
                                                    {
                                                        <P>@Model.ContractSettlement?.CrCasRenterContractBasic1?.CrCasBranchInformationEnShortName</P>
                                                    }
                                                    else
                                                    {
                                                        <P>@Model.ContractSettlement?.CrCasRenterContractBasic1?.CrCasBranchInformationArShortName</P>
                                                    }
                                                </div>

                                            </div>
                                            <div class="col-md-5 data-col-Settl ">
                                                <div class="col-auto">
                                                    <p>@localizer["DeliveryBranch"]</p>
                                                </div>
                                                <div class="col-auto personal-data">
                                                    @if (requestCulture?.RequestCulture.UICulture.Name != "ar-EG")
                                                    {
                                                        <P>@Model.CrCasBranchInformation?.CrCasBranchInformationEnShortName</P>
                                                    }
                                                    else
                                                    {
                                                        <P>@Model.CrCasBranchInformation?.CrCasBranchInformationArShortName</P>
                                                    }
                                                </div>
                                            </div>
                                        </div>
                                        <div class="row data-row-Settl ">
                                            <div class=" col-lg-5  data-col-Settl flex-wrap">
                                                <div class="col-auto ">
                                                    <label class="form-check-label" for="expenses-check">@localizer["Expense"]</label>
                                                    <input class="form-check-input Settlement-input-checkbox" type="checkbox" value="checked" id="expenses-check" name="checked-expenses">
                                                </div>
                                            </div>
                                            <div class="col-md-5 data-col-Settl mb-4 ">
                                                <div class="col-auto ">
                                                    <label class="form-check-label" for="compensation-check">@localizer["Compensation"]</label>
                                                    <input class="form-check-input Settlement-input-checkbox" type="checkbox" value="checked" id="compensation-check" name="checked-compensation">
                                                </div>
                                            </div>
                                        </div>
                                        <div class="row p-2" style="flex-direction:row-reverse">
                                            <div class="col-auto">
                                                <label id="notes" for="FormControl-last-Textarea">@localizer["reasons"]</label>
                                            </div>
                                            <div class="col-lg-7">
                                                <textarea class="form-control textarea-inputs @(requestCulture?.RequestCulture.UICulture.Name != "ar-EG" ? "text-start" : "text-end")" rows="1" maxlength="100" asp-for="ContractSettlement.CrCasRenterContractBasicReasons"></textarea>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="row button-row">
                                        <div class="button-card">
                                            <img src="~/BranchSys/Pages/img/Group.png" alt="Button Image"
                                                 class="next action-button"
                                                 style="vertical-align: middle; ">
                                            <input type="button" name="next" class="next action-button"
                                                   value="@localizer["Next"]" />
                                        </div>
                                        <div class="button-card">
                                        </div>
                                    </div>


                                </fieldset>
                                <fieldset id="SecondFieldset">
                                    <div class="form-card form-card1">
                                        <div class="row flex-row-reverse">
                                            <div class="row">
                                                <div class="expensesDiv align-items-baseline ">
                                                    <div class="col-auto">
                                                        <label id="expensesValue" for="expensesValue-input">@localizer["ExpenseValue"]</label>
                                                    </div>
                                                    <div class="col-auto">
                                                        <input type="tel" class="form-control form-control1" style="width: 130px;" id="expensesValue-input" asp-for="ContractSettlement.ExpensesValue" oninput="handleAmountPayed(this)" aria-describedby="inputGroupPrepend" autocomplete="off" required>
                                                        <div class="row requird-field-row-last">
                                                            <span class="requird-field" id="requird_field_ExpensesValue" asp-validation-for="@Model.ContractSettlement.ExpensesValue"></span>
                                                        </div>
                                                    </div>
                                                </div>

                                            </div>
                                        </div>
                                        <div class="row flex-row-reverse expensesRow g-5">
                                            <div class="col-lg-5">

                                                <div class="row expensesDiv expensesDiv-textarea ">
                                                    <div class="col-auto">
                                                        <label id="Expense-statement" for="Expense-statement-input">@localizer["ExpenseStatement"]</label>
                                                    </div>
                                                    <div class="col-lg-9" style="height: 100%;">
                                                        <textarea class="form-control textarea-inputs h-100 @(requestCulture?.RequestCulture.UICulture.Name != "ar-EG" ? "text-start" : "text-end")" cols="25" asp-for="ContractSettlement.ExpensesReasons" id="Expense-statement-input" aria-describedby="inputGroupPrepend" maxlength="200"></textarea>
                                                        <div class="row requird-field-row-last">
                                                            <span class="requird-field" id="requird_field_ExpensesReasons" asp-validation-for="@Model.ContractSettlement.ExpensesReasons"></span>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="col-lg-6">
                                                <div class="upload__box d-flex gap-3">
                                                    <div class="upload_img-wrap_inner" style="display: flex;
                                                                  flex-wrap: wrap;
                                                                  gap: 10px ">
                                                        <div class="upload__img-box " id="FirstUpload-img">
                                                        </div>
                                                        <div class="upload__btn-box" id="upload__btn-box">
                                                            <label class="upload__btn">
                                                                <div class="upload-container-checking" id="btn_expense">
                                                                    <img class="upload-icon" src="~/BranchSys/Pages/img/Group (1).png" alt="Upload Icon" id="addImage">
                                                                    <input type="file" multiple accept="image/*" id="Expenses-images" class="upload__inputfile ">
                                                                </div>
                                                            </label>
                                                        </div>
                                                    </div>
                                                    <span class="@(requestCulture?.RequestCulture.UICulture.Name == "ar-EG" ? "ms-3" : "me-3") ">@localizer["Attachments"]</span>
                                                </div>
                                                <div class="row">
                                                    <p style="color: red;" id="ExpensesError">  </p>
                                                </div>
                                            </div>

                                        </div>

                                    </div>
                                    <div class="row button-row">
                                        <div class="button-card">
                                            <img src="~/BranchSys/Pages/img/Group.png" alt="Button Image"
                                                 class="next action-button"
                                                 style="vertical-align: middle; ">
                                            <input type="button" name="next" class="next action-button"
                                                   value="@localizer["Next"]" />
                                        </div>
                                        <div class="button-card">
                                            <input type="button" name="previous"
                                                   class="previous action-button-previous"
                                                   value="@localizer["Previous"]" />
                                            <img src="~/BranchSys/Pages/img/Vector.png" alt="Button Image"
                                                 class="previous action-button-previous"
                                                 style="vertical-align: middle; ">
                                        </div>
                                    </div>


                                </fieldset>
                                <fieldset id="ThirdFieldset">
                                    <div class="form-card form-card1">
                                        <div class="row flex-row-reverse">
                                            <div class="row">
                                                <div class="expensesDiv align-items-baseline ">
                                                    <div class="col-auto">
                                                        <p> @localizer["CrMasUserContractValidityInsurance"] </p>
                                                    </div>

                                                    <div class="col-auto personal-data">
                                                        @if (Model.ContractSettlement.ContractChoices.Find(x => x.CrCasRenterContractChoiceCode == "5100000003") != null)
                                                        {
                                                            if (requestCulture?.RequestCulture.UICulture.Name == "ar-EG")
                                                            {
                                                                <p>@Model.ContractSettlement.ContractChoices?.Find(x => x.CrCasRenterContractChoiceCode == "5100000003").CrCasRenterContractChoiceCodeNavigation.CrMasSupContractOptionsArName</p>

                                                            }
                                                            else
                                                            {
                                                                <p>@Model.ContractSettlement.ContractChoices?.Find(x => x.CrCasRenterContractChoiceCode == "5100000003").CrCasRenterContractChoiceCodeNavigation.CrMasSupContractOptionsEnName</p>

                                                            }
                                                        }
                                                        else if (Model.ContractSettlement.ContractChoices.Find(x => x.CrCasRenterContractChoiceCode == "5100000004") != null)
                                                        {
                                                            // Code to execute if the list contains "5100000004"
                                                            if (requestCulture?.RequestCulture.UICulture.Name == "ar-EG")
                                                            {
                                                                <p>@Model.ContractSettlement.ContractChoices?.Find(x => x.CrCasRenterContractChoiceCode == "5100000004").CrCasRenterContractChoiceCodeNavigation.CrMasSupContractOptionsArName</p>

                                                            }
                                                            else
                                                            {
                                                                <p>@Model.ContractSettlement.ContractChoices?.Find(x => x.CrCasRenterContractChoiceCode == "5100000004").CrCasRenterContractChoiceCodeNavigation.CrMasSupContractOptionsEnName</p>

                                                            }
                                                        }
                                                        else
                                                        {
                                                            <p>@localizer["AgainstOthers"]</p>
                                                        }

                                                    </div>
                                                </div>

                                            </div>
                                        </div>

                                        <div class="row">
                                            <div class="compensation-Div align-items-baseline ">
                                                <div class="col-auto">
                                                    <label for="compensation-input">@localizer["CompensationValue"]</label>
                                                </div>
                                                <div class="col-auto">
                                                    <input type="tel" class="form-control form-control1" style="width: 130px;" id="compensation-input" asp-for="ContractSettlement.CompensationValue" oninput="handleAmountPayed(this)" aria-describedby="inputGroupPrepend" autocomplete="off" required>
                                                    <div class="row requird-field-row-last">
                                                        <span class="requird-field" id="requird_field_CompensationValue" asp-validation-for="@Model.ContractSettlement.CompensationValue"></span>
                                                    </div>
                                                </div>
                                            </div>

                                        </div>

                                        <div class="row flex-row-reverse compensation-Row  g-5">
                                            <div class="col-lg-5">

                                                <div class="row compensation-Div compensation-Div-textarea ">
                                                    <div class="col-auto">
                                                        <label for="compensation-statement-input">@localizer["CompensationStatement"]</label>
                                                    </div>
                                                    <div class="col-lg-9" style="height: 100%;">
                                                        <textarea class="form-control textarea-inputs h-100 @(requestCulture?.RequestCulture.UICulture.Name != "ar-EG" ? "text-start" : "text-end")" cols="25" asp-for="ContractSettlement.CompensationReasons" id="compensation-statement-input" aria-describedby="inputGroupPrepend" maxlength="200"></textarea>
                                                        <div class="row requird-field-row-last">
                                                            <span class="requird-field" id="requird_field_CompensationReasons" asp-validation-for="@Model.ContractSettlement.CompensationReasons"></span>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="col-lg-6">
                                                <div class="upload__box d-flex">
                                                    <div class="upload_img-wrap_inner" style="display: flex;flex-wrap: wrap; gap: 10px ">
                                                        <div class="upload__img-box " id="FirstUpload-img2">
                                                        </div>
                                                        <div class="upload__btn-box">
                                                            <label class="upload__btn">
                                                                <div class="upload-container-checking" id="btn_compensation">
                                                                    <img class="upload-icon" src="~/BranchSys/Pages/img/Group (1).png" alt="Upload Icon" id="AddImageCompensation">
                                                                    <input type="file" multiple accept="image/*" id="compensation-images" class="upload__inputfile ">
                                                                </div>
                                                            </label>
                                                        </div>
                                                    </div>
                                                    <span class="@(requestCulture?.RequestCulture.UICulture.Name == "ar-EG" ? "ms-3" : "me-3")">@localizer["Attachments"]</span>
                                                </div>
                                                <div class="row">
                                                    <p style="color: red;" id='compensationError'> </p>
                                                </div>
                                            </div>

                                        </div>

                                    </div>
                                    <div class="row button-row">
                                        <div class="button-card">
                                            <img src="~/BranchSys/Pages/img/Group.png" alt="Button Image"
                                                 class="next action-button"
                                                 style="vertical-align: middle; ">
                                            <input type="button" name="next" class="next action-button"
                                                   value="@localizer["Next"]" />
                                        </div>
                                        <div class="button-card">
                                            <input type="button" name="previous"
                                                   class="previous action-button-previous"
                                                   value="@localizer["Previous"]" />
                                            <img src="~/BranchSys/Pages/img/Vector.png" alt="Button Image"
                                                 class="previous action-button-previous"
                                                 style="vertical-align: middle; ">
                                        </div>
                                    </div>


                                </fieldset>
                                <fieldset id="FourthFieldset">
                                    <div class="form-card">
                                        <div class="row">
                                            <div class="col-xl-6 virtual-check-data">
                                                <div class="row CurrentReadingg_row flex-row-reverse">
                                                    <div class="col-md-6 sett_checkField">
                                                        <div class="col-auto ">
                                                            <p> @localizer["ReadingBefore"]</p>
                                                        </div>
                                                        <div class="col personal-data">
                                                            <p id="PreviousKM">@Model.ContractSettlement.CrCasRenterContractBasicCurrentReadingMeter?.ToString("N0")</p>
                                                        </div>
                                                    </div>
                                                    <div class="col-md-auto sett_checkField">
                                                        <div class="col-auto ">
                                                            <p> @localizer["DailyFreeKm"] </p>
                                                        </div>
                                                        <div class="col personal-data">
                                                            <p id="FreeKM">0.00</p>
                                                        </div>
                                                    </div>
                                                </div>
                                                <div class="row CurrentReadingg_row flex-row-reverse g-3">
                                                    <div class="col-md-6 sett_checkField flex-nowrap">
                                                        <div class="col-auto">
                                                            <label id="CurrentReadingg"
                                                                   for="CurrentReadingg-input">
                                                                @localizer["CurrentMeter"]
                                                            </label>
                                                        </div>
                                                        <div class="col-lg-auto  d-flex flex-column align-items-end">
                                                            <input type="text" class="form-control form-control1" style="width: 130px;" id="CurrentMeter" asp-for="ContractSettlement.CurrentMeter" aria-describedby="inputGroupPrepend" oninput="this.value=this.value.replace(/[^0-9]/g,'')" autocomplete="off" maxlength="6">
                                                            <div class="row requird-field-row-last mb-2" style="height: 52px;">
                                                                <div class="col-12">
                                                                    <span class="requird-field" style="font-size: .625rem;" id="requird_field_CurrentMeter" asp-validation-for="@Model.ContractSettlement.CurrentMeter"></span>
                                                                    <div>
                                                                        <span class="requird-field" id="Error_CurrentMeter" style="font-size: .625rem; color: red;"></span>
                                                                    </div>
                                                                </div>
                                                            </div>
                                                        </div>
                                                    </div>
                                                    <div class="col-md-6 sett_checkField">
                                                        <div class="col-auto ">
                                                            <p> @localizer["AdditionalKm"] </p>
                                                        </div>
                                                        <div class="col personal-data">
                                                            <p id="AdditionalKM">0</p>
                                                        </div>
                                                    </div>
                                                </div>
                                                <div class="row mb-3 justify-content-end">
                                                    <div class="col-md-5 d-flex justify-content-end">
                                                        <!-- إضافة فئة text-end هنا -->
                                                        <div class="col-md-auto">
                                                            <button type="button" class="btn check-btn d-flex align-items-center gap-2" data-bs-toggle="modal" href="#TechnicalCheckUp">
                                                                <img src="~/BranchSys/Pages/img/icon (2).svg">
                                                                @localizer["TechnicalInspection"]
                                                            </button>
                                                        </div>
                                                    </div>
                                                </div>
                                                <div class="upload__box d-flex">
                                                    <div class="upload_img-wrap_inner" style="display: flex; flex-wrap: wrap; gap: 10px ">
                                                        <div class="upload__img-box " id="FirstUpload-img3">
                                                        </div>
                                                        <div class="upload__btn-box">
                                                            <label class="upload__btn">
                                                                <div class="upload-container-checking upload__img-box" id="btn_checkup">
                                                                    <img class="upload-icon" src="~/BranchSys/Pages/img/Group (1).png" alt="Upload Icon" id="">
                                                                    <input type="file" multiple accept="image/*" id="examination-images" class="upload__inputfile ">
                                                                </div>
                                                            </label>
                                                        </div>
                                                    </div>

                                                </div>
                                                <div class="row">
                                                    <p style="color: red;" id="examinationError"> </p>
                                                </div>
                                            </div>
                                            <div class="col-xl-6 virtual-check-table">
                                                <div class="table-scroll" id="SettlementTable">
                                                    <table class="table table-bordered  table-hover Checkup-table ">
                                                        <thead>
                                                            <tr>
                                                                <th scope="col"
                                                                    class="value-tabel-header">
                                                                    @localizer["reasons"]
                                                                </th>
                                                                <th scope="col">
                                                                    @localizer["TheCheck"]
                                                                </th>
                                                                <th scope="col">
                                                                    <div class="d-flex justify-content-center gap-3">
                                                                        <div class="col">
                                                                            @localizer["CheckUpNames"]
                                                                        </div>
                                                                        <div class="col-auto p-0">
                                                                            <input type="checkbox" id="CheckAll" />
                                                                        </div>
                                                                    </div>
                                                                </th>
                                                            </tr>
                                                        </thead>
                                                        <tbody id="CheckBody">
                                                            <partial name="_CheckUpListSettlement" />
                                                        </tbody>
                                                    </table>
                                                </div>
                                            </div>

                                        </div>
                                    </div>
                                    <div class="row button-row">
                                        <div class="button-card">
                                            <img src="~/BranchSys/Pages/img/Group.png" alt="Button Image"
                                                 class="next action-button"
                                                 style="vertical-align: middle; ">
                                            <input type="button" name="next" class="next action-button"
                                                   value="@localizer["Next"]" />
                                        </div>
                                        <div class="button-card">
                                            <input type="button" name="previous"
                                                   class="previous action-button-previous"
                                                   value="@localizer["Previous"]" />
                                            <img src="~/BranchSys/Pages/img/Vector.png" alt="Button Image"
                                                 class="previous action-button-previous"
                                                 style="vertical-align: middle; ">
                                        </div>
                                    </div>

                                </fieldset>
                                <fieldset id="FifthFieldset">
                                    <div class="form-card form-card5-settl">
                                        <div class="row data-col-Settl g-3">
                                            <div class="col-xl-8 data-col-Settl contract-Settl-row ">
                                                <div class="col-auto ">
                                                    <P>@localizer["ContractNo"]  </P>
                                                </div>
                                                <div class="col-auto personal-data ">
                                                    <P>@Model.ContractSettlement.CrCasRenterContractBasicNo</P>
                                                </div>
                                                <div class="col-md-5 col-lg-5 col-xl-4 seacrh-icon-col1">
                                                    <div>
                                                        <img src="~/BranchSys/Pages/img/seacrh-icon.png" alt="seacrh-icon Image" id="contract-value-Settlement3">
                                                    </div>
                                                    <div class="dropdown-content dropdown-content-extension" id="dropdown-content-Settlement3">
                                                        <div class="row dropdown-content-row">
                                                            <div class="col-12 col-md-auto  ">
                                                                <p>  : @localizer["Renterr"] </p>
                                                            </div>
                                                            <div class="col personal-data">
                                                                @if (requestCulture?.RequestCulture.UICulture.Name != "ar-EG")
                                                                {
                                                                    <p>@Model.ContractSettlement.CrCasRenterContractBasic5?.CrCasRenterLessorNavigation.CrMasRenterInformationEnName</p>
                                                                }
                                                                else
                                                                {
                                                                    <p>@Model.ContractSettlement.CrCasRenterContractBasic5?.CrCasRenterLessorNavigation.CrMasRenterInformationArName</p>
                                                                }
                                                            </div>

                                                        </div>
                                                        <div class="row dropdown-content-row">
                                                            <div class="col-auto ">
                                                                <p>: @localizer["Car"]</p>
                                                            </div>
                                                            <div class="col personal-data">
                                                                @if (requestCulture?.RequestCulture.UICulture.Name != "ar-EG")
                                                                {
                                                                    <p>@Model.ContractSettlement.CrCasRenterContractBasicCarSerailNoNavigation?.CrCasCarInformationConcatenateEnName</p>
                                                                }
                                                                else
                                                                {
                                                                    <p>@Model.ContractSettlement.CrCasRenterContractBasicCarSerailNoNavigation?.CrCasCarInformationConcatenateArName</p>
                                                                }
                                                            </div>
                                                        </div>
                                                        <div class="row dropdown-content-row">
                                                            <div class="col-auto ">
                                                                <p>: @localizer["DaysNo"]</p>
                                                            </div>
                                                            <div class="col personal-data">
                                                                <p id="DaysNoContract"></p>
                                                            </div>
                                                        </div>
                                                        <div class="row dropdown-content-row">
                                                            <div class="col-auto ">
                                                                <p>: @localizer["AmountReserved"]</p>
                                                            </div>
                                                            <div class="col personal-data">
                                                                <p>@Model.ContractSettlement?.CrCasRenterContractBasic5?.CrCasRenterLessorReservedBalance?.ToString("N2", CultureInfo.InvariantCulture)</p>
                                                            </div>
                                                        </div>
                                                        <div class="row dropdown-content-row">
                                                            <div class="col-auto ">
                                                                <p>: @localizer["DiscountRate"]</p>
                                                            </div>
                                                            <div class="col personal-data">
                                                                <p>%@Model.ContractSettlement?.CrCasRenterContractBasicUserDiscountRate?.ToString("N2", CultureInfo.InvariantCulture)</p>
                                                            </div>
                                                        </div>
                                                        <div class="row dropdown-content-row">
                                                            <div class="col-auto ">
                                                                <p>: @localizer["TaxRate"]</p>
                                                            </div>
                                                            <div class="col personal-data">
                                                                <p>%@Model.ContractSettlement?.CrCasRenterContractBasicTaxRate?.ToString("N2", CultureInfo.InvariantCulture) </p>
                                                            </div>
                                                        </div>
                                                        <div class="row dropdown-content-row">
                                                            <div class="col-auto ">
                                                                <p> : @localizer["ExtraHours"]</p>
                                                            </div>
                                                            <div class="col personal-data">
                                                                <p>
                                                                    @(Model.ContractSettlement?.CrCasRenterContractBasicHourMax != null
                                                                        ? $"{(int)Model.ContractSettlement.CrCasRenterContractBasicHourMax}:00"
                                                                        : "0:00")
                                                                </p>
                                                            </div>
                                                        </div>
                                                        <div class="row dropdown-content-row">
                                                            <div class="col-auto ">
                                                                <p> : @localizer["ExtraHourValue"]</p>
                                                            </div>
                                                            <div class="col personal-data">
                                                                <p>@Model.ContractSettlement?.CrCasRenterContractBasicHourValue?.ToString("N2", CultureInfo.InvariantCulture) </p>
                                                            </div>

                                                        </div>
                                                        <div class="row dropdown-content-row">
                                                            <div class="col-auto ">
                                                                <p> : @localizer["ExcessKilos"]  </p>
                                                            </div>
                                                            <div class="col personal-data">
                                                                <p id="ExcessKilos">0</p>
                                                            </div>
                                                        </div>
                                                        <div class="row dropdown-content-row">
                                                            <div class="col-auto ">
                                                                <p> : @localizer["AdditionalKmValue"]  </p>
                                                            </div>
                                                            <div class="col personal-data">
                                                                <p>@Model.ContractSettlement?.CrCasRenterContractBasicKmValue?.ToString("N2", CultureInfo.InvariantCulture) </p>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="row data-col-Settl g-3">
                                            <div class=" col-xl-4 data-col-Settl flex-wrap ">
                                                <div class="col-auto ">
                                                    <P>@localizer["ContractValue"]</P>
                                                </div>
                                                <div class="col-auto personal-data ">
                                                    <P id="ContractValue">0.00</P>
                                                </div>
                                                <div class="col-md-5 col-lg-5 col-xl-4  seacrh-icon-col">
                                                    <div class="col-sm-12  d-flex justify-content-end">
                                                        <img src="~/BranchSys/Pages/img/Rectangle 129.svg" alt="seacrh-icon Image" id="contract-value-Settlement4">
                                                    </div>
                                                    <div class="dropdown-content  dropdown-content-extension" id="dropdown-content-Settlement4">
                                                        <div class="row dropdown-content-row">
                                                            <div class="col-auto ">
                                                                <p> :@localizer["Rent"] </p>
                                                            </div>
                                                            <div class="col personal-data">
                                                                <p id="RentalValue">0.00</p>
                                                            </div>

                                                        </div>
                                                        <div class="row dropdown-content-row">
                                                            <div class="col-auto ">
                                                                <p>:@localizer["Delegationn"]</p>
                                                            </div>
                                                            <div class="col personal-data">
                                                                <p id="DelegationValue">0.00</p>
                                                            </div>

                                                        </div>

                                                        <div class="row dropdown-content-row">
                                                            <div class="col-auto ">
                                                                <p>:@localizer["Features"]</p>
                                                            </div>
                                                            <div class="col personal-data">
                                                                <p id="Features">0.00</p>
                                                            </div>

                                                        </div>

                                                        <div class="row dropdown-content-row">
                                                            <div class="col-auto ">
                                                                <p> :@localizer["AdditionalDriverr"]</p>
                                                            </div>
                                                            <div class="col personal-data">
                                                                <p id="AdditionalDriver">0.00</p>
                                                            </div>

                                                        </div>
                                                        <div class="row dropdown-content-row">
                                                            <div class="col-auto ">
                                                                <p> :@localizer["PrivateDriver"]</p>
                                                            </div>
                                                            <div class="col personal-data">
                                                                <p id="PrivateDriver">0.00</p>
                                                            </div>

                                                        </div>
                                                        <div class="row dropdown-content-row">
                                                            <div class="col-auto ">
                                                                <p> :@localizer["Choicess"]</p>
                                                            </div>
                                                            <div class="col personal-data">
                                                                <p id="Choices">0.00</p>
                                                            </div>

                                                        </div>
                                                        <div class="row dropdown-content-row">
                                                            <div class="col-auto ">
                                                                <p> :@localizer["Additionalss"]</p>
                                                            </div>
                                                            <div class="col personal-data">
                                                                <p id="Additionals">0.00</p>
                                                            </div>

                                                        </div>
                                                        <div class="row dropdown-content-row">
                                                            <div class="col-auto ">
                                                                <p> :@localizer["ExtraHours"]</p>
                                                            </div>
                                                            <div class="col personal-data">
                                                                <p id="ExtraHoursValue">0.00</p>
                                                            </div>

                                                        </div>
                                                        <div class="row dropdown-content-row">
                                                            <div class="col-auto ">
                                                                <p> :@localizer["ExcessKilos"]</p>
                                                            </div>
                                                            <div class="col personal-data">
                                                                <p id="ExtraKMsValue">0.00</p>
                                                            </div>
                                                        </div>
                                                        <div class="row dropdown-content-row">
                                                            <div class="col-auto ">
                                                                <p> :@localizer["LateSettlement"]</p>
                                                            </div>
                                                            <div class="col personal-data">
                                                                <p id="LateSettlement">0.00</p>
                                                            </div>
                                                        </div>

                                                    </div>
                                                </div>
                                            </div>
                                            <div class="col-xl-4 data-col-Settl flex-wrap Settlement-date">
                                                <div class="col-auto ">
                                                    <P>@localizer["SettlementDate"]</P>
                                                </div>
                                                <div class="col-auto personal-data ">
                                                    <P>@DateTime.Now.ToString("yyyy/MM/dd", CultureInfo.InvariantCulture)</P>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="row data-col-Settl g-3">

                                            <div class="col-md-auto col-lg-4">
                                                <div class="data-col-Settl">
                                                    <div class="col-auto "><p>@localizer["ContractValueAfterDiscount"]</p></div>
                                                    <div class="col-auto personal-data p-0"><p id="ContractValueAfterDiscount">0.00</p></div>
                                                </div>
                                            </div>
                                            <div class="col-md-4">
                                                <div class="data-col-Settl">
                                                    <div class="col-auto "><p>@localizer["TaxValue"] </p></div>
                                                    <div class="col-auto personal-data p-0"><p id="TaxValue">0.00</p></div>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="row data-col-Settl g-3">
                                            <div class="col-lg-4">
                                                <div class="data-col-Settl">
                                                    <div class="col-auto "><p>@localizer["TotalContract"]</p></div>
                                                    <div class="col-auto personal-data p-0"><p id="TotalContract">0.00</p></div>
                                                </div>

                                            </div>
                                            <div class="col-lg-4">
                                                <div class="data-col-Settl">
                                                    <div class="col-auto "><p>@localizer["TotalExpenseValue"]</p></div>
                                                    <div class="col-auto personal-data p-0"><p id="TotalExpenseValue">0.00</p></div>
                                                </div>
                                            </div>
                                            <div class="col-lg-4">
                                                <div class="data-col-Settl">
                                                    <div class="col-auto "><p>@localizer["TotalCompensationValue"]</p></div>
                                                    <div class="col-auto personal-data p-0"><p id="TotalCompensationValue">0.00</p></div>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="row data-col-Settl g-3">
                                            <div class="col-lg-4">
                                                <div class="data-col-Settl">
                                                    <div class="col-auto "><p>@localizer["AvailableBalance"]</p></div>
                                                    <div class="col-auto personal-data p-0"><p>@Model.ContractSettlement.CrCasRenterContractBasic5.CrCasRenterLessorAvailableBalance?.ToString("N2", CultureInfo.InvariantCulture)</p></div>
                                                </div>

                                            </div>
                                            <div class="col-lg-4">
                                                <div class="data-col-Settl">
                                                    <div class="col-auto "><p id="RenterMoneyText">@localizer["AmountRequired"]</p></div>
                                                    <div class="col-auto personal-data p-0"><p id="AmountRequired">0.00</p></div>
                                                </div>
                                            </div>
                                            @* <div class="col-md-auto">
                                            <div class="data-col-Settl">
                                            <div class="col-auto "><p id="RenterMoneyText">@localizer["RenterMoneyText1"]</p></div>
                                            <div class="col-auto personal-data p-0"><p id="RenterMoneyValue">0.00</p></div>
                                            </div>
                                            </div> *@
                                        </div>
                                        <div class="row data-col-Settl g-3">
                                            <div class=" col-lg-4 data-col-Settl flex-md-nowrap">
                                                <div class="col-auto">
                                                    <label id="amount-paid" for="amount-paid-input">
                                                        @localizer["AmountPaid"]
                                                    </label>
                                                </div>
                                                <div class="col-auto">
                                                    <input type="text" class="form-control form-control2" asp-for="ContractSettlement.AmountPayed" id="AmountPayed" oninput="handleAmountPayed(this)" oninput="handleAmountPayed(this)" autocomplete="off" autofocus>
                                                    <div class="row requird-field-row-last">
                                                        <p class="requird_field_AmountPayed"></p>
                                                    </div>
                                                </div>

                                            </div>
                                            @{
                                                if (Model?.AccountBanks?.FindAll(x => x.CrCasAccountBankNo != "00").Count() == 0)
                                                {
                                                    Model.PaymentMethods = Model?.PaymentMethods?.FindAll(x => x.CrMasSupAccountPaymentMethodClassification == "1");
                                                }
                                                else if (Model?.AccountBanks?.FindAll(x => x.CrCasAccountBankNo != "00").Count() > 0 && Model?.SalesPoint?.FindAll(x => x.CrCasAccountSalesPointBank != "00").Count() == 0)
                                                {
                                                    Model.PaymentMethods = Model?.PaymentMethods?.FindAll(x => x.CrMasSupAccountPaymentMethodClassification == "3" || x.CrMasSupAccountPaymentMethodClassification == "1");
                                                }
                                                else if (Model?.AccountBanks?.FindAll(x => x.CrCasAccountBankNo != "00").Count() > 0 && Model?.SalesPoint?.FindAll(x => x.CrCasAccountSalesPointBank != "00").Count() > 0)
                                                {
                                                    Model.PaymentMethods = Model?.PaymentMethods?.FindAll(x => x.CrMasSupAccountPaymentMethodClassification == "2" || x.CrMasSupAccountPaymentMethodClassification == "3" || x.CrMasSupAccountPaymentMethodClassification == "1");
                                                }
                                            }
                                            <div class=" col-lg-4 d-flex flex-md-nowrap data-col-Settl">
                                                <div class="col-auto d-flex ">
                                                    <label id="payment-method" for="payment-method-select">@localizer["PaymentMethod"]</label>

                                                </div>
                                                <div class="col-12 col-md-8 ">
                                                    <div class="offset">
                                                        <select class="form-select form-select-last" asp-for="ContractSettlement.PaymentMethod" disabled>
                                                            <option selected disabled></option>
                                                            @foreach (var payment in Model.PaymentMethods)
                                                            {
                                                                @if (requestCulture?.RequestCulture.UICulture.Name != "en-US")
                                                                {
                                                                    <option value="@payment.CrMasSupAccountPaymentMethodCode" data-ar="@payment.CrMasSupAccountPaymentMethodArName" data-en="@payment.CrMasSupAccountPaymentMethodEnName" class="text-right">@payment.CrMasSupAccountPaymentMethodArName</option>
                                                                }
                                                                else
                                                                {
                                                                    <option value="@payment.CrMasSupAccountPaymentMethodCode" data-ar="@payment.CrMasSupAccountPaymentMethodArName" data-en="@payment.CrMasSupAccountPaymentMethodEnName">@payment.CrMasSupAccountPaymentMethodEnName</option>
                                                                }
                                                            }
                                                        </select>
                                                        <div class="row requird-field-row-last">
                                                            <span class="requird-field" id="requird_field_PaymentMethod" asp-validation-for="@Model.ContractSettlement.PaymentMethod"></span>
                                                        </div>
                                                    </div>

                                                </div>
                                            </div>
                                            <div class=" col-lg-6 col-xl-4 data-col-Settl flex-md-nowrap">
                                                <div class="col-auto d-flex  ">
                                                    <label id="selling-point" for="selling-point-dropdown">@localizer["SalesPoint"]</label>
                                                </div>
                                                <div class="col-12 col-md-8 ">
                                                    <div class="offset">
                                                        <select class="form-select form-select-last " asp-for="ContractSettlement.SalesPoint" required>
                                                        </select>
                                                        <div class="row requird-field-row-last">
                                                            <span class="requird-field" id="requird_field_SalesPoint" asp-validation-for="@Model.ContractSettlement.SalesPoint"></span>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="row p-2" style="flex-direction:row-reverse">
                                            <div class="col-auto">
                                                <label id="notes" for="FormControl-last-Textarea ">@localizer["reasons"]</label>
                                            </div>
                                            <div class="col-sm-10 col-md-7 col-lg-7">
                                                <textarea class="form-control textarea-inputs @(requestCulture?.RequestCulture.UICulture.Name != "ar-EG" ? "text-start" : "text-end")" rows="1" maxlength="100" asp-for="ContractSettlement.ReasonsPayment"></textarea>
                                            </div>

                                        </div>
                                    </div>

                                    <div class="row button-row align-items-center" style="padding: 6px 7px 0px 20px;">
                                        <div class="payment-button-card button-card   gap-2">
                                            <button id="submitForm" class="btn check-btn payment-button next">@localizer["Save"]</button>
                                            <button type="button" class="btn check-btn btn-custom check-btn-load payment-button signature-button" id="check_btn_load_Signture" data-bs-toggle="modal" href="#PicsignatureModal">
                                                <div class="row align-items-center">
                                                    <div class="col-auto">
                                                        <div class="systems-check">
                                                            <i class="fa-solid fa-check text-white"></i>
                                                        </div>
                                                    </div>
                                                    <div class="col">@localizer["SignatureTenant"]</div>
                                                </div>
                                            </button>
                                        </div>
                                        <div class="button-card">
                                            <input type="button" name="previous"
                                                   class="previous action-button-previous" value="@localizer["Previous"]" />
                                            <img src="~/BranchSys/Pages/img/Vector.png" alt="Button Image"
                                                 class="previous action-button-previous"
                                                 style="vertical-align: middle; margin-right: 10px;">
                                        </div>
                                    </div>

                                </fieldset>
                            </form>
                        </div>
                    </div>
                </div>
                <!-- %%%%%%%%%%%%%%%%%%%%%%%%%%%%% TechnicalCheckUp %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% -->
                <div class="modal fade" id="TechnicalCheckUp" aria-hidden="true"
                     aria-labelledby="TechnicalCheckUpLabel" tabindex="-1">
                    <div class="modal-dialog modal-dialog-centered modal-dialog-scrollable "
                         style="max-width: 800px !important;">
                        <div class="modal-content">
                            <div class="modal-header text-center">
                                <p class="modal-title w-100"></p>
                                <button type="button" class="btn-close" data-bs-dismiss="modal"
                                        aria-label="Close"></button>

                            </div>
                            <div class="modal-body">
                                <div class="container">
                                    <div class="row flex-column">
                                        <div class="col-12 text-center">
                                            <div class="row g-3 justify-content-center "
                                                 id="TechnicalCheckUp-container">
                                                <div class="col-auto">
                                                    <button id="bend-in-body-btn"
                                                            class="TechnicalCheckUp-Btn p-2">
                                                        <img src="~/BranchSys/CreateContract/img/bend-in-body.svg">@localizer["CurvatureStructure"]
                                                    </button>
                                                </div>
                                                <div class="col-auto">
                                                    <button id="very-deep-scratch-btn"
                                                            class="TechnicalCheckUp-Btn p-2">
                                                        <img src="~/BranchSys/CreateContract/img/very-deep-scratch.svg">@localizer["VeryDeepScratch"]
                                                    </button>

                                                </div>
                                                <div class="col-auto">
                                                    <button id="deep-scratch-btn"
                                                            class="TechnicalCheckUp-Btn p-2">
                                                        <img src="~/BranchSys/CreateContract/img/deep-scratch.svg"> @localizer["DeepScratch"]
                                                    </button>

                                                </div>
                                                <div class="col-auto">
                                                    <button id="small-scratch-btn"
                                                            class="TechnicalCheckUp-Btn p-2">
                                                        <img src="~/BranchSys/CreateContract/img/small-scratch.svg"> @localizer["SimpleScratch"]
                                                    </button>

                                                </div>
                                            </div>
                                        </div>
                                        <div class="col-12 d-flex justify-content-center">
                                            <div class="car-container mt-3">
                                                <canvas id="shape-canvas"></canvas>
                                            </div>
                                        </div>
                                        <div class="col-12">
                                            <div class="row g-3">
                                                <div class="col d-flex justify-content-center ">
                                                    <button id="undo-btn" class=" undo-redo-btn">
                                                        <img src="~/BranchSys/CreateContract/img/undo.svg">
                                                    </button>


                                                    <button id="redo-btn" class="undo-redo-btn mx-2 ">
                                                        <img src="~/BranchSys/CreateContract/img/undo (2).svg">
                                                    </button>

                                                </div>
                                                <div class="col">
                                                    <button id="save-btn" class="check-btn ">@localizer["Save"] </button>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>

                        </div>
                    </div>
                </div>
                <!-- %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% TechnicalCheckUp %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% -->
                <!--Signture-->
                <div class="modal fade" id="PicsignatureModal" tabindex="-1" aria-labelledby="PicignaturPopupModalLabel" aria-hidden="true" data-bs-backdrop="true">
                    <div class="modal-dialog modal-dialog-centered d-flex justify-content-center">
                        <div class="modal-content signature-modal-content p-3">
                            <div class="modal-body Signature-modal-body">
                                <div class="SignatureCard">
                                    <div class="main-container" id="removeSignatureImg"></div>
                                    <div class="upload-container">
                                    </div>
                                </div>
                                <br>
                                <div class="row">
                                    <div class="col-4">
                                        <div class="sinature-Btn-Card p-2" id="UploadSigntaurePic">
                                            <img src="~/BranchSys/img/Pic.svg" class="w-100">
                                            <input type="file" id="imageUpload" accept="image/*" style="display: none;">
                                        </div>
                                    </div>
                                    <div class="col-4" id="WriteSignature">
                                        <div class="sinature-Btn-Card p-2">
                                            <img src="~/BranchSys/img/file-signature_9795523 1.svg" class="w-100">
                                        </div>
                                    </div>
                                    @* <div class="col-3" id="clear">
                                    <div class="sinature-Btn-Card p-2">
                                    <img src="~/BranchSys/img/Frame.svg" class="w-100">
                                    </div>
                                    </div> *@
                                    <div class="col-4" id="Save_Btn">
                                        <div class="sinature-Btn-Card p-2">
                                            <img src="~/BranchSys/img/save.svg" class="w-100" id="save">
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <!--Signture-->
            </div>
        </div>
    </section>
</div>


<footer class="fixed-bottom-xl">
    <div class="before-footer-widget">
        <svg width: 100%; height:auto viewbox="0 0 2444 132">
            <path fill="rgba(254, 248, 232, 1)" fill-rule="evenodd"
                  d="M1222 0h1222c-444.13 88-852.127 132-1223.993 132C849.253 132 442.585 88.263 0 .789V0h1222z">
            </path>
        </svg>
    </div>

</footer>
@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    <script src="~/BranchSys/Pages/js/Settlement.js"></script>
    <script src="~/BranchSys/js/javascript/LoaderByPercent.js"></script>
    <script src="~/BranchSys/Pages/js/settlement/Settlement.js"></script>
    <script src="~/BranchSys/CreateContract/js/TechnicalCheckUp.js"></script>
    @*     <script src="~/BranchSys/Pages/js/Loader.js"></script>
 *@    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.3/jspdf.umd.min.js"></script>
    <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/1.5.3/jspdf.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/js/all.min.js" integrity="sha512-u3fPA7V8qQmhBPNT5quvaXVa1mnnLSXUep5PS1qo5NRzHwG19aHmNJnj1Q8hpA/nBWZtZD4r4AX6YOt5ynLN2g==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
    <script src="https://unpkg.com/pdf-lib@1.17.1/dist/pdf-lib.min.js"></script>
    <script>
        $(document).ready(function () {
            // "Check All" checkbox functionality
            $('#CheckAll').on('change', function () {
                // Set all checkboxes with the class 'CheckUp' to the same state as "Check All"
                console.log("111111")
                $('.CheckUp').prop('checked', $(this).prop('checked'));
            });

            // Uncheck the "Check All" checkbox if any individual checkbox is unchecked
            $(document).on('change', '.CheckUp', function () {
                console.log("00000")
                if (!$(this).prop('checked')) {
                    $('#CheckAll').prop('checked', false);
                }
            });
        });
    </script>
    <!--Upload Signture-->
    <script>
        //variables//
        let saveSignatureBtn = null;
        var imgeURL;
        document.getElementById("UploadSigntaurePic").addEventListener("click", function () { saveSignatureBtn = "UploadSigntaurePic"; });
        document.getElementById("WriteSignature").addEventListener("click", function () { saveSignatureBtn = "WriteSignature"; });
        var renterSignature = "@Model.ContractSettlement?.CrCasRenterContractBasic5?.CrCasRenterLessorNavigation?.CrMasRenterInformationSignature";
        const uploadContainer = document.querySelector(".upload-container");
        const mainContainer = document.querySelector(".main-container");
        const UploadSigntaurePic = document.getElementById("UploadSigntaurePic");
        const imageUpload = document.getElementById("imageUpload");
        var btnSignture = document.getElementById('check_btn_load_Signture');
        var imgeURL;
        const uploadedImg = null;
        //

        UploadSigntaurePic.addEventListener("click", function () {
            imageUpload.click();
        });

        imageUpload.addEventListener("change", function () {
            const file = imageUpload.files[0];
            if (file) {
                const reader = new FileReader();
                reader.onload = function (e) {
                    const imageURL = e.target.result;
                    const previewImage = document.createElement("img");
                    previewImage.classList.add("preview-image");
                    previewImage.src = imageURL;
                    previewImage.id = "signatureImage";
                    imgeURL = imageURL;
                    mainContainer.innerHTML =
                        '<i class="fa-regular fa-circle-xmark"  style="cursor: pointer;"></i>';
                    uploadContainer.innerHTML = "";
                    uploadContainer.appendChild(previewImage);
                    uploadContainer.classList.add("previewing");
                };
                reader.readAsDataURL(file);
            }
        });

        removeSignatureImg.addEventListener("click", function (event) {
            event.preventDefault();
            if (uploadContainer.firstChild) {
                uploadContainer.innerHTML = "";
                mainContainer.innerHTML = "";
                uploadContainer.classList.remove("previewing");
                uploadContainer.innerHTML =
                    '<img class="upload-icon" src="/BranchSys/CreateContract/img/Rectangle 144.png" alt="Upload Icon"><p>' + '@localizer["UploadSignture"]' + '</p>';
            }
        });

        function CheckSigntureImgForRenter() {
            if (renterSignature) {
                const checkDiv = document.querySelector('.row .col-auto .systems-check');
                if (checkDiv) {
                    checkDiv.style.backgroundColor = 'green';
                }
                renterSignature = renterSignature.replace("~", "");
                uploadContainer.innerHTML = ''; // Clear existing content
                uploadContainer.innerHTML = '<img class="preview-image" src="' + renterSignature + '">';
                uploadContainer.classList.add('previewing');
            } else {
                uploadContainer.innerHTML = '<img class="upload-icon" src="/BranchSys/CreateContract/img/Rectangle 144.png" alt="Upload Icon"><p>' + '@localizer["UploadSignture"]' + '</p>';
                uploadContainer.classList.remove('previewing');
            }
        }
        btnSignture.addEventListener('click', function (event) {
            event.preventDefault();
            CheckSigntureImgForRenter();
        });
        document.addEventListener("DOMContentLoaded", function () {
            CheckSigntureImgForRenter();
        });
    </script>
    <!--Write Signture-->
    <script>
        const WriteSignature = document.getElementById("WriteSignature");
        WriteSignature.addEventListener("click", function () {
            uploadContainer.innerHTML = "";
            mainContainer.innerHTML = "";
            uploadContainer.innerHTML =
                '<canvas id="canvas" width="200" height="200" class="mb-2"></canvas>';
            var canvas = document.getElementById("canvas");
            var ctx = canvas.getContext("2d");
            ctx.lineWidth = 4;

            var drawing = false;
            var prevX = 0;
            var prevY = 0;
            var currX = 0;
            var currY = 0;

            function drawLine(x0, y0, x1, y1) {
                ctx.beginPath();
                ctx.moveTo(x0, y0);
                ctx.lineTo(x1, y1);
                ctx.stroke();
                ctx.closePath();
            }

            canvas.addEventListener("mousedown", handleMouseDown, false);
            canvas.addEventListener("mousemove", handleMouseMove, false);
            canvas.addEventListener("mouseup", handleMouseUp, false);

            canvas.addEventListener("touchstart", handleTouchStart, false);
            canvas.addEventListener("touchmove", handleTouchMove, false);
            canvas.addEventListener("touchend", handleTouchEnd, false);

            function handleMouseDown(e) {
                drawing = true;
                prevX = e.clientX - canvas.getBoundingClientRect().left;
                prevY = e.clientY - canvas.getBoundingClientRect().top;
            }

            function handleMouseMove(e) {
                if (!drawing) return;
                currX = e.clientX - canvas.getBoundingClientRect().left;
                currY = e.clientY - canvas.getBoundingClientRect().top;

                drawLine(prevX, prevY, currX, currY);
                prevX = currX;
                prevY = currY;
            }

            function handleMouseUp() {
                drawing = false;
            }

            function handleTouchStart(e) {
                drawing = true;
                prevX = e.touches[0].clientX - canvas.getBoundingClientRect().left;
                prevY = e.touches[0].clientY - canvas.getBoundingClientRect().top;
            }

            function handleTouchMove(e) {
                if (!drawing) return;
                currX = e.touches[0].clientX - canvas.getBoundingClientRect().left;
                currY = e.touches[0].clientY - canvas.getBoundingClientRect().top;

                drawLine(prevX, prevY, currX, currY);
                prevX = currX;
                prevY = currY;
            }

            function handleTouchEnd() {
                drawing = false;
            }
            // Clear the canvas
            // function clearCanvas() {
            //     ctx.clearRect(0, 0, canvas.width, canvas.height);
            // }

            // document.getElementById("clear").addEventListener("click", function () {
            //     clearCanvas();
            // });

        });
        // Save the written signature as an image
        function SaveWrittenSignature() {
            var canvas = document.getElementById("canvas");
            if (canvas) {
                var dataURL = canvas.toDataURL();
                var link = document.createElement("a");
                link.href = dataURL;
                var imgeURL = dataURL;
                $("#PicsignatureModal").modal("hide");
                return imgeURL;
            } else {
                return null;
            }
        }

        // Save the uploaded signature image
        function SaveUploadedSignature() {
            const img = document.getElementById("signatureImage");
            if (img) {
                const canvas = document.createElement("canvas");
                canvas.width = img.width;
                canvas.height = img.height;
                const context = canvas.getContext("2d");
                context.drawImage(img, 0, 0, canvas.width, canvas.height);
                const base64 = canvas.toDataURL("image/jpeg");
                $("#PicsignatureModal").modal("hide");
                return base64;
            } else {
                return null;
            }
        }
    </script>
    <script>
        const imageSubmitBtn = document.getElementById('Save_Btn');
        imageSubmitBtn.addEventListener('click', function (event) {
            event.preventDefault();
            var renterId = decodeHTMLEntities("@Model.ContractSettlement.CrCasRenterContractBasicRenterId");
            imgeURL = null;
            if (saveSignatureBtn === "UploadSigntaurePic") {
                imgeURL = SaveUploadedSignature();
            } else if (saveSignatureBtn === "WriteSignature") {
                imgeURL = SaveWrittenSignature();
            }
            if (!imgeURL) {
                $('#PicsignatureModal').modal('hide');
                // toastr.options = { "positionClass": '@localizer["toastPostion"]', };
                // toastr.error('@localizer["PleaseEnterPictureToast"]');
                return;
            }
            if (uploadContainer.firstChild) {
                uploadContainer.innerHTML = '';
                uploadContainer.classList.remove('previewing');
                uploadContainer.innerHTML = '<img class="upload-icon" src="/BranchSys/CreateContract/img/Rectangle 144.png" alt="Upload Icon"><p>' + '@localizer["UploadSignture"]' + '</p>';
            }

            $('#PicsignatureModal').modal('hide');
            // Show the spinner
            showSpinner(btnSignture);
            var CheckUpdateSigntureForRenter = updaterenterSignature(imgeURL, renterId);
            setTimeout(function () {
                $('#thirdPopupModal').modal('hide');
                if (CheckUpdateSigntureForRenter) {
                    removeSpinnerAndChangeColor(btnSignture); // Remove spinner and change color
                }
                else {
                    toastr.options = { "positionClass": '@localizer["toastPostion"]', };
                    toastr.error('@localizer["SomethingWrongPleaseCallAdmin"]');
                }
            }, 2000);
        });
        async function updaterenterSignature(img, renterId) {
            try {
                var data = await $.ajax({
                    url: "/BS/Contract/UpdateSigntureForRenter",
                    type: "POST",
                    data: { img: img, renterId: renterId },
                });
                if (data) {
                    renterSignature = data;
                    return true; // Renter Updated Successfully
                }
            } catch (error) {
                return false; // Error occurred or Renter doesn't exist
            }
            return false; // Renter doesn't exist
        }
    </script>

    <script>
        function customizeDate() {
            // الحصول على الوقت الحالي
            var dateTimeNow = decodeHTMLEntities('@DateTime.Now.ToString("yyyy-MM-ddTHH:mm:ss.fffK")');
            const now = new Date(dateTimeNow);

            // تحويل تاريخ انتهاء العقد إلى كائن تاريخ
            const endDateString = "@Model.ContractSettlement.CrCasRenterContractBasicExpectedEndDate?.ToString("yyyy/MM/dd HH:mm:ss", CultureInfo.InvariantCulture)";
            let endDate = new Date(endDateString);
            const startDateString = "@Model.ContractSettlement.CrCasRenterContractBasicExpectedStartDate?.ToString("yyyy/MM/dd HH:mm:ss", CultureInfo.InvariantCulture)";
            let startDate = new Date(startDateString);
            // التحقق من أن endDate تاريخ صحيح
            if (!isNaN(endDate.getTime())) {
                if (endDate < now) {
                    // إذا كان تاريخ النهاية أقل من الآن، نضع الآن كقيمة
                    const dateValue = now.toISOString().split('T')[0];  // yyyy-MM-dd
                    document.getElementById("contract_real_endTime").value = dateValue;
                    document.getElementById("contract_real_endTime").min = now.toISOString().split('T')[0];  // الحد الأدنى هو الآن
                    document.getElementById("contract_real_endTime").max = now.toISOString().split('T')[0];  // الحد الأقصى هو endDate + 1

                } else {
                    // إذا كان تاريخ النهاية أكبر من الآن، نضع endDate كقيمة
                    const dateValue = now.toISOString().split('T')[0];  // yyyy-MM-dd
                    document.getElementById("contract_real_endTime").min = now.toISOString().split('T')[0];  // الحد الأدنى هو الآن
                    document.getElementById("contract_real_endTime").max = endDate.toISOString().split('T')[0];  // الحد الأقصى هو endDate + 1
                    document.getElementById("contract_real_endTime").value = dateValue;
                }
            } else {
                console.error("Invalid end date provided.");
            }
        }
        var diffMinutes = 0;
        var diffHours = 0;
        var diff = 0;
        var totalDaysNo = 0;
        var settlementDay = 0;
        var roundedHours = 0;
        var roundedLateAddHours = 0;
        var roundedLateSettelmentHours = 0;
        document.addEventListener("DOMContentLoaded", function () {
            customizeDate();
            const elementToHide = document.getElementById("mechanismSettlement");
            var SettelmentAuth = "@userInfo?.CrMasUserContractValidity?.CrMasUserContractValidityEnd";
            const startContractDateString = "@Model.ContractSettlement.CrCasRenterContractBasicExpectedStartDate?.ToString("yyyy-MM-ddTHH:mm:ss", CultureInfo.InvariantCulture)";
            const endContractDateString = "@Model.ContractSettlement.CrCasRenterContractBasicExpectedEndDate?.ToString("yyyy-MM-ddTHH:mm:ss", CultureInfo.InvariantCulture)";
            const expectedDays = "@Model.ContractSettlement.CrCasRenterContractBasicExpectedRentalDays";
            const TotalFreeHours = "@Model.ContractSettlement.CrCasRenterContractBasicTotalFreeHours";
            const MaxHours = "@Model.ContractSettlement.CrCasRenterContractBasicHourMax";
            const startContractDate = new Date(startContractDateString);
            const endContractDate = new Date(endContractDateString);
            var dateTimeNow = decodeHTMLEntities('@DateTime.Now.ToString("yyyy-MM-ddTHH:mm:ss.fffK")'); // or "@DateTime.Now" if you prefer local server time
            const now = new Date(dateTimeNow);
            const currentHour = now.getHours();
            const currentMinute = now.getMinutes();
            const currentSecond = now.getSeconds();
            // Convert hour, minute, and second to strings if needed
            const hourString = currentHour.toString().padStart(2, '0'); // Pad with zero if single digit
            const minuteString = currentMinute.toString().padStart(2, '0'); // Pad with zero if single digit
            const secondString = currentSecond.toString().padStart(2, '0'); // Pad with zero if single digit
            const timeString = `${hourString}:${minuteString}:${secondString}`;

            function calculateDifference() {
                const settlementDateString = document.getElementById("contract_real_endTime").value;

                const settlementDateTimeString = settlementDateString + "T" + timeString;
                const settlementDateTime = new Date(settlementDateTimeString);

                const timeDiff = Math.abs(settlementDateTime.getTime() - startContractDate.getTime());
                let diffDays = Math.floor(timeDiff / (1000 * 3600 * 24)); // Difference in days
                const remainingTime = timeDiff % (1000 * 3600 * 24);
                let diffHours = Math.ceil(remainingTime / (1000 * 3600)); // احتساب الساعات مع أي ثانية كساعة كاملة

                if (settlementDateTime > endContractDate) {
                    // إذا تجاوزت تاريخ النهاية المتوقع
                    console.log("Settlement date is after the expected end date.");
                    const overtime = settlementDateTime.getTime() - endContractDate.getTime(); // الوقت بعد نهاية العقد
                    const overtimeHours = Math.ceil(overtime / (1000 * 3600)); // الساعات الإضافية مع احتساب أول ثانية كساعة
                    console.log("overtimeHours.", overtimeHours);

                    // إذا تجاوزت ساعات التأخير 24 ساعة
                    if (overtimeHours >= 24) {
                        // diffDays += Math.floor(overtimeHours / 24); // إضافة يوم/أيام بناءً على عدد الساعات
                        diffHours = overtimeHours % 24; // إعادة حساب الساعات المتبقية بعد الـ 24 ساعة
                    } else {
                        diffHours = overtimeHours; // الساعات الإضافية فقط إذا لم تتجاوز 24 ساعة
                    }
                } else if (settlementDateTime <= endContractDate) {
                    // إذا لم نتجاوز نهاية العقد
                    console.log("Settlement date is within or exactly at the expected end date.");
                    if (remainingTime > 0) {
                        // إذا دخل اليوم الجديد، نضيف يومًا كاملًا
                        diffDays += 1;
                    }
                }
                console.log("settlementDateTime", settlementDateTime)
                console.log("timeDiff", timeDiff)
                console.log("diffDays", diffDays)
                console.log("diffHours", diffHours)
                // diff = parseInt(diffHours) - parseInt(TotalFreeHours);
                $("#daysNo").text(diffDays);
                totalDaysNo = diffDays;
                //In PaymentPage
                var actualEndContractDate = new Date(startContractDate);
                actualEndContractDate.setDate(startContractDate.getDate() + diffDays);
                // Formatting endContractDate as "yyyy/MM/dd HH:MM"
                var formattedEndContractDate = actualEndContractDate.getFullYear() + '/' + ('0' + (actualEndContractDate.getMonth() + 1)).slice(-2) + '/' + ('0' + actualEndContractDate.getDate()).slice(-2) + ' ' +
                    ('0' + actualEndContractDate.getHours()).slice(-2) + ':' + ('0' + actualEndContractDate.getMinutes()).slice(-2) + ':00';
                $("#DaysNoContract").text(diffDays);
                $("#EndContract").text(formattedEndContractDate);

                console.log("totalDaysNo", totalDaysNo)



                const isSettlementAuthValid = SettelmentAuth && SettelmentAuth.toLowerCase() !== "false";
                ////////////////////////////////////////////////////////////
                if (endContractDate < now && (diffHours > 0 || (diffHours === 0 && diffMinutes > 0))) {
                    let totalMinutes = diffHours * 60 + diffMinutes;
                    roundedHours = Math.ceil(totalMinutes / 60); // Rounded to next hour
                    roundedLateAddHours = roundedHours;
                    updateTimeDisplay(roundedHours);

                    if (!isSettlementAuthValid) {
                        $("#contract_real_endTime").prop('readonly', true).css('background-color', 'white');
                    } else {
                        handleSettlementAuth(roundedHours);
                    }
                } else {
                    resetTimeDisplay();
                }

                function updateTimeDisplay(roundedHoursVal) {
                    $("#divLateHours").css("display", ""); // أو أي قيمة أخرى تناسبك
                    $("#diffHours").text(roundedHoursVal.toString().padStart(2, '0'));
                    $("#diffMinutes").text('00');
                }

                function handleSettlementAuth(roundedHoursVal) {
                    let displayHour = 0;
                    if (roundedHoursVal <= parseInt(TotalFreeHours)) {
                        $("#AddOrLateHoursText").text("@localizer["FreeHourss"]");
                        displayHour = roundedHoursVal;
                        roundedLateAddHours = 0;
                        roundedLateSettelmentHours = 0;
                    } else if ((roundedHoursVal - parseInt(TotalFreeHours)) <= parseInt(MaxHours)) {
                        roundedLateAddHours -= parseInt(TotalFreeHours);
                        displayHour = roundedLateAddHours;
                        roundedLateSettelmentHours = 0;
                        $("#AddOrLateHoursText").text("@localizer["AddHourslate"]");
                    } else if (elementToHide && roundedHoursVal > (parseInt(MaxHours) + parseInt(TotalFreeHours))) {
                        roundedLateAddHours -= parseInt(TotalFreeHours);
                        displayHour = roundedLateAddHours;
                        roundedLateSettelmentHours = roundedLateAddHours - parseInt(MaxHours);
                        roundedLateAddHours -= roundedLateSettelmentHours;
                        elementToHide.style.display = "";
                        $("#AddOrLateHoursText").text("@localizer["AddHourslate"]");
                    } else {
                        $("#AddOrLateHoursText").text("@localizer["AddHourslate"]");
                    }
                    updateTimeDisplay(displayHour);
                    console.log("roundedHoursVal", roundedHoursVal);
                    console.log("roundedHours", roundedHours);
                    console.log("roundedLateAddHours", roundedLateAddHours);
                    console.log("roundedLateSettelmentHours", roundedLateSettelmentHours);
                    console.log("displayHour", displayHour);
                }

                function resetTimeDisplay() {
                    $("#diffHours").text("00");
                    $("#diffMinutes").text("00");
                    diffHours = 0;
                    diffMinutes = 0;
                }

                CaculateSettelementDay();
            }

            document.getElementById("contract_real_endTime").addEventListener("change", calculateDifference);
            // Call calculateDifference function when the page loads
            calculateDifference();
            customizeDate();
        });
    </script>
    <script>
        function clearExpensesData() {
            $("#expensesValue-input").val('');
            $("#Expense-statement-input").val('');
            $("#requird_field_ExpensesValue").text('').css("color", "");
            $("#requird_field_ExpensesReasons").text('').css("color", "");
            $("#ExpensesError").text('');
            ExpensesArray.splice(0, ExpensesArray.length);
            $('#SecondFieldset .upload__img-box').remove();
        }

        function clearCompensationData() {
            $("#compensation-input").val('');
            $("#compensation-statement-input").val('');
            $("#requird_field_CompensationValue").text('').css("color", "");
            $("#requird_field_CompensationReasons").text('').css("color", "");
            $("#compensationError").text('');
            compensationArray.splice(0, compensationArray.length);
            $('#ThirdFieldset .upload__img-box').remove();
        }

        function clearPaymentData() {
            $("#AmountPayed").val('');
            document.getElementById('ContractSettlement_PaymentMethod').disabled = true;
            document.getElementById('ContractSettlement_PaymentMethod').selectedIndex = 0;
            document.getElementById('ContractSettlement_SalesPoint').disabled = true;
            document.getElementById('ContractSettlement_SalesPoint').selectedIndex = 0;
            $("#ContractSettlement_SalesPoint").empty();
        }





        function CaculateSettelementDay() {
            const endContractDateString = "@Model.ContractSettlement.CrCasRenterContractBasicExpectedEndDate?.ToString("yyyy-MM-ddTHH:mm:ss", CultureInfo.InvariantCulture)";
            const now = new Date();
            const endContractDate = new Date(endContractDateString);
            var settlementMechanismValue = parseInt($("#Settlement-mechanism").val());
            if (settlementMechanismValue == 0) {
                settlementDay = 0;
            }
            else if (settlementMechanismValue == 1) {
                settlementDay = 1;
            }
            else if (settlementMechanismValue == 2) {
                settlementDay = (1 / 2);
            }
            else if (settlementMechanismValue == 3) {
                settlementDay = 1 / 4;
            }
            else {
                if (endContractDate < now && roundedLateSettelmentHours > 0) {
                    settlementDay = 1;
                }
                else {
                    settlementDay = 0;
                }
            }
            $("#ContractSettlement_ActualDaysNo").val(totalDaysNo);
        }

        var AdditionalKm = 0;
        // Function to calculate and update additional KM
        function calculateAdditionalKM(enteredValue) {
            var PreviousMeterInput = '@Model.ContractSettlement.CrCasRenterContractBasicCurrentReadingMeter';
            var PreviousMeterValue = parseInt(PreviousMeterInput) || 0;
            var AdditionalKmFreeDaily = '@Model.ContractSettlement.CrCasRenterContractBasicTotalDailyFreeKm';
            var TotalAdditionalKM = parseFloat(totalDaysNo) * parseInt(AdditionalKmFreeDaily);
            if (enteredValue <= PreviousMeterValue) {
                $("#Error_CurrentMeter").text("@localizer["requirdfieldCurrentMeter"]" + " " + PreviousMeterValue);
            } else {
                var Free = TotalAdditionalKM + PreviousMeterValue;
                AdditionalKm = enteredValue - Free;
                if (AdditionalKm <= 0) {
                    $("#AdditionalKM").text("0");
                    AdditionalKm = 0;
                } else {
                    $("#AdditionalKM").text(AdditionalKm.toLocaleString('en-US', { minimumFractionDigits: 0, maximumFractionDigits: 0 }));
                }
                $("#Error_CurrentMeter").text("");
            }
        }
        var CurrentMeterInput = $("#CurrentMeter");
        // Bind events to CurrentMeterInput
        CurrentMeterInput.on("focusout", function () {
            var enteredValue = parseFloat($(this).val()) || 0;
            calculateAdditionalKM(enteredValue);
            $("#ContractSettlement_AdditionalKm").val(AdditionalKm);
        });
        var CarCheckUp;
        function GetCheckUp() {
            // Initialize an empty array to store the data
            var checkUpData = [];
            // Iterate over each table row
            $(".tabel-data-checkbox-td").each(function () {
                var $row = $(this).closest("tr"); // Get the closest <tr> element
                // Extract data from the row
                var notes = $row.find(".check-table-notes").val().trim();
                var $label = $row.find(".Tires");
                var dataEn = $label.data('en'); // Get the data-en attribute
                var dataAr = $label.data('ar'); // Get the data-ar attribute
                var isChecked = $row.find(".CheckUp").is(":checked");
                var selectedReasonCheck = $row.find(".form-select").val(); // Get the selected value from the <select>

                // Check if the checkbox is checked
                if (isChecked) {
                    // Create an object to store the extracted data
                    var rowData = {
                        reason: notes,
                        enName: dataEn,
                        arName: dataAr,
                        reasonCheck: selectedReasonCheck // Add the selected value to the object
                    };

                    // Push the object into the array
                    checkUpData.push(rowData);
                    CarCheckUp = checkUpData;
                    console.log("CarCheckUp", CarCheckUp);
                }
            });
        }

    </script>
    <script>
        const nextButtons = document.querySelectorAll(".next");

        Array.from(nextButtons).forEach((nextBtn) => {
            nextBtn.addEventListener("click", (event) => {
                var field = nextBtn.closest("fieldset");
                const ExpensesCheckbox = document.getElementById('expenses-check');
                const CompensationCheckbox = document.getElementById('compensation-check');
                const firsetfield = document.getElementById('firstFieldset');
                const fieldsets = document.querySelectorAll("fieldset");
                if ($("#SettlementForm").valid()) {
                    const current_fs = nextBtn.closest("fieldset");
                    let next_fs = current_fs.nextElementSibling;
                    CaculateSettelementDay();
                    CalculateKmFree();
                    if (current_fs.id === 'firstFieldset') {
                        $("#ExpensesError").text('');
                        $("#requird_field_ExpensesValue").text('').css("color", "");
                        $("#requird_field_ExpensesReasons").text('').css("color", "");
                        if (!ExpensesCheckbox.checked && CompensationCheckbox.checked) {
                            clearExpensesData();
                            $("#requird_field_CompensationValue").text('').css("color", "");
                            $("#requird_field_CompensationReasons").text('').css("color", "");
                            $("#compensationError").text('');
                            next_fs = current_fs.nextElementSibling.nextElementSibling;
                            $("#progressbar li").eq($("fieldset").index(current_fs.nextElementSibling)).addClass("active");
                            $("#progressbar li").eq($("fieldset").index(next_fs)).addClass("active");
                            next_fs.style.display = "flex";
                            current_fs.style.display = "none";
                            $("#compensation-input").focus();
                        } else if (!ExpensesCheckbox.checked && !CompensationCheckbox.checked) {
                            clearExpensesData();
                            clearCompensationData();
                            next_fs = current_fs.nextElementSibling.nextElementSibling.nextElementSibling;
                            $("#progressbar li").eq($("fieldset").index(current_fs.nextElementSibling)).addClass("active");
                            $("#progressbar li").eq($("fieldset").index(current_fs.nextElementSibling.nextElementSibling)).addClass("active");
                            $("#progressbar li").eq($("fieldset").index(next_fs)).addClass("active");
                            next_fs.style.display = "flex";
                            current_fs.style.display = "none";
                            $("#CurrentMeter").focus();
                        }
                        else {
                            next_fs = current_fs.nextElementSibling;
                            $("#progressbar li").eq($("fieldset").index(next_fs)).addClass("active");
                            next_fs.style.display = "flex";
                            current_fs.style.display = "none";
                            $("#expensesValue-input").focus();
                        }
                    }
                    if (current_fs.id === 'SecondFieldset') {
                        $("#ExpensesError").text('');
                        var imgs = true;

                        if (ExpensesCheckbox.checked && !CompensationCheckbox.checked) {
                            clearCompensationData();
                            next_fs = current_fs.nextElementSibling.nextElementSibling;
                            $("#progressbar li").eq($("fieldset").index(current_fs.nextElementSibling)).addClass("active");
                            $("#progressbar li").eq($("fieldset").index(next_fs)).addClass("active");
                            next_fs.style.display = "flex";
                            current_fs.style.display = "none";
                            $("#CurrentMeter").focus();
                        }
                        else {
                            $("#requird_field_CompensationValue").text('').css("color", "");
                            $("#requird_field_CompensationReasons").text('').css("color", "");
                            $("#compensationError").text('');
                            $("#progressbar li").eq($("fieldset").index(next_fs)).addClass("active");
                            next_fs.style.display = "flex";
                            current_fs.style.display = "none";
                            $("#compensation-input").focus();
                        }
                    }
                    if (current_fs.id === 'ThirdFieldset') {
                        $("#compensationError").text('');
                        $("#progressbar li").eq($("fieldset").index(next_fs)).addClass("active");
                        next_fs.style.display = "flex";
                        current_fs.style.display = "none";
                        $("#CurrentMeter").focus();
                    }
                    if (current_fs.id === 'FourthFieldset') {
                        var allChecked = true;
                        var currentMeter = true;
                        var imgs = true;

                        // Check checkboxes
                        var checkboxes = document.querySelectorAll(".CheckUp");
                        checkboxes.forEach(function (checkbox) {
                            if (!checkbox.checked) {
                                allChecked = false;
                            }
                        });

                        // Check currentMeterSpan
                        var currentMeterSpan = $("#Error_CurrentMeter");
                        if (currentMeterSpan.text().trim() === "") {
                            console.log("Span is empty");
                        } else {
                            currentMeter = false;
                        }

                        // Check if the div contains at least one img element
                        if (imgCheckUpArray.length > 0) {
                            console.log("The div contains at least one img element");
                        } else {
                            imgs = false;
                        }
                        if (imgs && currentMeter && allChecked) {
                            $("#progressbar li").eq($("fieldset").index(next_fs)).addClass("active");
                            next_fs.style.display = "flex";
                            current_fs.style.display = "none";
                            clearPaymentData();
                            CaculateContractSettelement();
                            $("#AmountPayed").focus();
                        }
                        else {
                            $("#examinationError").text('@localizer["checkUpMessageRequired"]')
                        }
                    }

                }
            });
        });

        const previousButtons = document.querySelectorAll(".previous");

        Array.from(previousButtons).forEach((prevBtn) => {
            prevBtn.addEventListener("click", (event) => {
                const ExpensesCheckbox = document.getElementById('expenses-check');
                const CompensationCheckbox = document.getElementById('compensation-check');
                const current_fs = prevBtn.closest("fieldset");
                let previous_fs = current_fs.previousElementSibling;
                if (current_fs.id === 'FourthFieldset') {

                    if (ExpensesCheckbox.checked && CompensationCheckbox.checked) {
                        previous_fs = current_fs.previousElementSibling;
                    } else if (!ExpensesCheckbox.checked && !CompensationCheckbox.checked) {
                        previous_fs = current_fs.previousElementSibling.previousElementSibling.previousElementSibling;
                        $("#progressbar li").eq($("fieldset").index(current_fs.previousElementSibling)).removeClass("active");
                        $("#progressbar li").eq($("fieldset").index(current_fs.previousElementSibling.previousElementSibling)).removeClass("active");
                    } else if (ExpensesCheckbox.checked && !CompensationCheckbox.checked) {
                        previous_fs = current_fs.previousElementSibling.previousElementSibling;
                        $("#progressbar li").eq($("fieldset").index(current_fs.previousElementSibling)).removeClass("active");
                    }
                }

                if (current_fs.id === 'ThirdFieldset') {

                    if (!ExpensesCheckbox.checked && CompensationCheckbox.checked) {
                        previous_fs = current_fs.previousElementSibling.previousElementSibling;
                        $("#progressbar li").eq($("fieldset").index(current_fs.previousElementSibling)).removeClass("active");

                    }
                }
                Array.from(previous_fs.elements).forEach((field) => {
                    //field.addEventListener('input', () => {
                    //    hideErrorMessage(field);
                    //});
                });
                $("#progressbar li").eq($("fieldset").index(current_fs)).removeClass("active");

                previous_fs.style.display = "flex";
                current_fs.style.display = "none";
            });
        });

        function CalculateKmFree() {
            var AdditionalKmFreeDaily = '@Model.ContractSettlement.CrCasRenterContractBasicTotalDailyFreeKm';
            var TotalAdditionalKM = parseInt(totalDaysNo) * parseInt(AdditionalKmFreeDaily);
            $("#FreeKM").text(TotalAdditionalKM.toLocaleString('en-US', { minimumFractionDigits: 0, maximumFractionDigits: 0 }));
        }
    </script>
    <script>
        var rentValueTotal = 0;
        var FeesTammValue = 0;
        var advantagesValueTotal = 0;
        var AdditionalDriverValue = 0;
        var PrivateDriverValueTotal = 0;
        var ChoicesValueTotal = 0;
        var AdditionalValue = 0;
        var AdditionalHoursValueTotal = 0;
        var AdditionalKMValueTotal = 0;
        var ContractValue = 0;
        var ContractValueAfterDiscount = 0;
        var taxValue = 0;
        var TotalContract = 0;
        var ExpensesValue = 0;
        var compensationValue = 0;
        var AmountRequired = 0;
        var somethingIsNotOkay = true;
        function CaculateContractSettelement() {

            //Rental Price
            var rentalPricePerDay = @Html.Raw(Json.Serialize(Model?.ContractSettlement?.CrCasRenterContractBasicDailyRent));
            var rentValue = totalDaysNo * parseFloat(rentalPricePerDay);
            var settelementRentValue = settlementDay * parseFloat(rentalPricePerDay)
            rentValueTotal = rentValue + settelementRentValue;
            document.getElementById('RentalValue').textContent = rentValue.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 });
            document.getElementById('LateSettlement').textContent = settelementRentValue.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 });

            // FeesTamm
            var FeesTamm = @Html.Raw(Json.Serialize(Model?.ContractSettlement?.CrCasRenterContractBasicAuthorizationValue));
            FeesTammValue = parseFloat(FeesTamm);
            document.getElementById('DelegationValue').textContent = FeesTammValue.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 });

            // Advantages
            var AdvantagesValue = @Html.Raw(Json.Serialize(Model?.ContractSettlement?.AdvantagesValue));
            advantagesValueTotal = totalDaysNo * parseFloat(AdvantagesValue);
            document.getElementById('Features').textContent = advantagesValueTotal.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 });
            $("#ContractSettlement_AdvantagesValueTotal").val(advantagesValueTotal.toFixed(2));

            //AdditionalDriver
            var AdditionalDriver = @Html.Raw(Json.Serialize(Model?.ContractSettlement?.CrCasRenterContractBasicAdditionalDriverValue));
            AdditionalDriverValue = parseFloat(AdditionalDriver);
            document.getElementById('AdditionalDriver').textContent = AdditionalDriverValue.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 });

            //PrivateDriver
            var PrivateDriverValue = @Html.Raw(Json.Serialize(Model?.ContractSettlement?.CrCasRenterContractBasicPrivateDriverValue));
            PrivateDriverValueTotal = totalDaysNo * parseFloat(PrivateDriverValue);
            document.getElementById('PrivateDriver').textContent = PrivateDriverValueTotal.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 });
            $("#ContractSettlement_PrivateDriverValueTotal").val(PrivateDriverValueTotal.toFixed(2));

            // Additionals
            var Additionals = @Html.Raw(Json.Serialize(Model?.ContractSettlement?.CrCasRenterContractBasicAdditionalValue));
            AdditionalValue = parseFloat(Additionals);
            document.getElementById('Additionals').textContent = AdditionalValue.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 });

            //Choices
            var ChoicesValue = @Html.Raw(Json.Serialize(Model?.ContractSettlement?.ChoicesValue));
            ChoicesValueTotal = totalDaysNo * parseFloat(ChoicesValue);
            document.getElementById('Choices').textContent = ChoicesValueTotal.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 });
            $("#ContractSettlement_ChoicesValueTotal").val(ChoicesValueTotal.toFixed(2));

            // Additional Hours Value Total
            getAdditionalHoursValue();

            // Additional KMs Value Total
            if (AdditionalKm != null && AdditionalKm.toString() != "" && AdditionalKm != undefined) {
                getAdditionalKmValue();
                $("#ExcessKilos").text(AdditionalKm.toLocaleString('en-US', { minimumFractionDigits: 0, maximumFractionDigits: 0 }));
                $("#ContractSettlement_AdditionalKm").val(AdditionalKm);
            }
            //Get ContractValue

            ContractValue = rentValueTotal + FeesTammValue + advantagesValueTotal + AdditionalDriverValue + PrivateDriverValueTotal + AdditionalValue + ChoicesValueTotal + AdditionalHoursValueTotal + AdditionalKMValueTotal;
            document.getElementById('ContractValue').textContent = ContractValue.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 });
            $("#ContractSettlement_ContractValue").val(ContractValue.toFixed(2));

            // get ContractValueAfterDiscount
            var discountRate = @Html.Raw(Json.Serialize(Model?.ContractSettlement?.CrCasRenterContractBasicUserDiscountRate));
            var discountValue = ContractValue * (parseFloat(discountRate) / 100);
            $("#ContractSettlement_DiscountValue").val(discountValue.toFixed(2));

            ContractValueAfterDiscount = ContractValue - discountValue;
            $("#ContractSettlement_ContractValueAfterDiscount").val(ContractValueAfterDiscount.toFixed(2));
            document.getElementById('ContractValueAfterDiscount').textContent = ContractValueAfterDiscount.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 });

            // get Tax Value
            var taxRate = @Html.Raw(Json.Serialize(Model?.ContractSettlement?.CrCasRenterContractBasicTaxRate));
            taxValue = ContractValueAfterDiscount * (parseFloat(taxRate) / 100);
            $("#ContractSettlement_TaxValue").val(taxValue.toFixed(2));

            document.getElementById('TaxValue').textContent = taxValue.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 });
            // get TotalContract
            TotalContract = ContractValueAfterDiscount + taxValue;
            $("#ContractSettlement_TotalContract").val(TotalContract.toFixed(2));
            document.getElementById('TotalContract').textContent = TotalContract.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 });

            // expenses Value
            var expensesInput = $("#expensesValue-input").val();
            if (parseFloat(expensesInput) > 0) {
                ExpensesValue = parseFloat(expensesInput);
            } else {
                ExpensesValue = 0;
            }
            document.getElementById('TotalExpenseValue').textContent = ExpensesValue.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 });

            // compensation Value
            var compensationInput = $("#compensation-input").val();
            if (parseFloat(compensationInput) > 0) {
                compensationValue = parseFloat(compensationInput);
            } else {
                compensationValue = 0;
            }
            document.getElementById('TotalCompensationValue').textContent = compensationValue.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 });

            // AmountRequired
            var previousBalance = @Html.Raw(Json.Serialize(Model?.ContractSettlement?.CrCasRenterContractBasic5.CrCasRenterLessorAvailableBalance));
            var previousTotalContract = @Html.Raw(Json.Serialize(Model?.ContractSettlement.CrCasRenterContractBasicExpectedTotal));
            AmountRequired = TotalContract - parseFloat(previousTotalContract) - parseFloat(previousBalance) + compensationValue - ExpensesValue;
            if (AmountRequired < 0) {
                document.getElementById('RenterMoneyText').textContent = '@localizer["RenterMoneyText2"]'
                document.getElementById('AmountPayed').disabled = false;
            }
            else if (AmountRequired > 0) {
                document.getElementById('RenterMoneyText').textContent = '@localizer["RenterMoneyText1"]'
                document.getElementById('AmountPayed').disabled = false;
            }
            else {
                document.getElementById('AmountPayed').disabled = true;
            }

            const formattedAmount = Math.abs(AmountRequired).toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 });
            // تحويل القيمة إلى رقم عند الإرسال
            $("#ContractSettlement_AmountRequired").val(AmountRequired);
            document.getElementById('AmountRequired').textContent = formattedAmount;
            console.log("AmountRequired Check Minis", AmountRequired)

        }
        function getAdditionalHoursValue() {
            // استرجاع القيم المطلوبة
            const TotalFreeHours = @Html.Raw(Json.Serialize(Model?.ContractSettlement?.CrCasRenterContractBasicTotalFreeHours));
            var AdditionalHourValue = @Html.Raw(Json.Serialize(Model?.ContractSettlement?.CrCasRenterContractBasicHourValue));
            var AdditionalHour = @Html.Raw(Json.Serialize(Model?.ContractSettlement?.CrCasRenterContractBasicHourMax));

            // التأكد أن عدد الساعات الإضافية أكبر من 0
            if (AdditionalHour > 0) {
                AdditionalHoursValueTotal = 0; // للتأكد من أنها فارغة في البداية

                // إذا كانت الفرق الزمني أكبر أو يساوي الساعات القصوى
                if (roundedLateAddHours == AdditionalHour) {
                    AdditionalHoursValueTotal = parseInt(AdditionalHour) * parseFloat(AdditionalHourValue);
                } else {
                    if (roundedLateAddHours >= 0) {
                        AdditionalHoursValueTotal = roundedLateAddHours * parseFloat(AdditionalHourValue);
                    }
                }
            }
            console.log("AdditionalHour", AdditionalHour)
            console.log("AdditionalHoursValueTotal", AdditionalHoursValueTotal)
            // تحديث القيم المعروضة
            document.getElementById('ExtraHoursValue').textContent = AdditionalHoursValueTotal.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 });
            $("#ContractSettlement_MaxHours").val(AdditionalHour);
            $("#ContractSettlement_ExtraHoursValue").val(AdditionalHoursValueTotal.toFixed(2));
        }
        function getAdditionalKmValue() {
            const KMValue = @Html.Raw(Json.Serialize(Model?.ContractSettlement?.CrCasRenterContractBasicKmValue));
            AdditionalKMValueTotal = parseInt(AdditionalKm) * parseFloat(KMValue);
            document.getElementById('ExtraKMsValue').textContent = AdditionalKMValueTotal.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 });
        }
    </script>
    <script>
        function CheckIfCanPayLessThanTotalAmount() {
            var userCashBranchAmount = @Html.Raw(Json.Serialize(userInfo?.CrMasUserBranchValidities?.FirstOrDefault(x => x.CrMasUserBranchValidityBranch == Model?.SelectedBranch).CrMasUserBranchValidityBranchCashAvailable));
            var AmountPayed = document.getElementById("AmountPayed").value;
            console.log("userCashBranchAmount", userCashBranchAmount)
            console.log("AmountRequired", AmountRequired)
            console.log("AmountPayed", AmountPayed)
            if (AmountRequired < 0) {
                if (parseFloat(userCashBranchAmount) < parseFloat(AmountPayed)) {
                    toastr.options = { "positionClass": '@localizer["toastPostion"]', };
                    toastr.error('@localizer["UserDontHaveCashToPay"]');
                    $("#AmountPayed").css({ "border": "2px solid red" });    //This For last Check When i submit Form
                    somethingIsNotOkay = false;
                }
                else {
                    $("#AmountPayed").css({ "border": "2px solid #faa64d" }); //This For last Check When i submit Form
                    somethingIsNotOkay = true;
                }
            }
            else {
                $("#AmountPayed").css({ "border": "2px solid #faa64d" }); //This For last Check When i submit Form
                somethingIsNotOkay = true;
            }
        }
        $(document).ready(function () {
            $("#AmountPayed").focusout(function () {
                somethingIsNotOkay = true;
                var payed = document.getElementById('AmountPayed').value;
                var BranchCode = @Html.Raw(Json.Serialize(Model?.SelectedBranch));
                if (AmountRequired < 0) {
                    CheckIfCanPayLessThanTotalAmount();
                }
                if (AmountRequired > 0 && parseFloat(payed) > 0 && somethingIsNotOkay) {
                    document.getElementById('ContractSettlement_PaymentMethod').disabled = false;
                    // document.getElementById('ContractSettlement_PaymentMethod').selectedIndex = 0;
                    document.getElementById('ContractSettlement_SalesPoint').disabled = false;
                    document.getElementById('ContractSettlement_SalesPoint').selectedIndex = 0;
                }
                else if (AmountRequired < 0 && parseFloat(payed) > 0 && somethingIsNotOkay) {
                    CheckIfCanPayLessThanTotalAmount();
                    getSalesPoint("10", BranchCode);
                    document.getElementById('ContractSettlement_PaymentMethod').value = "10";
                    document.getElementById('ContractSettlement_PaymentMethod').disabled = true;

                }
                else {
                    document.getElementById('ContractSettlement_PaymentMethod').disabled = true;
                    document.getElementById('ContractSettlement_PaymentMethod').selectedIndex = 0;
                    document.getElementById('ContractSettlement_SalesPoint').disabled = true;
                    document.getElementById('ContractSettlement_SalesPoint').selectedIndex = 0;
                    $("#ContractSettlement_SalesPoint").empty();
                }
            })
        });
        $(document).ready(function () {
            $("#ContractSettlement_PaymentMethod").change(function () {
                var PaymentMethod = $("#ContractSettlement_PaymentMethod").val();
                var BranchCode = $("#SelectedBranch").val();
                getSalesPoint(PaymentMethod, BranchCode);
            })
        });
        function getSalesPoint(PaymentMethod, BranchCode) {
            $.get("/BS/ContractSettlement/GetSalesPoint", { PaymentMethod: PaymentMethod, BranchCode: BranchCode }, function (data) {
                $("#ContractSettlement_SalesPoint").empty();
                if (data.type == "1" && data.salesPoints != null) {
                    $.each(data.salesPoints, function (index, row) {
                        if ("@requestCulture?.RequestCulture.UICulture.Name" == "en-US") {
                            $("#ContractSettlement_SalesPoint").append("<option  value= '" + row.crCasAccountSalesPointCode + "'>" + row.crCasAccountSalesPointEnName + "</option>")
                        }
                        else {
                            $("#ContractSettlement_SalesPoint").append("<option class='text-right' value= '" + row.crCasAccountSalesPointCode + "'>" + row.crCasAccountSalesPointArName + "</option>")
                        }
                    });
                }
                else if (data.type == "2" && data.accountBank != null) {
                    $.each(data.accountBank, function (index, row) {
                        if ("@requestCulture?.RequestCulture.UICulture.Name" == "en-US") {

                            $("#ContractSettlement_SalesPoint").append("<option value= '" + row.crCasAccountBankCode + "'>" + row.crCasAccountBankEnName + "</option>")
                        }
                        else {
                            $("#ContractSettlement_SalesPoint").append("<option class='text-right' value= '" + row.crCasAccountBankCode + "'>" + row.crCasAccountBankArName + "</option>")
                        }
                    });
                }

            });
        }
    </script>
    <script>
        const sendStaticImageToWhatsApp = async () => {
            const imageLessor = "user.CrMasUserInformationLessorNavigation.CrMasLessorImage.CrMasLessorImageContractClosed";
            const imagePath = imageLessor.replace('~', '');
            const token = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJudW1iZXIiOiJKYXNlcjExIiwic2VyaWFsIjoiMTk5ZmUzYjFlYjc2MjNlIiwiaWF0IjoxNzA3NzMxNjI4LCJleHAiOjE3OTQxMzE2Mjh9.O_4RW4vYAays1ZL7D-OlOQh6C5P5xVYrT3pZ2Oi9Yak"; // Your WhatsApp API token
            const callingKey = '@user.CrMasUserInformationCallingKey'; // Assuming this variable contains the calling key
            const mobileNo = '@user.CrMasUserInformationMobileNo'; // Assuming this variable contains the mobile number
            const phoneNumber = callingKey + mobileNo;
            const messageText = " "; // Replace with your message
            const contractNo = '@Html.Raw(Model.ContractSettlement?.CrCasRenterContractBasicNo)';
            try {
                // Read the image file as a Blob
                const responseImage = await fetch(imagePath);
                const blob = await responseImage.blob();
                // Prepare form data
                const formData = new FormData();
                formData.append("number", phoneNumber); // Append the recipient's phone number
                formData.append("message", messageText); // Append the message

                // Create a canvas element
                const canvas = document.createElement('canvas');
                const ctx = canvas.getContext('2d');

                // Create an image element
                const img = new Image();

                // When the image is loaded, draw it on the canvas
                img.onload = function () {
                    canvas.width = img.width;
                    canvas.height = img.height;
                    ctx.drawImage(img, 0, 0);


                    const RenterArName = "@Html.Raw(Model.ContractSettlement?.CrCasRenterContractBasic5?.CrCasRenterLessorNavigation?.CrMasRenterInformationArName)";
                    const RenterEnName = "@Html.Raw(Model.ContractSettlement?.CrCasRenterContractBasic5?.CrCasRenterLessorNavigation?.CrMasRenterInformationEnName)";
                    ctx.font = "bold 9rem serif";
                    ctx.textAlign = "right";
                    ctx.fillStyle = "black";
                    ctx.fillText(RenterArName, canvas.width - 750, 1950);
                    //

                    ctx.textAlign = "left";
                    ctx.fillText(RenterEnName, canvas.width - 3950, 3050);
                    ctx.fillText(contractNo, canvas.width - 4400, 940);
                    console.log("phoneNumber", phoneNumber)
                    canvas.toBlob(async function (blob) {
                        const base64String = await blobToBase64(blob);
                        document.getElementById("StaticContractCardImg").value = base64String;
                    }, 'image/png');
                };
                // Set the source of the image element
                img.src = URL.createObjectURL(blob);
            } catch (error) {
                console.log('SendImageError', error);
            }
        };
        function blobToBase64(blob) {
            return new Promise((resolve, reject) => {
                const reader = new FileReader();
                reader.onload = () => {
                    resolve(reader.result);
                };
                reader.onerror = error => reject(error);
                reader.readAsDataURL(blob);
            });
        }
        // Function to send an image and Ar PDF to WhatsApp
        const sendArInvoiceToWhatsApp = async () => {
            const imageLessor = "lessorInfo?.CrMasUserInformationLessorNavigation?.CrMasLessorImage.CrMasLessorImageArActualInvoice";
            const imagePath = imageLessor.replace('~', '');
            const token = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJudW1iZXIiOiJKYXNlcjExIiwic2VyaWFsIjoiMTk5ZmUzYjFlYjc2MjNlIiwiaWF0IjoxNzA3NzMxNjI4LCJleHAiOjE3OTQxMzE2Mjh9.O_4RW4vYAays1ZL7D-OlOQh6C5P5xVYrT3pZ2Oi9Yak"; // Your WhatsApp API token
            const callingKey = "@user.CrMasUserInformationCallingKey"; // Assuming this variable contains the calling key.
            const mobileNo = "@user.CrMasUserInformationMobileNo";     // Assuming this variable contains the mobile number.
            const phoneNumber = callingKey + mobileNo;
            const dates = getFormattedDatesMiliadiAndHijri("ar");
            const miladiDateString = dates.miladiDate;
            const hijriDateString = dates.hijriDate;
            // First In Page
            const contractNo = "@Model.ContractSettlement?.CrCasRenterContractBasicNo";
            const InvoiceAccountNo = "@ViewBag.InvoiceAccount";
            const referenceType = "تسوية عقد";
            const RenterName = "@Html.Raw(Model.ContractSettlement?.CrCasRenterContractBasic5?.CrCasRenterLessorNavigation?.CrMasRenterInformationArName)";
            const CarName = "@Html.Raw(Model.ContractSettlement?.CrCasRenterContractBasicCarSerailNoNavigation?.CrCasCarInformationConcatenateArName)";

            // last in page
            const balanceR = '@Html.Raw(Model.ContractSettlement?.CrCasRenterContractBasic5?.CrCasRenterLessorAvailableBalance)';
            const balance = parseFloat(balanceR);
            var DiscountInput = '@Html.Raw(Model.ContractSettlement?.CrCasRenterContractBasicUserDiscountRate)';
            var TaxRateInput = '@Html.Raw(Model.ContractSettlement?.CrCasRenterContractBasicTaxRate)';
            const discountRate = parseFloat(DiscountInput).toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 });
            const TaxPercent = parseFloat(TaxRateInput).toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 });

            var AmountPayedInput = document.getElementById("AmountPayed").value;
            let AmountPayed = parseFloat(AmountPayedInput);
            if (isNaN(AmountPayed) || !AmountPayedInput.trim()) {
                AmountPayed = "0.00"; // Setting it as a string
            } else {
                AmountPayed = AmountPayed.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 });
            }

            var selectElement = document.getElementById("ContractSettlement_PaymentMethod");
            var selectedOption = selectElement.options[selectElement.selectedIndex];
            // Get the text of the selected option
            const selectedText = selectedOption.textContent || selectedOption.innerText;
            var selectedArabicName = selectedOption.dataset.ar;
            if (selectedArabicName == "" || selectedArabicName == undefined || selectedArabicName == NaN) {
                selectedArabicName = "";
            }
            var reasonPayment = document.getElementById("ContractSettlement_ReasonsPayment").value;

            var namesAndSignatures = await loadArSignatures();
            //////////////////////////////////////////////////////////////////////////////////////////////////////////


            // Get Image And Text On
            // Read the image file as a Blob
            const responseImage = await fetch(imagePath);
            const blob = await responseImage.blob();
            // Prepare form data
            const formData = new FormData();
            formData.append("number", phoneNumber); // Append the recipient's phone number
            formData.append("message", " "); // Append the message
            var canvas = document.createElement("canvas");
            var ctx = canvas.getContext("2d");
            var img = new Image();
            img.crossOrigin = "Anonymous";
            img.onload = function () {
                canvas.width = img.width;
                canvas.height = img.height;

                ctx.drawImage(img, 0, 0);
                ctx.font = "bold 50px serif";
                ctx.textAlign = "right";
                ctx.fillStyle = "black";
                // Receipt and type and renter and car name
                ctx.fillText(InvoiceAccountNo, canvas.width - 110, 610);
                ctx.fillText(namesAndSignatures.renterName, canvas.width - 125, 1050);
                ctx.fillText(CarName, canvas.width - 125, 1150);

                ctx.font = "bold 42px serif";
                ctx.fillText(referenceType, canvas.width - 250, 860);
                ctx.fillText(contractNo, canvas.width - 320, 950);
                // The Table
                var YHeight = 1335;
                var daysNo = totalDaysNo;
                // The payed Information
                const discountText = '%' + discountRate.toString();
                const taxText = '%' + TaxPercent.toString();

                ctx.fillText(balanceR.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 }), canvas.width - 330, 2392);
                ctx.fillText(discountText, canvas.width - 360, 2485);
                ctx.fillText(taxText, canvas.width - 367, 2573);
                ctx.fillText(AmountRequired.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 }), canvas.width - 360, 2660);
                ctx.fillText(AmountPayed, canvas.width - 360, 2750);
                ctx.fillText(selectedArabicName, canvas.width - 360, 2840);
                ctx.fillText(reasonPayment, canvas.width - 360, 2930);
                ctx.font = "bold 35px serif";
                //Date and contract no
                ctx.fillText(hijriDateString, canvas.width - 228, 668);
                ctx.fillText(miladiDateString, canvas.width - 228, 722);
                var Rent = '@Html.Raw(Model.ContractSettlement?.CrCasRenterContractBasicDailyRent)';
                /////////////////////////////////////////////////////////////////////////////////////////////////////////////////// Rent
                if (parseFloat(Rent) > 0) {
                    YHeight = calculateAndDrawAr(ctx, canvas, "الايجار", Rent, daysNo, DiscountInput, TaxPercent, YHeight);
                }
                /////////////////////////////////////////////////////////////////////////////////////////////////////////////////// Auth
                var FeesTamm = '@Html.Raw(Model.ContractSettlement?.CrCasRenterContractBasicAuthorizationValue)';
                var FeesTammValue = 0;
                if (parseFloat(FeesTamm) != null) {
                    FeesTammValue = parseFloat(FeesTamm);
                }
                else {
                    FeesTammValue = 0;
                }
                if (parseFloat(FeesTammValue) > 0) {
                    YHeight = calculateAndDrawAr(ctx, canvas, "التفويض", FeesTammValue, "1", DiscountInput, TaxPercent, YHeight);
                }

                /////////////////////////////////////////////////////////////////////////////////////////////////////////////////// Additional Driver
                var additionalDriver = '@Html.Raw(Model.ContractSettlement?.CrCasRenterContractBasicAdditionalDriverId)';
                var additionalDriverValue = 0;
                if (additionalDriver != null || additionalDriver != "") {
                    var AddDriverValue = '@Html.Raw(Model.ContractSettlement?.CrCasRenterContractBasicAdditionalDriverValue)';
                    if (parseInt(AddDriverValue) != null) {
                        additionalDriverValue = parseFloat(AddDriverValue);
                    }
                    else {
                        additionalDriverValue = 0;
                    }
                }
                if (additionalDriverValue > 0) {
                    YHeight = calculateAndDrawAr(ctx, canvas, "سائق اضافي", additionalDriverValue, "1", DiscountInput, TaxPercent, YHeight);
                }
                /////////////////////////////////////////////////////////////////////////////////////////////////////////////////// TotalAdditional

                var TotalAdditionals = '@Html.Raw(Model.ContractSettlement?.CrCasRenterContractBasicAdditionalValue)';
                var additionalValue = 0;
                if (TotalAdditionals != null && TotalAdditionals != 0 && TotalAdditionals != "" && TotalAdditionals != undefined) {
                    additionalValue = parseFloat(TotalAdditionals);
                }
                else {
                    additionalValue = 0;
                }
                if (additionalValue > 0) {
                    YHeight = calculateAndDrawAr(ctx, canvas, "الاضافات", additionalValue, "1", DiscountInput, TaxPercent, YHeight);
                }

                /////////////////////////////////////////////////////////////////////////////////////////////////////////////////// Advantages
                var AdvantagesValue = parseFloat('@Model.ContractSettlement?.AdvantagesValue');
                if (AdvantagesValue > 0) {
                    YHeight = calculateAndDrawAr(ctx, canvas, "المميزات الاضافية", AdvantagesValue, daysNo, DiscountInput, TaxPercent, YHeight);
                }

                /////////////////////////////////////////////////////////////////////////////////////////////////////////////////// Private Driver
                var privateDriverValue = 0;
                var privateDriver = '@Model.ContractSettlement?.CrCasRenterContractBasicPrivateDriverValue';
                if (parseFloat(privateDriver) != null) {
                    privateDriverValue = parseFloat(privateDriver);
                }
                else {
                    privateDriverValue = 0;
                }

                if (privateDriverValue > 0) {
                    YHeight = calculateAndDrawAr(ctx, canvas, "سائق خاص", privateDriverValue, daysNo, DiscountInput, TaxPercent, YHeight);
                }
                /////////////////////////////////////////////////////////////////////////////////////////////////////////////////// TotalChoices
                var TotalChoices = parseFloat('@Model.ContractSettlement?.ChoicesValue');
                var choicesValue = 0;
                if (TotalChoices != null && TotalChoices != 0 && TotalChoices != "" && TotalChoices != undefined) {
                    choicesValue = parseFloat(TotalChoices);
                }
                else {
                    choicesValue = 0;
                }
                if (choicesValue > 0) {
                    YHeight = calculateAndDrawAr(ctx, canvas, "الخيارات", choicesValue, daysNo, DiscountInput, TaxPercent, YHeight);
                }
                ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                // استرجاع القيم المطلوبة
                var AdditionalHourValue = @Html.Raw(Json.Serialize(Model?.ContractSettlement?.CrCasRenterContractBasicHourValue));
                var AdditionalHour = @Html.Raw(Json.Serialize(Model?.ContractSettlement?.CrCasRenterContractBasicHourMax));

                // التأكد أن عدد الساعات الإضافية أكبر من 0
                if (AdditionalHour > 0) {
                    // حساب عدد الساعات التأخير
                    let totalLateHourValue = roundedLateAddHours * parseFloat(AdditionalHourValue);
                    // التأكد من قيمة الساعات المتأخرة
                    totalLateHourValue = totalLateHourValue || 0;

                    // الآن يمكنك استخدام هذه القيم كما تريد
                    if (totalLateHourValue > 0) {
                        // رسم القيم في الـ canvas
                        YHeight = calculateAndDrawAr(ctx, canvas, "ساعات التأخير", AdditionalHourValue, roundedLateAddHours, DiscountInput, TaxPercent, YHeight);
                    }
                }

                ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////Additional KM
                var KMValue = @Html.Raw(Json.Serialize(Model?.ContractSettlement?.CrCasRenterContractBasicKmValue));
                var AdditionalKmVal = 0;
                if (AdditionalKMValueTotal != null && AdditionalKMValueTotal != 0 && AdditionalKMValueTotal != "" && AdditionalKMValueTotal != undefined) {
                    AdditionalKmVal = parseFloat(AdditionalKMValueTotal);
                }
                else {
                    AdditionalKmVal = 0;
                }
                if (AdditionalKmVal > 0) {
                    YHeight = calculateAndDrawAr(ctx, canvas, "كيلوات اضافية", KMValue, AdditionalKm, DiscountInput, TaxPercent, YHeight);
                }
                /////////////////////////////////////////////////////////////////////////////////////////////////////////////////// Settlement
                var settelement = 0;
                if (settlementDay != null && settlementDay != 0 && settlementDay != "" && settlementDay != undefined) {
                    settelement = parseFloat(settlementDay);
                }
                else {
                    settelement = 0;
                }
                if (settelement > 0) {
                    YHeight = calculateAndDrawAr(ctx, canvas, "غرامة التأخير", Rent, settelement, DiscountInput, TaxPercent, YHeight);
                }
                /////////////////////////////////////////////////////////////////////////////////////////////////////////////////// Total

                var tTotal = calculateTotalAmountPerDay(parseFloat('@Model.ContractSettlement?.CrCasRenterContractBasicDailyRent'), parseFloat(FeesTammValue), parseFloat(AdvantagesValue), parseFloat(PrivateDriverValueTotal),
                    parseFloat(choicesValue), parseFloat(additionalDriverValue), parseFloat(additionalValue), parseFloat(AdditionalHoursValueTotal), parseFloat(AdditionalKmVal), settelement, daysNo);
                var tTotalDiscount = calculateTotalDiscountAmount(tTotal, DiscountInput);
                var tTotalAfterDiscount = tTotal - tTotalDiscount;
                var tTotalTax = (tTotalAfterDiscount) * (TaxPercent / 100);
                var TotalAmountMinisPerviousBalance = tTotalTax + tTotalAfterDiscount;
                // // الاجمالي
                ctx.fillText(tTotal.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 }), canvas.width - 970, 2250);
                ctx.fillText(tTotalDiscount.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 }), canvas.width - 1270, 2250);
                ctx.fillText(tTotalAfterDiscount.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 }), canvas.width - 1560, 2250);
                ctx.fillText(tTotalTax.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 }), canvas.width - 1880, 2250);
                ctx.fillText(TotalAmountMinisPerviousBalance.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 }), canvas.width - 2180, 2250);
                // director and renter and user
                ctx.fillText(namesAndSignatures.directorOfLessor, canvas.width - 340, 3050);
                ctx.fillText(namesAndSignatures.userName, canvas.width - 1140, 3050);
                ctx.fillText(namesAndSignatures.directorOfBranch, canvas.width - 340, 3190);
                ctx.fillText(namesAndSignatures.renterName, canvas.width - 1140, 3200);
                if (namesAndSignatures.signatureImg4) {
                    ctx.drawImage(namesAndSignatures.signatureImg4, canvas.width - 1350, 3125, 200, 100);
                }
                canvas.toBlob(async function (blob) {
                    formData.append("file", blob, "Ar_Invoice_Receipt.png"); // Append the modified image blob with a filename
                    var message = ` عزيزي / ${RenterName} , يمكنك مراجعة الفاتورة عن طريق تحميل الملف المرفق `
                    createPdfAndSendToWhatsApp(null, InvoiceAccountNo, blob, "SavePdfArInvoice", "ar");
                }, 'image/png');
            };
            img.src = URL.createObjectURL(blob);
        };
        function calculateAndDrawAr(ctx, canvas, itemName, itemValue, days, discountInput, taxPercent, yHeight) {
            var itemTotal = parseFloat(itemValue) * parseFloat(days);
            var discountValue = itemTotal * (parseFloat(discountInput) / 100);
            var totalAfterDiscount = itemTotal - discountValue;
            var taxValue = totalAfterDiscount * (taxPercent / 100);
            var totalActual = parseFloat(totalAfterDiscount) + parseFloat(taxValue);
            ctx.fillText(itemName, canvas.width - 230, yHeight);
            ctx.fillText(itemValue.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 }), canvas.width - 540, yHeight);
            ctx.fillText(days, canvas.width - 775, yHeight);
            ctx.fillText(itemTotal.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 }), canvas.width - 970, yHeight);
            ctx.fillText(discountValue.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 }), canvas.width - 1270, yHeight);
            ctx.fillText(totalAfterDiscount.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 }), canvas.width - 1560, yHeight);
            ctx.fillText(taxValue.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 }), canvas.width - 1880, yHeight);
            ctx.fillText(totalActual.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 }), canvas.width - 2180, yHeight);

            return yHeight + 84; // Update yHeight for the next item
        }
        const sendEnInvoiceToWhatsApp = async () => {
            const imageLessor = "lessorInfo?.CrMasUserInformationLessorNavigation?.CrMasLessorImage.CrMasLessorImageEnActualInvoice";
            const imagePath = imageLessor.replace('~', '');
            const token = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJudW1iZXIiOiJKYXNlcjExIiwic2VyaWFsIjoiMTk5ZmUzYjFlYjc2MjNlIiwiaWF0IjoxNzA3NzMxNjI4LCJleHAiOjE3OTQxMzE2Mjh9.O_4RW4vYAays1ZL7D-OlOQh6C5P5xVYrT3pZ2Oi9Yak"; // Your WhatsApp API token
            const callingKey = '@user.CrMasUserInformationCallingKey'; // Assuming this variable contains the calling key.
            const mobileNo = '@user.CrMasUserInformationMobileNo';     // Assuming this variable contains the mobile number.
            const phoneNumber = callingKey + mobileNo;
            const dates = getFormattedDatesMiliadiAndHijri("en");
            const miladiDateString = dates.miladiDate;
            const hijriDateString = dates.hijriDate;
            // First In Page
            const contractNo = "@Model.ContractSettlement?.CrCasRenterContractBasicNo";
            const InvoiceAccountNo = "@ViewBag.InvoiceAccount";
            const referenceType = "Settelement Contract";
            const RenterName = "@Html.Raw(Model.ContractSettlement?.CrCasRenterContractBasic5?.CrCasRenterLessorNavigation?.CrMasRenterInformationEnName)";
            const CarName = "@Html.Raw(Model.ContractSettlement?.CrCasRenterContractBasicCarSerailNoNavigation?.CrCasCarInformationConcatenateEnName)";

            // last in page
            const balanceR = '@Html.Raw(Model.ContractSettlement?.CrCasRenterContractBasic5?.CrCasRenterLessorAvailableBalance)';
            const balance = parseFloat(balanceR);
            var DiscountInput = '@Html.Raw(Model.ContractSettlement?.CrCasRenterContractBasicUserDiscountRate)';
            var TaxRateInput = '@Html.Raw(Model.ContractSettlement?.CrCasRenterContractBasicTaxRate)';
            const discountRate = parseFloat(DiscountInput).toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 });
            const TaxPercent = parseFloat(TaxRateInput).toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 });

            var AmountPayedInput = document.getElementById("AmountPayed").value;
            let AmountPayed = parseFloat(AmountPayedInput);
            if (isNaN(AmountPayed) || !AmountPayedInput.trim()) {
                AmountPayed = "0.00"; // Setting it as a string
            } else {
                AmountPayed = AmountPayed.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 });
            }
            var selectElement = document.getElementById("ContractSettlement_PaymentMethod");
            var selectedOption = selectElement.options[selectElement.selectedIndex];
            // Get the text of the selected option
            const selectedText = selectedOption.textContent || selectedOption.innerText;
            var selectedEnglishName = selectedOption.dataset.en;
            if (selectedEnglishName == "" || selectedEnglishName == undefined || selectedEnglishName == NaN) {
                selectedEnglishName = "";
            }
            var reasonPayment = document.getElementById("ContractSettlement_ReasonsPayment").value;
            // Signture Image
            var namesAndSignatures = await loadEnSignatures();
            //////////////////////////////////////////////////////////////////////////////////////////////////////////
            // Get Image And Text On
            // Read the image file as a Blob
            const responseImage = await fetch(imagePath);
            const blob = await responseImage.blob();
            // Prepare form data
            const formData = new FormData();
            formData.append("number", phoneNumber); // Append the recipient's phone number
            formData.append("message", " "); // Append the message
            var canvas = document.createElement("canvas");
            var ctx = canvas.getContext("2d");
            var img = new Image();
            img.crossOrigin = "Anonymous";
            img.onload = function () {
                canvas.width = img.width;
                canvas.height = img.height;

                ctx.drawImage(img, 0, 0);
                ctx.font = "bold 50px serif";
                ctx.textAlign = "left";
                ctx.fillStyle = "black";
                // Receipt and type and renter and car name
                ctx.fillText(InvoiceAccountNo, canvas.width - 2370, 610);
                ctx.fillText(namesAndSignatures.renterName, canvas.width - 2360, 1035);
                ctx.fillText(CarName, canvas.width - 2360, 1135);

                ctx.font = "bold 42px serif";
                ctx.fillText(referenceType, canvas.width - 2160, 850);
                ctx.fillText(contractNo, canvas.width - 2000, 940);
                // The Table
                var YHeight = 1335;
                var daysNo = totalDaysNo;
                // The payed Information
                const discountText = '%' + discountRate.toString();
                const taxText = '%' + TaxPercent.toString();

                ctx.fillText(balanceR.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 }), canvas.width - 2040, 2392);
                ctx.fillText(discountText, canvas.width - 2090, 2485);
                ctx.fillText(taxText, canvas.width - 2180, 2573);
                ctx.fillText(AmountRequired.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 }), canvas.width - 2020, 2660);
                ctx.fillText(AmountPayed, canvas.width - 2100, 2750);
                ctx.fillText(selectedEnglishName, canvas.width - 2010, 2840);
                ctx.fillText(reasonPayment, canvas.width - 2170, 2930);
                ctx.font = "bold 35px serif";
                //Date and contract no
                ctx.fillText(hijriDateString, canvas.width - 2300, 668);
                ctx.fillText(miladiDateString, canvas.width - 2270, 722);
                var Rent = '@Html.Raw(Model.ContractSettlement?.CrCasRenterContractBasicDailyRent)';
                /////////////////////////////////////////////////////////////////////////////////////////////////////////////////// Rent
                if (parseFloat(Rent) > 0) {
                    YHeight = calculateAndDrawEn(ctx, canvas, "Rent", Rent, daysNo, DiscountInput, TaxPercent, YHeight);
                }
                /////////////////////////////////////////////////////////////////////////////////////////////////////////////////// Auth
                var FeesTamm = '@Html.Raw(Model.ContractSettlement?.CrCasRenterContractBasicAuthorizationValue)';
                var FeesTammValue = 0;
                if (parseFloat(FeesTamm) != null) {
                    FeesTammValue = parseFloat(FeesTamm);
                }
                else {
                    FeesTammValue = 0;
                }
                if (parseFloat(FeesTammValue) > 0) {
                    YHeight = calculateAndDrawEn(ctx, canvas, "Delegation", FeesTammValue, "1", DiscountInput, TaxPercent, YHeight);
                }

                /////////////////////////////////////////////////////////////////////////////////////////////////////////////////// Additional Driver
                var additionalDriver = '@Html.Raw(Model.ContractSettlement?.CrCasRenterContractBasicAdditionalDriverId)';
                var additionalDriverValue = 0;
                if (additionalDriver != null || additionalDriver != "") {
                    var AddDriverValue = '@Html.Raw(Model.ContractSettlement?.CrCasRenterContractBasicAdditionalDriverValue)';
                    if (parseInt(AddDriverValue) != null) {
                        additionalDriverValue = parseFloat(AddDriverValue);
                    }
                    else {
                        additionalDriverValue = 0;
                    }
                }
                if (additionalDriverValue > 0) {
                    YHeight = calculateAndDrawEn(ctx, canvas, "Add Driver", additionalDriverValue, "1", DiscountInput, TaxPercent, YHeight);
                }
                /////////////////////////////////////////////////////////////////////////////////////////////////////////////////// TotalAdditional

                var TotalAdditionals = '@Html.Raw(Model.ContractSettlement?.CrCasRenterContractBasicAdditionalValue)';
                var additionalValue = 0;
                if (TotalAdditionals != null && TotalAdditionals != 0 && TotalAdditionals != "" && TotalAdditionals != undefined) {
                    additionalValue = parseFloat(TotalAdditionals);
                }
                else {
                    additionalValue = 0;
                }
                if (additionalValue > 0) {
                    YHeight = calculateAndDrawEn(ctx, canvas, "Additionals", additionalValue, "1", DiscountInput, TaxPercent, YHeight);
                }

                /////////////////////////////////////////////////////////////////////////////////////////////////////////////////// Advantages
                var AdvantagesValue = parseFloat('@Model.ContractSettlement?.AdvantagesValue');
                if (AdvantagesValue > 0) {
                    YHeight = calculateAndDrawEn(ctx, canvas, "Features", AdvantagesValue, daysNo, DiscountInput, TaxPercent, YHeight);
                }

                /////////////////////////////////////////////////////////////////////////////////////////////////////////////////// Private Driver
                var privateDriverValue = 0;
                var privateDriver = '@Model.ContractSettlement?.CrCasRenterContractBasicPrivateDriverValue';
                if (parseFloat(privateDriver) != null) {
                    privateDriverValue = parseFloat(privateDriver);
                }
                else {
                    privateDriverValue = 0;
                }

                if (privateDriverValue > 0) {
                    YHeight = calculateAndDrawEn(ctx, canvas, "Private Driver", privateDriverValue, daysNo, DiscountInput, TaxPercent, YHeight);
                }
                /////////////////////////////////////////////////////////////////////////////////////////////////////////////////// TotalChoices
                var TotalChoices = parseFloat('@Model.ContractSettlement?.ChoicesValue');
                var choicesValue = 0;
                if (TotalChoices != null && TotalChoices != 0 && TotalChoices != "" && TotalChoices != undefined) {
                    choicesValue = parseFloat(TotalChoices);
                }
                else {
                    choicesValue = 0;
                }
                if (choicesValue > 0) {
                    YHeight = calculateAndDrawEn(ctx, canvas, "Options", choicesValue, daysNo, DiscountInput, TaxPercent, YHeight);
                }

                ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////Additional Hours
                // استرجاع القيم المطلوبة
                var AdditionalHourValue = @Html.Raw(Json.Serialize(Model?.ContractSettlement?.CrCasRenterContractBasicHourValue));
                var AdditionalHour = @Html.Raw(Json.Serialize(Model?.ContractSettlement?.CrCasRenterContractBasicHourMax));

                // التأكد أن عدد الساعات الإضافية أكبر من 0
                if (AdditionalHour > 0) {

                    let totalLateHourValue = roundedLateAddHours * parseFloat(AdditionalHourValue);

                    // التأكد من قيمة الساعات المتأخرة
                    totalLateHourValue = totalLateHourValue || 0;

                    // الآن يمكنك استخدام هذه القيم كما تريد
                    if (totalLateHourValue > 0) {
                        // رسم القيم في الـ canvas
                        YHeight = calculateAndDrawEn(ctx, canvas, "Late Hours", AdditionalHourValue, roundedLateAddHours, DiscountInput, TaxPercent, YHeight);
                    }
                }


                ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////Additional KM
                var KMValue = @Html.Raw(Json.Serialize(Model?.ContractSettlement?.CrCasRenterContractBasicKmValue));
                var AdditionalKmVal = 0;
                if (AdditionalKMValueTotal != null && AdditionalKMValueTotal != 0 && AdditionalKMValueTotal != "" && AdditionalKMValueTotal != undefined) {
                    AdditionalKmVal = parseFloat(AdditionalKMValueTotal);
                }
                else {
                    AdditionalKmVal = 0;
                }
                if (AdditionalKmVal > 0) {
                    YHeight = calculateAndDrawEn(ctx, canvas, "Additional Km", KMValue, AdditionalKm, DiscountInput, TaxPercent, YHeight);
                }
                /////////////////////////////////////////////////////////////////////////////////////////////////////////////////// Settlement
                var settelement = 0;
                if (settlementDay != null && settlementDay != 0 && settlementDay != "" && settlementDay != undefined) {
                    settelement = parseFloat(settlementDay);
                }
                else {
                    settelement = 0;
                }
                if (settelement > 0) {
                    YHeight = calculateAndDrawEn(ctx, canvas, "Late fee", Rent, settelement, DiscountInput, TaxPercent, YHeight);
                }

                /////////////////////////////////////////////////////////////////////////////////////////////////////////////////// Total
                var tTotal = calculateTotalAmountPerDay(parseFloat('@Model.ContractSettlement?.CrCasRenterContractBasicDailyRent'), parseFloat(FeesTammValue), parseFloat(AdvantagesValue), parseFloat(privateDriverValue), parseFloat(choicesValue), parseFloat(additionalDriverValue), parseFloat(additionalValue), parseFloat(AdditionalHoursValueTotal), parseFloat(AdditionalKmVal), settelement, daysNo);
                var tTotalDiscount = calculateTotalDiscountAmount(tTotal, DiscountInput);
                var tTotalAfterDiscount = tTotal - tTotalDiscount;
                var tTotalTax = (tTotalAfterDiscount) * (TaxPercent / 100);
                var TotalAmountMinisPerviousBalance = tTotalTax + tTotalAfterDiscount;
                // // الاجمالي
                ctx.fillText(tTotal.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 }), canvas.width - 1510, 2255);
                ctx.fillText(tTotalDiscount.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 }), canvas.width - 1200, 2255);
                ctx.fillText(tTotalAfterDiscount.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 }), canvas.width - 910, 2255);
                ctx.fillText(tTotalTax.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 }), canvas.width - 620, 2255);
                ctx.fillText(TotalAmountMinisPerviousBalance.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 }), canvas.width - 310, 2255);
                // director and renter and user
                ctx.fillText(namesAndSignatures.directorOfLessor, canvas.width - 1980, 3050);
                ctx.fillText(namesAndSignatures.userName, canvas.width - 1275, 3050);
                ctx.fillText(namesAndSignatures.directorOfBranch, canvas.width - 2020, 3190);
                ctx.fillText(namesAndSignatures.renterName, canvas.width - 1275, 3180);
                if (namesAndSignatures.signatureImg4) {
                    ctx.drawImage(namesAndSignatures.signatureImg4, canvas.width - 1250, 3125, 200, 100);
                }
                canvas.toBlob(async function (blob) {
                    formData.append("file", blob, "En_Invoice_Receipt.png"); // Append the modified image blob with a filename
                    var message = `Dear / ${RenterName}, you can review the invoice by downloading the attached file.`
                    createPdfAndSendToWhatsApp(null, InvoiceAccountNo, blob, "SavePdfEnInvoice", "en");
                }, 'image/png');
            };
            img.src = URL.createObjectURL(blob);
        };
        function calculateAndDrawEn(ctx, canvas, itemName, itemValue, days, discountInput, taxPercent, yHeight) {
            var itemTotal = parseFloat(itemValue) * parseInt(days);
            var discountValue = itemTotal * (parseFloat(discountInput) / 100);
            var totalAfterDiscount = itemTotal - discountValue;
            var taxValue = totalAfterDiscount * (taxPercent / 100);
            var totalActual = parseFloat(totalAfterDiscount) + parseFloat(taxValue);
            ctx.fillText(itemName, canvas.width - 2300, yHeight);
            ctx.fillText(itemValue.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 }), canvas.width - 1950, yHeight);
            ctx.fillText(days, canvas.width - 1700, yHeight);
            ctx.fillText(itemTotal.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 }), canvas.width - 1510, yHeight);
            ctx.fillText(discountValue.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 }), canvas.width - 1200, yHeight);
            ctx.fillText(totalAfterDiscount.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 }), canvas.width - 910, yHeight);
            ctx.fillText(taxValue.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 }), canvas.width - 620, yHeight);
            ctx.fillText(totalActual.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 }), canvas.width - 310, yHeight);
            return yHeight + 84; // Update yHeight for the next item
        }
        function calculateTotalAmountPerDay(rent, auth, feature, privateDriver, choices, addDriver, additionals, addHours, addKm, settelement, days) {
            var daysNo = parseFloat(days);
            var total = (rent * daysNo) + auth + (feature * daysNo) + (privateDriver * daysNo) + (choices * daysNo) + addDriver + additionals + addHours + addKm + (rent * settelement);
            return total;
        }
        function calculateTotalDiscountAmount(total, discount) {
            var discountValue = parseFloat(discount) / 100;
            var totalDiscount = total * discountValue;
            return totalDiscount;
        }

    </script>
    <script>
        //Catch Receipts
        const sendArCatchReceiptToWhatsApp = async () => {
            const imageLessor = "lessorInfo?.CrMasUserInformationLessorNavigation?.CrMasLessorImage.CrMasLessorImageArExternalCatchReceipt";
            const imagePath = imageLessor.replace('~', '');
            const dates = getFormattedDatesMiliadiAndHijri("ar");
            const miladiDateString = dates.miladiDate;
            const hijriDateString = dates.hijriDate;
            // First In Page
            const contractNo = "@Model.ContractSettlement?.CrCasRenterContractBasicNo";
            const AccountCatchReceiptNo = "@ViewBag.AccountCatchReceiptNo";
            var selectElement = document.getElementById("ContractSettlement_PaymentMethod");
            var selectedOption = selectElement.options[selectElement.selectedIndex];
            // Get the text of the selected option
            const selectedText = selectedOption.textContent || selectedOption.innerText;
            var selectedArabicName = selectedOption.dataset.ar;
            if (selectedArabicName == "" || selectedArabicName == undefined || selectedArabicName == NaN) {
                selectedArabicName = "";
            }
            //get Data Director lessor and branch and get renter and user
            var reasonPayment = document.getElementById("ContractSettlement_ReasonsPayment").value;
            var AmountPayedInput = document.getElementById("AmountPayed").value;
            var AmountPayed = parseFloat(AmountPayedInput).toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 });
            if (AmountPayed == "" || AmountPayed == undefined || AmountPayed == NaN) {
                AmountPayed = "0.00";
            }
            const [beforeDecimal, afterDecimal] = splitNumberbeforeAndafterDecimal(AmountPayed);
            const numberToText = await dataChanged(AmountPayed);
            const [firstHalf, secondHalf] = splitTextInHalf(numberToText.ar_concatenate)
            var phaseFor = `${contractNo}  دفعة تحت الحساب لعقد ايجار السيارة لعقد`;
            // Signture Image
            var namesAndSignatures = await loadArSignatures();

            //////////////////////////////////////////////////////////////////////////////////////////////////////////
            let canvas_width = 2481;
            let texts = [
                { content: AccountCatchReceiptNo, x: canvas_width - 1860, y: 624 },
                { content: hijriDateString, x: canvas_width - 300, y: 624 },
                { content: miladiDateString, x: canvas_width - 305, y: 685 },
                { content: beforeDecimal, x: canvas_width - 2005, y: 720 },
                { content: afterDecimal, x: canvas_width - 1940, y: 720 },
                { content: namesAndSignatures.renterName, x: canvas_width - 480, y: 905 },
                { content: firstHalf, x: canvas_width - 380, y: 1005 },
                { content: secondHalf, x: canvas_width - 380, y: 1070 },
                { content: selectedArabicName, x: canvas_width - 400, y: 1185 },
                { content: phaseFor, x: canvas_width - 390, y: 1285 },
                { content: reasonPayment, x: canvas_width - 350, y: 1385 },

                { content: namesAndSignatures.directorOfLessor, x: canvas_width - 320, y: 1568 },
                { content: namesAndSignatures.userName, x: canvas_width - 1120, y: 1568 },
                { content: namesAndSignatures.directorOfBranch, x: canvas_width - 290, y: 1705 },
                { content: namesAndSignatures.RenterName, x: canvas_width - 1120, y: 1705 },

            ];
            let signatures = [
                { content: namesAndSignatures.signatureImg1, x: canvas_width - 400, y: 1495, width: 200, height: 100 },
                { content: namesAndSignatures.signatureImg2, x: canvas_width - 1170, y: 1495, width: 200, height: 100 },
                { content: namesAndSignatures.signatureImg3, x: canvas_width - 400, y: 1630, width: 200, height: 100 },
                { content: namesAndSignatures.signatureImg4, x: canvas_width - 1170, y: 1630, width: 200, height: 100 },
            ];
            let textStyleOptions = {
                fontWeight: "bold",
                fontSize: 37,
                fontFamily: "serif",
                textColor: "rgba(0, 0, 0)",
                textAlign: "right"
            };
            const responseImage = await fetch(imagePath);
            const blob = await responseImage.blob();
            let canvas = document.createElement("canvas");
            var ctx = canvas.getContext("2d");
            var img = new Image();
            img.crossOrigin = "Anonymous";
            img.onload = function () {
                let loadedImageWidth = img.width;
                let loadedImageHeight = img.height;

                canvas.width = loadedImageWidth;
                canvas_width = loadedImageWidth;
                canvas.height = loadedImageHeight;

                ctx.drawImage(img, 0, 0);

                texts.forEach(text => {
                    ctx.font = `${textStyleOptions.fontWeight} ${textStyleOptions.fontSize}px ${textStyleOptions.fontFamily}`;
                    ctx.fillStyle = textStyleOptions.textColor;

                    let textWidth = ctx.measureText(text.content).width;

                    let x = text.x;
                    if (textStyleOptions.textAlign === "right") {
                        x -= textWidth;
                    } else if (textStyleOptions.textAlign === "center") {
                        x -= textWidth / 2;
                    }

                    ctx.fillText(text.content, x, text.y);

                });

                signatures.forEach(signature => {
                    let signatureWidth = ctx.measureText(signature.content).width;
                    let x = signature.x;
                    if (textStyleOptions.textAlign === "right") {
                        x -= signatureWidth;
                    } else if (textStyleOptions.textAlign === "center") {
                        x -= signatureWidth / 2;
                    }
                    if (signature.content) {
                        ctx.drawImage(signature.content, x, signature.y, signature.width, signature.height);
                    }
                });

                canvas.toBlob(async function (blob) {
                    createPdfAndSendToWhatsApp(AccountCatchReceiptNo, null, blob, "SavePdfArReceipt", "ar");
                }, 'image/png');
            };
            img.src = URL.createObjectURL(blob);
        };
        const sendEnCatchReceiptToWhatsApp = async () => {
            const imageLessor = "lessorInfo?.CrMasUserInformationLessorNavigation?.CrMasLessorImage.CrMasLessorImageEnExternalCatchReceipt";
            const imagePath = imageLessor.replace('~', '');
            const dates = getFormattedDatesMiliadiAndHijri("en");
            const miladiDateString = dates.miladiDate;
            const hijriDateString = dates.hijriDate;
            // First In Page
            const contractNo = "@Model.ContractSettlement?.CrCasRenterContractBasicNo";
            const AccountCatchReceiptNo = "@ViewBag.AccountCatchReceiptNo";
            var selectElement = document.getElementById("ContractSettlement_PaymentMethod");
            var selectedOption = selectElement.options[selectElement.selectedIndex];
            // Get the text of the selected option
            const selectedText = selectedOption.textContent || selectedOption.innerText;
            var selectedEnglishName = selectedOption.dataset.en;
            if (selectedEnglishName == "" || selectedEnglishName == undefined || selectedEnglishName == NaN) {
                selectedEnglishName = "";
            }
            var reasonPayment = document.getElementById("ContractSettlement_ReasonsPayment").value;
            var AmountPayedInput = document.getElementById("AmountPayed").value;
            var AmountPayed = parseFloat(AmountPayedInput).toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 });
            if (AmountPayed == "" || AmountPayed == undefined || AmountPayed == NaN) {
                AmountPayed = "0.00";
            }
            const numberToText = await dataChanged(AmountPayed);
            // Signture Image
            var namesAndSignatures = await loadEnSignatures();
            // Get Image And Text On
            // Read the image file as a Blob
            const responseImage = await fetch(imagePath);
            const blob = await responseImage.blob();
            var canvas = document.createElement("canvas");
            var ctx = canvas.getContext("2d");
            var img = new Image();
            img.crossOrigin = "Anonymous";
            img.onload = function () {
                canvas.width = img.width;
                canvas.height = img.height;

                ctx.drawImage(img, 0, 0);
                ctx.font = "bold 33px serif";
                ctx.textAlign = "left";
                ctx.fillStyle = "black";


                ctx.fillText(miladiDateString, canvas.width - 2200, 700);
                ctx.fillText(hijriDateString, canvas.width - 2220, 630);

                ctx.font = "bold 37px serif";
                ctx.fillText(AccountCatchReceiptNo, canvas.width - 620, 625);

                let cleanedValueString = AmountPayed.replace(/,/g, "");

                // Split the cleaned string by the decimal point
                let parts = cleanedValueString.split('.');

                // Extract the number before the decimal point
                let beforeDecimal = parts[0];

                // Extract the number after the decimal point
                let afterDecimal = parts.length > 1 ? parts[1] : "";

                // If no decimal part, set it to "00"
                if (afterDecimal === "") {
                    afterDecimal = "00";
                } else {
                    // Convert the extracted strings back to integers if needed
                    afterDecimal = parseInt(afterDecimal).toString().padEnd(2, '0');
                }
                // Convert the extracted strings back to integers if needed
                let beforeDecimalNumber = parseInt(beforeDecimal);
                let afterDecimalNumber = afterDecimal;
                // Assuming `ctx` is your canvas context
                ctx.fillText(beforeDecimalNumber, canvas.width - 450, 720);
                ctx.fillText(afterDecimalNumber, canvas.width - 270, 720);

                ctx.fillText(namesAndSignatures.renterName, canvas.width - 2050, 900);
                ctx.fillText(numberToText.en_concatenate, canvas.width - 2100, 1013);
                ctx.fillText(selectedEnglishName, canvas.width - 2000, 1200);

                // //Total
                var phaseFor = `Payment to extend the car rental contract ${contractNo}`;
                ctx.fillText(phaseFor, canvas.width - 2250, 1310);
                ctx.fillText(reasonPayment, canvas.width - 2050, 1420);

                ctx.font = "bold 37px serif";
                // Draw director of lessor
                ctx.fillText(namesAndSignatures.directorOfLessor, canvas.width - 1990, 1560);
                if (namesAndSignatures.signatureImg1) {
                    ctx.drawImage(namesAndSignatures.signatureImg1, canvas.width - 1700, 1505, 200, 100);
                }

                // Draw user
                ctx.fillText(namesAndSignatures.userName, canvas.width - 1300, 1560);
                if (namesAndSignatures.signatureImg2) {
                    ctx.drawImage(namesAndSignatures.signatureImg2, canvas.width - 900, 1505, 200, 100);
                }

                // Draw director of branch
                ctx.fillText(namesAndSignatures.directorOfBranch, canvas.width - 2020, 1690);
                if (namesAndSignatures.signatureImg3) {
                    ctx.drawImage(namesAndSignatures.signatureImg3, canvas.width - 1700, 1630, 200, 100);
                }

                // Draw renter
                ctx.fillText(namesAndSignatures.renterName, canvas.width - 1300, 1690);
                if (namesAndSignatures.signatureImg4) {
                    ctx.drawImage(namesAndSignatures.signatureImg4, canvas.width - 900, 1630, 200, 100);
                }

                canvas.toBlob(async function (blob) {
                    createPdfAndSendToWhatsApp(AccountCatchReceiptNo, null, blob, "SavePdfEnReceipt", "en");
                }, 'image/png');
            };
            img.src = URL.createObjectURL(blob);
        };
        // Payment Receipts
        const sendArPaymentReceiptToWhatsApp = async () => {
            const imageLessor = "lessorInfo?.CrMasUserInformationLessorNavigation?.CrMasLessorImage.CrMasLessorImageArExternalBillExchangeReceipt";
            const imagePath = imageLessor.replace('~', '');
            const dates = getFormattedDatesMiliadiAndHijri("ar");
            const miladiDateString = dates.miladiDate;
            const hijriDateString = dates.hijriDate;
            // First In Page
            const contractNo = "@Model.ContractSettlement?.CrCasRenterContractBasicNo";
            const AccountPaymentReceiptNo = "@ViewBag.AccountPaymentReceiptNo";
            var selectedArabicName = "نقدا";
            var reasonPayment = document.getElementById("ContractSettlement_ReasonsPayment").value;
            var AmountPayedInput = document.getElementById("AmountPayed").value;
            var AmountPayed = parseFloat(AmountPayedInput).toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 });
            if (AmountPayed == "" || AmountPayed == undefined || AmountPayed == NaN) {
                AmountPayed = "0.00";
            }
            const [beforeDecimal, afterDecimal] = splitNumberbeforeAndafterDecimal(AmountPayed);
            const numberToText = await dataChanged(AmountPayed);
            const [firstHalf, secondHalf] = splitTextInHalf(numberToText.ar_concatenate)
            var phaseFor = `${contractNo}  دفعة تحت الحساب لعقد ايجار السيارة لعقد`;
            // Signture Image
            var namesAndSignatures = await loadArSignatures();
            //////////////////////////////////////////////////////////////////////////////////////////////////////////


            let canvas_width = 2481;
            let texts = [
                { content: AccountPaymentReceiptNo, x: canvas_width - 1860, y: 624 },
                { content: hijriDateString, x: canvas_width - 300, y: 624 },
                { content: miladiDateString, x: canvas_width - 305, y: 685 },
                { content: beforeDecimal, x: canvas_width - 2005, y: 720 },
                { content: afterDecimal, x: canvas_width - 1940, y: 720 },
                { content: namesAndSignatures.renterName, x: canvas_width - 400, y: 905 },
                { content: firstHalf, x: canvas_width - 380, y: 1005 },
                { content: secondHalf, x: canvas_width - 380, y: 1070 },
                { content: selectedArabicName, x: canvas_width - 400, y: 1185 },
                { content: phaseFor, x: canvas_width - 390, y: 1285 },
                { content: reasonPayment, x: canvas_width - 350, y: 1385 },

                { content: namesAndSignatures.directorOfLessor, x: canvas_width - 320, y: 1568 },
                { content: namesAndSignatures.userName, x: canvas_width - 1120, y: 1568 },
                { content: namesAndSignatures.directorOfBranch, x: canvas_width - 290, y: 1705 },
                { content: namesAndSignatures.RenterName, x: canvas_width - 1120, y: 1705 },

            ];
            let signatures = [
                { content: namesAndSignatures.signatureImg1, x: canvas_width - 400, y: 1495, width: 200, height: 100 },
                { content: namesAndSignatures.signatureImg2, x: canvas_width - 1170, y: 1495, width: 200, height: 100 },
                { content: namesAndSignatures.signatureImg3, x: canvas_width - 400, y: 1630, width: 200, height: 100 },
                { content: namesAndSignatures.signatureImg4, x: canvas_width - 1170, y: 1630, width: 200, height: 100 },
            ];
            let textStyleOptions = {
                fontWeight: "bold",
                fontSize: 37,
                fontFamily: "serif",
                textColor: "rgba(0, 0, 0)",
                textAlign: "right"
            };
            const responseImage = await fetch(imagePath);
            const blob = await responseImage.blob();
            let canvas = document.createElement("canvas");
            var ctx = canvas.getContext("2d");
            var img = new Image();
            img.crossOrigin = "Anonymous";
            img.onload = function () {
                let loadedImageWidth = img.width;
                let loadedImageHeight = img.height;
                canvas.width = loadedImageWidth;
                canvas_width = loadedImageWidth;
                canvas.height = loadedImageHeight;
                ctx.drawImage(img, 0, 0);
                texts.forEach(text => {
                    ctx.font = `${textStyleOptions.fontWeight} ${textStyleOptions.fontSize}px ${textStyleOptions.fontFamily}`;
                    ctx.fillStyle = textStyleOptions.textColor;

                    let textWidth = ctx.measureText(text.content).width;

                    let x = text.x;
                    if (textStyleOptions.textAlign === "right") {
                        x -= textWidth;
                    } else if (textStyleOptions.textAlign === "center") {
                        x -= textWidth / 2;
                    }

                    ctx.fillText(text.content, x, text.y);

                });

                signatures.forEach(signature => {
                    let signatureWidth = ctx.measureText(signature.content).width;
                    let x = signature.x;
                    if (textStyleOptions.textAlign === "right") {
                        x -= signatureWidth;
                    } else if (textStyleOptions.textAlign === "center") {
                        x -= signatureWidth / 2;
                    }
                    if (signature.content) {
                        ctx.drawImage(signature.content, x, signature.y, signature.width, signature.height);
                    }
                });

                canvas.toBlob(async function (blob) {
                    createPdfAndSendToWhatsApp(AccountPaymentReceiptNo, null, blob, "SavePdfArReceipt", "ar");
                }, 'image/png');
            };
            img.src = URL.createObjectURL(blob);
        };
        const sendEnPaymentReceiptToWhatsApp = async () => {
            const imageLessor = "lessorInfo?.CrMasUserInformationLessorNavigation?.CrMasLessorImage.CrMasLessorImageEnExternalBillExchangeReceipt";
            const imagePath = imageLessor.replace('~', '');
            const dates = getFormattedDatesMiliadiAndHijri("en");
            const miladiDateString = dates.miladiDate;
            const hijriDateString = dates.hijriDate;
            // First In Page
            const contractNo = "@Model.ContractSettlement?.CrCasRenterContractBasicNo";
            const AccountPaymentReceiptNo = "@ViewBag.AccountPaymentReceiptNo";
            var selectedEnglishName = "CASH";
            var reasonPayment = document.getElementById("ContractSettlement_ReasonsPayment").value;
            var AmountPayedInput = document.getElementById("AmountPayed").value;
            var AmountPayed = parseFloat(AmountPayedInput).toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 });
            if (AmountPayed == "" || AmountPayed == undefined || AmountPayed == NaN) {
                AmountPayed = "0.00";
            }
            const numberToText = await dataChanged(AmountPayed);
            // Signture Image
            var namesAndSignatures = await loadEnSignatures();

            // Get Image And Text On
            // Read the image file as a Blob
            const responseImage = await fetch(imagePath);
            const blob = await responseImage.blob();
            var canvas = document.createElement("canvas");
            var ctx = canvas.getContext("2d");
            var img = new Image();
            img.crossOrigin = "Anonymous";
            img.onload = function () {
                canvas.width = img.width;
                canvas.height = img.height;

                ctx.drawImage(img, 0, 0);
                ctx.font = "bold 33px serif";
                ctx.textAlign = "left";
                ctx.fillStyle = "black";


                ctx.fillText(miladiDateString, canvas.width - 2200, 700);
                ctx.fillText(hijriDateString, canvas.width - 2220, 630);

                ctx.font = "bold 37px serif";
                ctx.fillText(AccountPaymentReceiptNo, canvas.width - 620, 625);

                let cleanedValueString = AmountPayed.replace(/,/g, "");

                // Split the cleaned string by the decimal point
                let parts = cleanedValueString.split('.');

                // Extract the number before the decimal point
                let beforeDecimal = parts[0];

                // Extract the number after the decimal point
                let afterDecimal = parts.length > 1 ? parts[1] : "";

                // If no decimal part, set it to "00"
                if (afterDecimal === "") {
                    afterDecimal = "00";
                } else {
                    // Convert the extracted strings back to integers if needed
                    afterDecimal = parseInt(afterDecimal).toString().padEnd(2, '0');
                }

                // Convert the extracted strings back to integers if needed
                let beforeDecimalNumber = parseInt(beforeDecimal);
                let afterDecimalNumber = afterDecimal;

                // Assuming `ctx` is your canvas context
                ctx.fillText(beforeDecimalNumber, canvas.width - 450, 720);
                ctx.fillText(afterDecimalNumber, canvas.width - 270, 720);

                ctx.fillText(namesAndSignatures.renterName, canvas.width - 2170, 900);
                ctx.fillText(numberToText.en_concatenate, canvas.width - 2100, 1013);
                ctx.fillText(selectedEnglishName, canvas.width - 2000, 1200);

                // //Total
                var phaseFor = `Payment to extend the car rental contract ${contractNo}`;
                ctx.fillText(phaseFor, canvas.width - 2250, 1310);
                ctx.fillText(reasonPayment, canvas.width - 2050, 1420);

                ctx.font = "bold 37px serif";

                // Draw director of lessor
                ctx.fillText(namesAndSignatures.directorOfLessor, canvas.width - 1990, 1560);
                if (namesAndSignatures.signatureImg1) {
                    ctx.drawImage(namesAndSignatures.signatureImg1, canvas.width - 1700, 1505, 200, 100);
                }

                // Draw user
                ctx.fillText(namesAndSignatures.userName, canvas.width - 1300, 1560);
                if (namesAndSignatures.signatureImg2) {
                    ctx.drawImage(namesAndSignatures.signatureImg2, canvas.width - 900, 1505, 200, 100);
                }

                // Draw director of branch
                ctx.fillText(namesAndSignatures.directorOfBranch, canvas.width - 2020, 1690);
                if (namesAndSignatures.signatureImg3) {
                    ctx.drawImage(namesAndSignatures.signatureImg3, canvas.width - 1700, 1630, 200, 100);
                }

                // Draw renter
                ctx.fillText(namesAndSignatures.renterName, canvas.width - 1300, 1690);
                if (namesAndSignatures.signatureImg4) {
                    ctx.drawImage(namesAndSignatures.signatureImg4, canvas.width - 900, 1630, 200, 100);
                }

                canvas.toBlob(async function (blob) {
                    createPdfAndSendToWhatsApp(AccountPaymentReceiptNo, null, blob, "SavePdfEnReceipt", "en");
                }, 'image/png');
            };
            img.src = URL.createObjectURL(blob);
        };
    </script>
    <script type="text/javascript">
        function createPdfAndSendToWhatsApp(receiptNo, invoiceNo, imageBlob, InputPdf, language) {
            var doc = new jsPDF('p', 'pt', 'a4', true);
            const pageWidth = doc.internal.pageSize.getWidth();
            const pageHeight = doc.internal.pageSize.getHeight();
            try {
                // Convert the image blob to a base64 DataURL
                const reader = new FileReader();
                reader.onload = function () {
                    const imageDataUrl = reader.result;
                    // Add the image to the PDF
                    const imgWidth = pageWidth; // Width of the image in the PDF
                    const imgHeight = pageHeight; // Height of the image in the PDF
                    const imgXPos = 0; // X position of the image (left edge)
                    const imgYPos = 0; // Y position of the image (top edge)
                    doc.addImage(imageDataUrl, 'PNG', imgXPos, imgYPos, imgWidth, imgHeight, '', 'FAST');
                    // Convert the PDF to a blob
                    const pdfBlob = doc.output('blob');
                    const blobUrl = URL.createObjectURL(pdfBlob);
                    const pdfBase64 = doc.output('datauristring');
                    // Set the base64-encoded PDF to the hidden input field
                    document.getElementById(InputPdf).value = pdfBase64;
                    // Prepare form data with PDF
                    if ("@requestCulture?.RequestCulture.UICulture.Name" == "en-US" && InputPdf != "" && InputPdf != null && language == "en") {
                        if (InputPdf == "SavePdfEnInvoice") {
                            document.getElementById('ContractSettlement_InitialInvoiceNo').value = invoiceNo;
                        }
                        else {
                            document.getElementById('ContractSettlement_AccountReceiptNo').value = receiptNo;
                        }
                    }
                    else if ("@requestCulture?.RequestCulture.UICulture.Name" == "ar-EG" && InputPdf != "" && InputPdf != null && language == "ar") {
                        if (InputPdf == "SavePdfArInvoice") {
                            document.getElementById('ContractSettlement_InitialInvoiceNo').value = invoiceNo;
                        }
                        else {
                            document.getElementById('ContractSettlement_AccountReceiptNo').value = receiptNo;
                        }
                    }
                };
                reader.readAsDataURL(imageBlob); // Start reading the image blob
            } catch (error) {
                console.error('Error adding image to PDF:', error);
            }
        }
    </script>

    <!--Create Ar Contract Pdf-->
    <script>
        function loadImage(src) {
            return new Promise((resolve) => {
                const img = new Image();
                img.onload = () => resolve(img); // Resolve with the loaded image
                img.onerror = () => resolve(); // Resolve with an empty string if loading fails
                img.src = src;
            });
        }
        async function loadArSignatures() {
            var renterName = "@Html.Raw(Model.ContractSettlement?.CrCasRenterContractBasic5?.CrCasRenterLessorNavigation?.CrMasRenterInformationArName)";
            renterSignature = renterSignature.replace('~', '');
            var userName = decodeHTMLEntities("@user.CrMasUserInformationArName");
            var userSignature = decodeHTMLEntities("@user.CrMasUserInformationSignature").replace('~', '');
            var directorOfLessor = decodeHTMLEntities("@user.CrMasUserInformationLessorNavigation.CrMasLessorInformationDirectorArName");
            var directorOfLessorSignature = decodeHTMLEntities("lessorInfo?.CrMasUserInformationLessorNavigation?.CrMasLessorImage.CrMasLessorImageSignatureDirector").replace('~', '');
            var directorOfBranch = decodeHTMLEntities("@Model.CrCasBranchInformation?.CrCasBranchInformationDirectorArName");
            var directorOfBranchSignature = decodeHTMLEntities("@Model.CrCasBranchInformation?.CrCasBranchInformationDirectorSignature").replace('~', '');

            const promises = [];

            // Check each signature and push to promises if it exists
            if (directorOfLessorSignature) {
                promises.push(loadImage(directorOfLessorSignature));
            }

            if (userSignature) {
                promises.push(loadImage(userSignature));
            }

            if (directorOfBranchSignature) {
                promises.push(loadImage(directorOfBranchSignature));
            }

            if (renterSignature) {
                promises.push(loadImage(renterSignature));
            }

            // Wait for all valid signatures to load
            const signatureImages = await Promise.all(promises);

            return {
                renterName: renterName || '',
                userName: userName || '',
                directorOfLessor: directorOfLessor || '',
                directorOfBranch: directorOfBranch || '',
                signatureImg1: signatureImages[0] || '', // Use an empty string if not a valid image
                signatureImg2: signatureImages[1] || '',
                signatureImg3: signatureImages[2] || '',
                signatureImg4: signatureImages[3] || ''
            };
        }
        function DrawArNameAndSignture(signatures, ctx, canvas) {
            // Draw director of lessor
            ctx.fillText(signatures.directorOfLessor, canvas.width - 315, 3055);
            if (signatures.signatureImg1) {
                ctx.drawImage(signatures.signatureImg1, canvas.width - 820, 2980, 200, 100);
            }

            // Draw user
            ctx.fillText(signatures.userName, canvas.width - 1120, 3055);
            if (signatures.signatureImg2) {
                ctx.drawImage(signatures.signatureImg2, canvas.width - 1620, 2980, 200, 100);
            }

            // Draw director of branch
            ctx.fillText(signatures.directorOfBranch, canvas.width - 280, 3190);
            if (signatures.signatureImg3) {
                ctx.drawImage(signatures.signatureImg3, canvas.width - 820, 3120, 200, 100);
            }

            // Draw renter
            ctx.fillText(signatures.renterName, canvas.width - 1140, 3190);
            if (signatures.signatureImg4) {
                ctx.drawImage(signatures.signatureImg4, canvas.width - 1620, 3120, 200, 100);
            }
        }

        //Page1
        const getArDataOfPage1 = () => {
            // Contract Info
            const contractNo = decodeHTMLEntities("@Model.ContractSettlement?.CrCasRenterContractBasicNo") || "";
            var dateTimeNow = decodeHTMLEntities('@DateTime.Now.ToString("yyyy-MM-ddTHH:mm:ss.fffK")');
            const miladiDate = new Date(dateTimeNow);
            const date = @Html.Raw(Json.Serialize(Model.ContractSettlement?.CrCasRenterContractBasicExpectedStartDate));
            const startDate = new Date(date);
            // const endDate = new Date($("#contract_real_endTime").val());
            // Get the date value from the input field
            const dateValue = $("#contract_real_endTime").val();
            // Get the time portion of the current date
            const currentDate = new Date(dateTimeNow);
            const currentTime = currentDate.toLocaleTimeString([], { hour12: false });
            // Combine the date value with the current time
            const combinedDateTimeString = dateValue + ' ' + currentTime;
            // Create a new Date object with the combined date and time
            const endDate = new Date(combinedDateTimeString);
            const fromBranchName = decodeHTMLEntities("@ViewBag.ArBranch") || "";
            const toBranchName = decodeHTMLEntities("@Model.CrCasBranchInformation.CrCasBranchInformationArShortName") || "";
            return {
                contractNo: contractNo || "",
                miladiDateString: getFormatDate(miladiDate) || "",
                startMiladiDate: getFormatDate(startDate) || "",
                endMiladiDate: getFormatDate(endDate) || "",
                currentHijriDate: formatHijriDate(miladiDate) || "",
                startHijriDate: formatHijriDate(startDate) || "",
                endHijriDate: formatHijriDate(endDate) || "",
                status: "مغلق",
                fromBranchName: fromBranchName,
                toBranchName: toBranchName,
            };
        };
        const CreateArPageContract1 = async () => {
            return new Promise(async (resolve, reject) => {
                try {
                    var image = "lessorInfo?.CrMasUserInformationLessorNavigation?.CrMasLessorImage.CrMasLessorImageArSettlementContractPage";
                    var imagePath = image.replace('~', '');
                    // get data For Page 1
                    var Data = getArDataOfPage1();
                    var signtures = await loadArSignatures();
                    console.log("imagePath", imagePath);
                    console.log("signtures", signtures);

                    // Last Director and manger and user and renter with signture
                    // Text on Image
                    // Get Image And Text On
                    // Read the image file as a Blob
                    const responseImage = await fetch(imagePath);
                    const blob = await responseImage.blob();
                    var canvas = document.createElement("canvas");
                    var ctx = canvas.getContext("2d");
                    var url;
                    var img = new Image();
                    img.crossOrigin = "Anonymous";
                    img.onload = function () {
                        canvas.width = img.width;
                        canvas.height = img.height;

                        ctx.drawImage(img, 0, 0);

                        ctx.font = "bold 35px serif";
                        ctx.textAlign = "right";
                        ctx.fillStyle = "black";
                        //Contract
                        ctx.fillText(Data.contractNo, canvas.width - 355, 760);
                        ctx.fillText(Data.currentHijriDate, canvas.width - 300, 839);
                        ctx.fillText(Data.miladiDateString, canvas.width - 1120, 839);
                        ctx.fillText(Data.startHijriDate, canvas.width - 380, 915);
                        ctx.fillText(Data.startMiladiDate, canvas.width - 1120, 915);
                        ctx.fillText(Data.endHijriDate, canvas.width - 430, 995);
                        ctx.fillText(Data.endMiladiDate, canvas.width - 1120, 995);
                        ctx.fillText(Data.status, canvas.width - 400, 1075);
                        ctx.fillText(Data.fromBranchName, canvas.width - 1240, 1488);
                        ctx.fillText(Data.toBranchName, canvas.width - 400, 1488);
                        // Last
                        DrawArNameAndSignture(signtures, ctx, canvas);
                        canvas.toBlob(async function (blob) {
                            // Return the blob
                            resolve(blob);
                        }, "image/png");
                    };
                    img.src = imagePath;
                } catch (error) {
                    reject(error);
                }
            });
        };
        //page 2
        // Page 2 Expenses
        const getArDataOfPage2 = () => {

            var ExpensesReasons = $("#Expense-statement-input").val();
            var ExpensesValue = $("#expensesValue-input").val();
            if (ExpensesValue) {
                // Convert to a localized string with two decimal places
                ExpensesValue = parseFloat(ExpensesValue).toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 });
            } else {
                ExpensesValue = "0.00";
            }

            return {
                expensesValue: ExpensesValue,
                expensesReasons: ExpensesReasons || ""
            };
        };
        function GetArExpensesPicture() {
            // Array to store the Image objects
            const images = [];
            if (imgExpenses) {
                imgExpenses.forEach(file => {
                    // Create a new Image object
                    const img = new Image();

                    // Set the src attribute of the Image object to the file URL
                    img.src = URL.createObjectURL(file.f);

                    // Push the Image object to the images array
                    images.push(img);
                });
            }
            // Return the array of Image objects
            return images;
        }
        const CreateArPageContract2 = async () => {
            return new Promise(async (resolve, reject) => {
                try {
                    var image = "lessorInfo?.CrMasUserInformationLessorNavigation?.CrMasLessorImage.CrMasLessorImageArSettlementContractExpenses";
                    var imagePath = image.replace('~', '');
                    // get data For Page 2
                    var Data = getArDataOfPage2();
                    var signtures = await loadArSignatures();
                    const [firstHalf, secondHalf] = splitTextInHalf(Data.expensesReasons);
                    var ExpensesPicture = GetArExpensesPicture();
                    // Text on Image
                    // Get Image And Text On
                    // Read the image file as a Blob
                    const responseImage = await fetch(imagePath);
                    const blob = await responseImage.blob();
                    var canvas = document.createElement("canvas");
                    var ctx = canvas.getContext("2d");
                    var url;
                    var img = new Image();
                    img.crossOrigin = "Anonymous";
                    img.onload = function () {
                        canvas.width = img.width;
                        canvas.height = img.height;

                        ctx.drawImage(img, 0, 0);

                        ctx.font = "bold 35px serif";
                        ctx.textAlign = "right";
                        ctx.fillStyle = "black";
                        //Expenses
                        ctx.fillText(Data.expensesValue, canvas.width - 290, 845);
                        ctx.fillText(firstHalf, canvas.width - 290, 950);
                        ctx.fillText(secondHalf, canvas.width - 290, 1020);
                        // Pictures
                        if (ExpensesPicture[0]) {
                            ctx.drawImage(ExpensesPicture[0], canvas.width - 1050, 1360, 700, 600);
                        }
                        if (ExpensesPicture[1]) {
                            ctx.drawImage(ExpensesPicture[1], canvas.width - 2100, 1360, 700, 600);
                        }
                        if (ExpensesPicture[2]) {
                            ctx.drawImage(ExpensesPicture[2], canvas.width - 1050, 2110, 700, 600);
                        }
                        if (ExpensesPicture[3]) {
                            ctx.drawImage(ExpensesPicture[3], canvas.width - 2100, 2110, 700, 600);

                        }
                        // Last
                        DrawArNameAndSignture(signtures, ctx, canvas);
                        canvas.toBlob(async function (blob) {
                            // Return the blob
                            resolve(blob);
                        }, "image/png");

                    };
                    img.src = imagePath;
                } catch (error) {
                    reject(error);
                }
            });
        };
        // Page 3 compensation
        const getArDataOfPage3 = () => {
            var compensationReasons = $("#compensation-statement-input").val();
            var compensationValue = $("#compensation-input").val();
            if (compensationValue) {
                // Convert to a localized string with two decimal places
                compensationValue = parseFloat(compensationValue).toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 });
            } else {
                compensationValue = "0.00";
            }

            return {
                compensationValue: compensationValue,
                compensationReasons: compensationReasons || ""
            };
        };
        function GetArCompensationPicture() {
            // Array to store the Image objects
            const images = [];
            if (imgCompensations) {
                imgCompensations.forEach(file => {
                    // Create a new Image object
                    const img = new Image();

                    // Set the src attribute of the Image object to the file URL
                    img.src = URL.createObjectURL(file.f);

                    // Push the Image object to the images array
                    images.push(img);
                });
            }
            // Return the array of Image objects
            return images;
        }
        const CreateArPageContract3 = async () => {
            return new Promise(async (resolve, reject) => {
                try {
                    var image = "lessorInfo?.CrMasUserInformationLessorNavigation?.CrMasLessorImage.CrMasLessorImageArSettlementContractCompensation";
                    var imagePath = image.replace('~', '');
                    // get data For Page 2
                    var Data = getArDataOfPage3();
                    var signtures = await loadArSignatures();
                    const [firstHalf, secondHalf] = splitTextInHalf(Data.compensationReasons);
                    var CompensationPicture = GetArCompensationPicture();

                    // Text on Image
                    // Get Image And Text On
                    // Read the image file as a Blob
                    const responseImage = await fetch(imagePath);
                    const blob = await responseImage.blob();
                    var canvas = document.createElement("canvas");
                    var ctx = canvas.getContext("2d");
                    var url;
                    var img = new Image();
                    img.crossOrigin = "Anonymous";
                    img.onload = function () {
                        canvas.width = img.width;
                        canvas.height = img.height;

                        ctx.drawImage(img, 0, 0);

                        ctx.font = "bold 35px serif";
                        ctx.textAlign = "right";
                        ctx.fillStyle = "black";
                        //Compensation
                        ctx.fillText(Data.compensationValue, canvas.width - 290, 845);
                        ctx.fillText(firstHalf, canvas.width - 250, 950);
                        ctx.fillText(secondHalf, canvas.width - 250, 1020);
                        //CompensationPicture
                        if (CompensationPicture[0]) {
                            ctx.drawImage(CompensationPicture[0], canvas.width - 1050, 1360, 700, 600);
                        }
                        if (CompensationPicture[1]) {
                            ctx.drawImage(CompensationPicture[1], canvas.width - 2100, 1360, 700, 600);
                        }
                        if (CompensationPicture[2]) {
                            ctx.drawImage(CompensationPicture[2], canvas.width - 1050, 2110, 700, 600);
                        }
                        if (CompensationPicture[3]) {
                            ctx.drawImage(CompensationPicture[3], canvas.width - 2100, 2110, 700, 600);

                        }
                        // Last
                        DrawArNameAndSignture(signtures, ctx, canvas);
                        canvas.toBlob(async function (blob) {
                            // Return the blob
                            resolve(blob);
                        }, "image/png");
                    };
                    img.src = imagePath;
                } catch (error) {
                    reject(error);
                }
            });
        };
        // Page 4
        function GetArCheckUpItems(ctx, canvas) {
            GetCheckUp();
            var yOffset = 885; // Initial y-offset for name
            var valueXOffset = canvas.width - 1050; // X-offset for value
            var nameXOffset = canvas.width - 500; // X-offset for name
            if (CarCheckUp != null && CarCheckUp.length > 0) {
                CarCheckUp.forEach(function (item, index) {
                    var nameText = item.arName;
                    var checkupReason = item.reasonCheck + (item.reason ? " - " + item.reason : "");
                    // Set fillText for name
                    ctx.fillText(nameText, nameXOffset, yOffset + (index * 70));
                    // Set fillText for value
                    ctx.fillText(checkupReason, valueXOffset, yOffset + (index * 70));
                });
            }
        }
        const CreateArPageContract4 = async () => {
            return new Promise(async (resolve, reject) => {
                try {
                    var image = "lessorInfo?.CrMasUserInformationLessorNavigation?.CrMasLessorImage.CrMasLessorImageArContractPage4";
                    var imagePath = image.replace('~', '');                    // Get ALl Date for Page 4
                    // Last Director and manger and user and renter with signture
                    var signtures = await loadArSignatures();
                    ///////////////////////////////////////////////////////
                    // Text on Image
                    // Get Image And Text On
                    // Read the image file as a Blob
                    const responseImage = await fetch(imagePath);
                    const blob = await responseImage.blob();
                    var canvas = document.createElement("canvas");
                    var ctx = canvas.getContext("2d");
                    var url;
                    var img = new Image();
                    img.crossOrigin = "Anonymous";
                    img.onload = function () {
                        canvas.width = img.width;
                        canvas.height = img.height;
                        ctx.drawImage(img, 0, 0);
                        ctx.font = "bold 35px serif";
                        ctx.textAlign = "right";
                        ctx.fillStyle = "black";
                        GetArCheckUpItems(ctx, canvas);
                        // Last
                        DrawArNameAndSignture(signtures, ctx, canvas);
                        canvas.toBlob(async function (blob) {
                            // Return the blob

                            resolve(blob);
                        }, "image/png");
                    };
                    img.src = imagePath;
                } catch (error) {
                    reject(error);
                }
            });
        };
        // Page5
        function GetArCheckUpPicture() {
            // Array to store the Image objects
            const images = [];

            // Iterate over the CheckUpImages list
            imgCheckUpArray.forEach(file => {
                // Create a new Image object
                const img = new Image();

                // Set the src attribute of the Image object to the file URL
                img.src = URL.createObjectURL(file.f);

                // Push the Image object to the images array
                images.push(img);
            });

            // Return the array of Image objects
            return images;
        }
        const CreateArPageContract5 = async () => {
            return new Promise(async (resolve, reject) => {
                try {
                    var image = "lessorInfo?.CrMasUserInformationLessorNavigation?.CrMasLessorImage.CrMasLessorImageArContractPage5";
                    var imagePath = image.replace('~', '');
                    // Get ALl Date for Page 5
                    var pictures = GetArCheckUpPicture();
                    // Last Director and manger and user and renter with signture
                    var signtures = await loadArSignatures();
                    ///////////////////////////////////////////////////////
                    // Text on Image
                    // Get Image And Text On
                    // Read the image file as a Blob
                    const responseImage = await fetch(imagePath);
                    const blob = await responseImage.blob();
                    var canvas = document.createElement("canvas");
                    var ctx = canvas.getContext("2d");
                    var url;
                    var img = new Image();
                    img.crossOrigin = "Anonymous";
                    img.onload = function () {
                        canvas.width = img.width;
                        canvas.height = img.height;

                        ctx.drawImage(img, 0, 0);

                        ctx.font = "bold 35px serif";
                        ctx.textAlign = "right";
                        ctx.fillStyle = "black";
                        //
                        if (pictures[0]) {
                            ctx.drawImage(pictures[0], canvas.width - 1050, 750, 750, 650);
                        }
                        if (pictures[1]) {
                            ctx.drawImage(pictures[1], canvas.width - 1050, 1500, 750, 650);
                        }
                        if (pictures[2]) {
                            ctx.drawImage(pictures[2], canvas.width - 1050, 2250, 750, 650);
                        }
                        if (pictures[3]) {
                            ctx.drawImage(pictures[3], canvas.width - 2050, 750, 750, 650);
                        }
                        if (pictures[4]) {
                            ctx.drawImage(pictures[4], canvas.width - 2050, 1500, 750, 650);
                        }
                        if (pictures[5]) {
                            ctx.drawImage(pictures[5], canvas.width - 2050, 2250, 750, 650);
                        }
                        // Last
                        DrawArNameAndSignture(signtures, ctx, canvas);
                        canvas.toBlob(async function (blob) {
                            // Return the blob

                            resolve(blob);
                        }, "image/png");
                    };
                    img.src = imagePath;
                } catch (error) {
                    reject(error);
                }
            });
        };
        // Page6
        const CreateArPageContract6 = async () => {
            return new Promise(async (resolve, reject) => {
                try {
                    var image = "lessorInfo?.CrMasUserInformationLessorNavigation?.CrMasLessorImage.CrMasLessorImageArContractPage6";
                    var imagePath = image.replace('~', '');
                    // Get ALl Date for Page 6
                    var pictures = GetArCheckUpPicture();
                    // Last Director and manger and user and renter with signture
                    var signtures = await loadArSignatures();
                    ///////////////////////////////////////////////////////
                    // Text on Image
                    // Get Image And Text On
                    // Read the image file as a Blob
                    const responseImage = await fetch(imagePath);
                    const blob = await responseImage.blob();
                    var canvas = document.createElement("canvas");
                    var ctx = canvas.getContext("2d");
                    var url;
                    var img = new Image();
                    img.crossOrigin = "Anonymous";
                    img.onload = function () {
                        canvas.width = img.width;
                        canvas.height = img.height;

                        ctx.drawImage(img, 0, 0);

                        ctx.font = "bold 35px serif";
                        ctx.textAlign = "right";
                        ctx.fillStyle = "black";
                        ////////////
                        if (pictures[6]) {
                            ctx.drawImage(pictures[6], canvas.width - 1050, 750, 750, 650);
                        }
                        if (pictures[7]) {
                            ctx.drawImage(pictures[7], canvas.width - 1050, 1500, 750, 650);
                        }
                        if (pictures[8]) {
                            ctx.drawImage(pictures[8], canvas.width - 1050, 2250, 750, 650);
                        }
                        if (pictures[9]) {
                            ctx.drawImage(pictures[9], canvas.width - 2050, 750, 750, 650);
                        }
                        if (pictures[10]) {
                            ctx.drawImage(pictures[10], canvas.width - 2050, 1500, 750, 650);
                        }
                        if (pictures[11]) {
                            ctx.drawImage(pictures[11], canvas.width - 2050, 2250, 750, 650);
                        }
                        // Last
                        DrawArNameAndSignture(signtures, ctx, canvas);
                        canvas.toBlob(async function (blob) {
                            // Return the blob

                            resolve(blob);
                        }, "image/png");
                    };
                    img.src = imagePath;
                } catch (error) {
                    reject(error);
                }
            });
        };
        const getPictureAndCreateArPdfContract = async () => {
            try {
                console.log("Starting getPictureAndCreateArPdfContract");
                // Run all CreateEnPageContract functions in parallel and wait for all of them to complete
                const createPageFunctions = [
                    { func: CreateArPageContract1, order: 1 },
                    { func: CreateArPageContract4, order: 4 },
                    { func: CreateArPageContract5, order: 5 },
                ];

                var ExpensesValue = $("#expensesValue-input").val();
                var compensationValue = $("#compensation-input").val();
                // Parse the values to floats
                var parsedExpensesValue = parseFloat(ExpensesValue);
                var parsedCompensationValue = parseFloat(compensationValue);

                // Check conditions and add functions with their orders accordingly
                if (!isNaN(parsedExpensesValue) && parsedExpensesValue > 0) {
                    console.log("ExpensesValue", ExpensesValue);
                    createPageFunctions.push({ func: CreateArPageContract2, order: 2 });
                }
                if (!isNaN(parsedCompensationValue) && parsedCompensationValue > 0) {
                    console.log("compensationValue", compensationValue);
                    createPageFunctions.push({ func: CreateArPageContract3, order: 3 });
                }
                if (imgCheckUpArray.length > 6) {
                    createPageFunctions.push({ func: CreateArPageContract6, order: 6 });
                }

                // Sort the functions by their order
                createPageFunctions.sort((a, b) => a.order - b.order);
                console.log("Sorted createPageFunctions:", createPageFunctions);

                // Execute the functions in order and collect the image blobs
                const imageBlobs = [];
                for (const { func, order } of createPageFunctions) {
                    console.log(`Executing ${func.name} (order ${order})`);
                    // Wait for a specified delay before executing the function
                    try {
                        const blob = await func();
                        imageBlobs.push(blob);
                        console.log(`Successfully executed ${func.name} (order ${order})`);
                    } catch (error) {
                        console.error(`Error executing ${func.name} (order ${order}):`, error);
                        throw error;
                    }
                }
                var existingContractPdfAr = decodeHTMLEntities('@Model.ContractSettlement.CrCasRenterContractBasicPdfFile.Replace("~", "")');
                // Create the PDF contract with the collected image blobs
                await createPdfContract(imageBlobs, "SavePdfArContract", existingContractPdfAr);
            } catch (error) {
                console.error("Error creating Arabic PDF contract:", error);
                throw error; // rethrow the error to be handled by the caller
            }
        };

    </script>
    <!--Create En Contract Pdf-->
    <script>
        async function loadEnSignatures() {
            var renterName = "@Html.Raw(Model.ContractSettlement?.CrCasRenterContractBasic5?.CrCasRenterLessorNavigation?.CrMasRenterInformationEnName)";
            renterSignature = renterSignature.replace('~', '');
            var userName = decodeHTMLEntities("@user.CrMasUserInformationEnName");
            var userSignature = decodeHTMLEntities("@user.CrMasUserInformationSignature").replace('~', '');
            var directorOfLessor = decodeHTMLEntities("@user.CrMasUserInformationLessorNavigation.CrMasLessorInformationDirectorEnName");
            var directorOfLessorSignature = decodeHTMLEntities("lessorInfo?.CrMasUserInformationLessorNavigation?.CrMasLessorImage.CrMasLessorImageSignatureDirector").replace('~', '');
            var directorOfBranch = decodeHTMLEntities("@Model.CrCasBranchInformation.CrCasBranchInformationDirectorEnName");
            var directorOfBranchSignature = decodeHTMLEntities("@Model.CrCasBranchInformation.CrCasBranchInformationDirectorSignature").replace('~', '');
            // Adding console logs for debugging
            console.log("Loading signatures...");
            const promises = [];

            // Check each signature and push to promises if it exists
            if (directorOfLessorSignature) {
                promises.push(loadImage(directorOfLessorSignature));
            }

            if (userSignature) {
                promises.push(loadImage(userSignature));
            }

            if (directorOfBranchSignature) {
                promises.push(loadImage(directorOfBranchSignature));
            }

            if (renterSignature) {
                promises.push(loadImage(renterSignature));
            }

            // Wait for all valid signatures to load
            const signatureImages = await Promise.all(promises);

            return {
                renterName: renterName || '',
                userName: userName || '',
                directorOfLessor: directorOfLessor || '',
                directorOfBranch: directorOfBranch || '',
                signatureImg1: signatureImages[0] || '', // Use an empty string if not a valid image
                signatureImg2: signatureImages[1] || '',
                signatureImg3: signatureImages[2] || '',
                signatureImg4: signatureImages[3] || ''
            };
        }
        function DrawEnNameAndSignture(signatures, ctx, canvas) {
            // Draw director of lessor
            ctx.fillText(signatures.directorOfLessor, canvas.width - 2000, 3055);
            if (signatures.signatureImg1) {
                ctx.drawImage(signatures.signatureImg1, canvas.width - 1700, 2980, 200, 100);
            }

            // Draw user
            ctx.fillText(signatures.userName, canvas.width - 1300, 3055);
            if (signatures.signatureImg2) {
                ctx.drawImage(signatures.signatureImg2, canvas.width - 900, 2980, 200, 100);
            }

            // Draw director of branch
            ctx.fillText(signatures.directorOfBranch, canvas.width - 2000, 3190);
            if (signatures.signatureImg3) {
                ctx.drawImage(signatures.signatureImg3, canvas.width - 1700, 3120, 200, 100);
            }

            // Draw renter
            ctx.fillText(signatures.renterName, canvas.width - 1300, 3190);
            if (signatures.signatureImg4) {
                ctx.drawImage(signatures.signatureImg4, canvas.width - 900, 3120, 200, 100);
            }
        }
        //Page 1
        const getEnDataOfPage1 = () => {
            // Contract Info
            const contractNo = decodeHTMLEntities("@Model.ContractSettlement?.CrCasRenterContractBasicNo") || "";
            var dateTimeNow = decodeHTMLEntities('@DateTime.Now.ToString("yyyy-MM-ddTHH:mm:ss.fffK")');
            const miladiDate = new Date(dateTimeNow);
            const date = @Html.Raw(Json.Serialize(Model.ContractSettlement?.CrCasRenterContractBasicExpectedStartDate));
            const startDate = new Date(date);
            // const endDate = new Date($("#contract_real_endTime").val());
            // Get the date value from the input field
            const dateValue = $("#contract_real_endTime").val();
            // Get the time portion of the current date
            const currentDate = new Date(dateTimeNow);
            const currentTime = currentDate.toLocaleTimeString([], { hour12: false });
            // Combine the date value with the current time
            const combinedDateTimeString = dateValue + ' ' + currentTime;
            // Create a new Date object with the combined date and time
            const endDate = new Date(combinedDateTimeString);
            const fromBranchName = decodeHTMLEntities("@ViewBag.EnBranch") || "";
            const toBranchName = decodeHTMLEntities("@Model.CrCasBranchInformation.CrCasBranchInformationEnShortName") || "";
            return {
                contractNo: contractNo || "",
                miladiDateString: getFormatDate(miladiDate) || "",
                startMiladiDate: getFormatDate(startDate) || "",
                endMiladiDate: getFormatDate(endDate) || "",
                currentHijriDate: formatHijriEnDate(miladiDate) || "",
                startHijriDate: formatHijriEnDate(startDate) || "",
                endHijriDate: formatHijriEnDate(endDate) || "",
                status: "Closed",
                fromBranchName: fromBranchName,
                toBranchName: toBranchName,
            };
        };
        const CreateEnPageContract1 = async () => {
            return new Promise(async (resolve, reject) => {
                try {
                    var image = "lessorInfo?.CrMasUserInformationLessorNavigation?.CrMasLessorImage.CrMasLessorImageEnSettlementContractPage";
                    var imagePath = image.replace('~', '');
                    // get data For Page 1
                    var Data = getEnDataOfPage1();
                    var signtures = await loadEnSignatures();
                    // Last Director and manger and user and renter with signture
                    // Text on Image
                    // Get Image And Text On
                    // Read the image file as a Blob
                    const responseImage = await fetch(imagePath);
                    const blob = await responseImage.blob();
                    var canvas = document.createElement("canvas");
                    var ctx = canvas.getContext("2d");
                    var url;
                    var img = new Image();
                    img.crossOrigin = "Anonymous";
                    img.onload = function () {
                        canvas.width = img.width;
                        canvas.height = img.height;

                        ctx.drawImage(img, 0, 0);

                        ctx.font = "bold 35px serif";
                        ctx.textAlign = "left";
                        ctx.fillStyle = "black";
                        //Contract
                        ctx.fillText(Data.contractNo, canvas.width - 1974, 760);
                        ctx.fillText(Data.currentHijriDate, canvas.width - 2200, 839);
                        ctx.fillText(Data.miladiDateString, canvas.width - 1300, 835);
                        ctx.fillText(Data.startHijriDate, canvas.width - 2100, 915);
                        ctx.fillText(Data.startMiladiDate, canvas.width - 1310, 915);
                        ctx.fillText(Data.endHijriDate, canvas.width - 2110, 990);
                        ctx.fillText(Data.endMiladiDate, canvas.width - 1310, 990);
                        ctx.fillText(Data.status, canvas.width - 2040, 1068);
                        ctx.fillText(Data.fromBranchName, canvas.width - 2010, 1440);
                        ctx.fillText(Data.toBranchName, canvas.width - 1150, 1440);
                        // Last
                        DrawEnNameAndSignture(signtures, ctx, canvas);
                        canvas.toBlob(async function (blob) {
                            // Return the blob
                            resolve(blob);
                        }, "image/png");
                    };
                    img.src = imagePath;
                } catch (error) {
                    reject(error);
                }
            });
        };
        // Page 2 Expenses
        const getEnDataOfPage2 = () => {
            var ExpensesValue = $("#expensesValue-input").val();
            var ExpensesReasons = $("#Expense-statement-input").val();
            if (ExpensesValue) {
                // Convert to a localized string with two decimal places
                ExpensesValue = parseFloat(ExpensesValue).toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 });
            } else {
                ExpensesValue = "0.00";
            }

            return {
                expensesValue: ExpensesValue,
                expensesReasons: ExpensesReasons || ""
            };
        };
        function GetENExpensesPicture() {
            const images = [];
            if (imgExpenses) {
                imgExpenses.forEach(file => {
                    const img = new Image();
                    img.src = URL.createObjectURL(file.f);
                    images.push(img);
                });
            }
            // Return the array of Image objects
            return images;
        }
        const CreateEnPageContract2 = async () => {
            return new Promise(async (resolve, reject) => {
                try {
                    var image = "lessorInfo?.CrMasUserInformationLessorNavigation?.CrMasLessorImage.CrMasLessorImageEnSettlementContractExpenses";
                    var imagePath = image.replace('~', '');
                    // get data For Page 2
                    var Data = getEnDataOfPage2();
                    var signtures = await loadEnSignatures();
                    const [firstHalf, secondHalf] = splitTextInHalf(Data.expensesReasons);
                    var ExpensesPicture = GetENExpensesPicture();
                    const responseImage = await fetch(imagePath);
                    const blob = await responseImage.blob();
                    var canvas = document.createElement("canvas");
                    var ctx = canvas.getContext("2d");
                    var url;
                    var img = new Image();
                    img.crossOrigin = "Anonymous";
                    img.onload = function () {
                        canvas.width = img.width;
                        canvas.height = img.height;

                        ctx.drawImage(img, 0, 0);

                        ctx.font = "bold 35px serif";
                        ctx.textAlign = "left";
                        ctx.fillStyle = "black";
                        //Expenses
                        ctx.fillText(Data.expensesValue, canvas.width - 2080, 838);
                        ctx.fillText(firstHalf, canvas.width - 2080, 930);
                        ctx.fillText(secondHalf, canvas.width - 2080, 1000);
                        // Pictures
                        if (ExpensesPicture[0]) {
                            ctx.drawImage(ExpensesPicture[0], canvas.width - 1050, 1360, 700, 600);
                        }
                        if (ExpensesPicture[1]) {
                            ctx.drawImage(ExpensesPicture[1], canvas.width - 2100, 1360, 700, 600);
                        }
                        if (ExpensesPicture[2]) {
                            ctx.drawImage(ExpensesPicture[2], canvas.width - 1050, 2110, 700, 600);
                        }
                        if (ExpensesPicture[3]) {
                            ctx.drawImage(ExpensesPicture[3], canvas.width - 2100, 2110, 700, 600);

                        }
                        // Last
                        DrawEnNameAndSignture(signtures, ctx, canvas);
                        canvas.toBlob(async function (blob) {
                            // Return the blob
                            resolve(blob);
                        }, "image/png");
                    };
                    img.src = imagePath;
                } catch (error) {
                    reject(error);
                }
            });
        };

        // Page 3 compensation
        const getEnDataOfPage3 = () => {
            var compensationReasons = $("#compensation-statement-input").val();
            var compensationValue = $("#compensation-input").val();
            if (compensationValue) {
                // Convert to a localized string with two decimal places
                compensationValue = parseFloat(compensationValue).toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 });
            } else {
                compensationValue = "0.00";
            }
            return {
                compensationValue: compensationValue,
                compensationReasons: compensationReasons || ""
            };
        };
        function GetENCompensationPicture() {
            const images = [];
            if (imgCompensations) {
                imgCompensations.forEach(file => {
                    const img = new Image();
                    img.src = URL.createObjectURL(file.f);
                    images.push(img);
                });
            }
            return images;
        }
        const CreateEnPageContract3 = async () => {
            return new Promise(async (resolve, reject) => {
                try {
                    var image = "lessorInfo?.CrMasUserInformationLessorNavigation?.CrMasLessorImage.CrMasLessorImageEnSettlementContractCompensation";
                    var imagePath = image.replace('~', '');
                    // get data For Page 2
                    var Data = getEnDataOfPage3();
                    var signtures = await loadEnSignatures();
                    const [firstHalf, secondHalf] = splitTextInHalf(Data.compensationReasons);
                    var CompensationPicture = GetENCompensationPicture();
                    const responseImage = await fetch(imagePath);
                    const blob = await responseImage.blob();
                    var canvas = document.createElement("canvas");
                    var ctx = canvas.getContext("2d");
                    var url;
                    var img = new Image();
                    img.crossOrigin = "Anonymous";
                    img.onload = function () {
                        canvas.width = img.width;
                        canvas.height = img.height;

                        ctx.drawImage(img, 0, 0);

                        ctx.font = "bold 35px serif";
                        ctx.textAlign = "left";
                        ctx.fillStyle = "black";
                        //Compensation
                        ctx.fillText(Data.compensationValue, canvas.width - 2080, 838);
                        ctx.fillText(firstHalf, canvas.width - 2080, 930);
                        ctx.fillText(secondHalf, canvas.width - 2080, 1000);
                        //CompensationPicture
                        if (CompensationPicture[0]) {
                            ctx.drawImage(CompensationPicture[0], canvas.width - 1050, 1360, 700, 600);
                        }
                        if (CompensationPicture[1]) {
                            ctx.drawImage(CompensationPicture[1], canvas.width - 2100, 1360, 700, 600);
                        }
                        if (CompensationPicture[2]) {
                            ctx.drawImage(CompensationPicture[2], canvas.width - 1050, 2110, 700, 600);
                        }
                        if (CompensationPicture[3]) {
                            ctx.drawImage(CompensationPicture[3], canvas.width - 2100, 2110, 700, 600);
                        }
                        // Last
                        DrawEnNameAndSignture(signtures, ctx, canvas);
                        canvas.toBlob(async function (blob) {
                            // Return the blob
                            resolve(blob);
                        }, "image/png");
                    };
                    img.src = imagePath;
                } catch (error) {
                    reject(error);
                }
            });
        };
        // Page4
        function GetEnCheckUpItems(ctx, canvas) {
            GetCheckUp();
            var yOffset = 885; // Initial y-offset for name
            var valueXOffset = canvas.width - 1400; // X-offset for value
            var nameXOffset = canvas.width - 2000; // X-offset for name
            if (CarCheckUp != null && CarCheckUp.length > 0) {
                CarCheckUp.forEach(function (item, index) {
                    var nameText = item.enName;
                    var checkupReason = item.reasonCheck + (item.reason ? " - " + item.reason : "");
                    // Set fillText for name
                    ctx.fillText(nameText, nameXOffset, yOffset + (index * 70));
                    // Set fillText for value
                    ctx.fillText(checkupReason, valueXOffset, yOffset + (index * 70));
                });
            }
        }
        const CreateEnPageContract4 = async () => {
            return new Promise(async (resolve, reject) => {
                try {
                    var image = "lessorInfo?.CrMasUserInformationLessorNavigation?.CrMasLessorImage.CrMasLessorImageEnContractPage4";
                    var imagePath = image.replace('~', '');                    // Get ALl Date for Page 4
                    // Last Director and manger and user and renter with signture
                    var signtures = await loadEnSignatures();
                    const responseImage = await fetch(imagePath);
                    const blob = await responseImage.blob();
                    var canvas = document.createElement("canvas");
                    var ctx = canvas.getContext("2d");
                    var url;
                    var img = new Image();
                    img.crossOrigin = "Anonymous";
                    img.onload = function () {
                        canvas.width = img.width;
                        canvas.height = img.height;
                        ctx.drawImage(img, 0, 0);
                        ctx.font = "bold 35px serif";
                        ctx.textAlign = "left";
                        ctx.fillStyle = "black";
                        GetEnCheckUpItems(ctx, canvas);
                        // Last
                        DrawEnNameAndSignture(signtures, ctx, canvas);
                        canvas.toBlob(async function (blob) {
                            // Return the blob

                            resolve(blob);
                        }, "image/png");
                    };
                    img.src = imagePath;
                } catch (error) {
                    reject(error);
                }
            });
        };
        // Page5
        function GetENCheckUpPicture() {
            // Array to store the Image objects
            const images = [];

            // Iterate over the CheckUpImages list
            imgCheckUpArray.forEach(file => {
                // Create a new Image object
                const img = new Image();

                // Set the src attribute of the Image object to the file URL
                img.src = URL.createObjectURL(file.f);

                // Push the Image object to the images array
                images.push(img);
            });

            // Return the array of Image objects
            return images;
        }
        const CreateEnPageContract5 = async () => {
            return new Promise(async (resolve, reject) => {
                try {
                    var image = "lessorInfo?.CrMasUserInformationLessorNavigation?.CrMasLessorImage.CrMasLessorImageEnContractPage5";
                    var imagePath = image.replace('~', '');
                    // Get ALl Date for Page 5
                    var picturesEn = GetENCheckUpPicture();
                    // Last Director and manger and user and renter with signture
                    var signtures = await loadEnSignatures();
                    const responseImage = await fetch(imagePath);
                    const blob = await responseImage.blob();
                    var canvas = document.createElement("canvas");
                    var ctx = canvas.getContext("2d");
                    var url;
                    var img = new Image();
                    img.crossOrigin = "Anonymous";
                    img.onload = function () {
                        canvas.width = img.width;
                        canvas.height = img.height;

                        ctx.drawImage(img, 0, 0);

                        ctx.font = "bold 35px serif";
                        ctx.textAlign = "left";
                        ctx.fillStyle = "black";
                        //
                        if (picturesEn[0]) {
                            ctx.drawImage(picturesEn[0], canvas.width - 1050, 750, 700, 600);
                        }
                        if (picturesEn[1]) {
                            ctx.drawImage(picturesEn[1], canvas.width - 1050, 1500, 700, 600);
                        }
                        if (picturesEn[2]) {
                            ctx.drawImage(picturesEn[2], canvas.width - 1050, 2250, 700, 600);
                        }
                        if (picturesEn[3]) {
                            ctx.drawImage(picturesEn[3], canvas.width - 2050, 750, 700, 600);
                        }
                        if (picturesEn[4]) {
                            ctx.drawImage(picturesEn[4], canvas.width - 2050, 1500, 700, 600);
                        }
                        if (picturesEn[5]) {
                            ctx.drawImage(picturesEn[5], canvas.width - 2050, 2250, 700, 600);
                        }
                        // Last
                        DrawEnNameAndSignture(signtures, ctx, canvas);
                        canvas.toBlob(async function (blob) {
                            // Return the blob

                            resolve(blob);
                        }, "image/png");
                    };
                    img.src = imagePath;
                } catch (error) {
                    reject(error);
                }
            });
        };
        // Page6
        const CreateEnPageContract6 = async () => {
            return new Promise(async (resolve, reject) => {
                try {
                    var image = "lessorInfo?.CrMasUserInformationLessorNavigation?.CrMasLessorImage.CrMasLessorImageEnContractPage6";
                    var imagePath = image.replace('~', '');
                    // Get ALl Date for Page 6
                    var picturesEn2 = GetENCheckUpPicture();
                    // Last Director and manger and user and renter with signture
                    var signtures = await loadEnSignatures();
                    const responseImage = await fetch(imagePath);
                    const blob = await responseImage.blob();
                    var canvas = document.createElement("canvas");
                    var ctx = canvas.getContext("2d");
                    var url;
                    var img = new Image();
                    img.crossOrigin = "Anonymous";
                    img.onload = function () {
                        canvas.width = img.width;
                        canvas.height = img.height;

                        ctx.drawImage(img, 0, 0);

                        ctx.font = "bold 35px serif";
                        ctx.textAlign = "left";
                        ctx.fillStyle = "black";
                        ////////////
                        if (picturesEn2[6]) {
                            ctx.drawImage(picturesEn2[6], canvas.width - 1050, 750, 750, 650);
                        }
                        if (picturesEn2[7]) {
                            ctx.drawImage(picturesEn2[7], canvas.width - 1050, 1500, 750, 650);
                        }
                        if (picturesEn2[8]) {
                            ctx.drawImage(picturesEn2[8], canvas.width - 1050, 2250, 750, 650);
                        }
                        if (picturesEn2[9]) {
                            ctx.drawImage(picturesEn2[9], canvas.width - 2050, 750, 750, 650);
                        }
                        if (picturesEn2[10]) {
                            ctx.drawImage(picturesEn2[10], canvas.width - 2050, 1500, 750, 650);
                        }
                        if (picturesEn2[11]) {
                            ctx.drawImage(picturesEn2[11], canvas.width - 2050, 2250, 750, 650);
                        }
                        // Last
                        DrawEnNameAndSignture(signtures, ctx, canvas);
                        canvas.toBlob(async function (blob) {
                            resolve(blob);
                        }, "image/png");
                    };
                    img.src = imagePath;
                } catch (error) {
                    reject(error);
                }

            });
        };
        const getPictureAndCreateEnPdfContract = async () => {
            try {
                console.log("Starting getPictureAndCreateEnPdfContract");
                const createPageFunctions = [
                    { func: CreateEnPageContract1, order: 1 },
                    { func: CreateEnPageContract4, order: 4 },
                    { func: CreateEnPageContract5, order: 5 },
                ];

                var ExpensesValue = $("#expensesValue-input").val();
                var compensationValue = $("#compensation-input").val();
                // Parse the values to floats
                var parsedExpensesValue = parseFloat(ExpensesValue);
                var parsedCompensationValue = parseFloat(compensationValue);

                // Check conditions and add functions with their orders accordingly
                if (!isNaN(parsedExpensesValue) && parsedExpensesValue > 0) {
                    console.log("ExpensesValue", ExpensesValue);
                    createPageFunctions.push({ func: CreateEnPageContract2, order: 2 });
                }
                if (!isNaN(parsedCompensationValue) && parsedCompensationValue > 0) {
                    console.log("compensationValue", compensationValue);
                    createPageFunctions.push({ func: CreateEnPageContract3, order: 3 });
                }
                if (imgCheckUpArray.length > 6) {
                    createPageFunctions.push({ func: CreateEnPageContract6, order: 6 });
                }

                // Sort the functions by their order
                createPageFunctions.sort((a, b) => a.order - b.order);

                // Execute the functions in order and collect the image blobs
                const imageBlobs = [];
                for (const { func, order } of createPageFunctions) {
                    console.log(`Executing ${func.name} (order ${order})`);
                    try {
                        const blob = await func();
                        imageBlobs.push(blob);
                        console.log(`Successfully executed ${func.name} (order ${order})`);
                    } catch (error) {
                        console.error(`Error executing ${func.name} (order ${order}):`, error);
                        throw error; // إعادة الرمي للتعامل مع الخطأ في الـ try-catch الخارجي
                    }
                }
                var existingContractPdfEn = decodeHTMLEntities('@Model.ContractSettlement.CrCasRenterContractBasicPdfFile.Replace("~", "")');
                // Create the PDF contract with the collected image blobs
                await createPdfContract(imageBlobs, "SavePdfEnContract", existingContractPdfEn);
            } catch (error) {
                console.error("Error creating English PDF contract:", error);
                throw error; // rethrow the error to be handled by the caller
            }
        };
    </script>
    <script>
        // Create pdf with multi photo
        const createPdfContract = async (imageBlobs, InputPdf, existingContractPdf) => {
            const doc = new jsPDF('p', 'pt', 'a4', true);

            // إضافة الصور إلى مستند PDF جديد
            for (let imageIndex = 0; imageIndex < imageBlobs.length; imageIndex++) {
                if (imageIndex > 0) {
                    doc.addPage();
                }
                doc.setPage(imageIndex + 1);

                const pageWidth = doc.internal.pageSize.getWidth();
                const pageHeight = doc.internal.pageSize.getHeight();

                const blob = imageBlobs[imageIndex];
                const img = await createImageFromBlob(blob);

                const imgWidth = pageWidth;
                const imgHeight = (pageWidth * img.height) / img.width;

                const imgYPos = (pageHeight - imgHeight) / 2;
                const imgXPos = 0;
                doc.addImage(img, 'JPEG', imgXPos, imgYPos, imgWidth, imgHeight, '', 'FAST');
            }

            const newPdfBlob = doc.output('blob');

            // التحقق مما إذا كان `existingContractPdf` صالحًا قبل الدمج
            let mergedPdfBase64;

            if (existingContractPdf && existingContractPdf.length > 0) {
                try {
                    mergedPdfBase64 = await mergePdfs(existingContractPdf, newPdfBlob);
                } catch (error) {
                    console.error("Error merging PDFs:", error);
                    // إذا حدث خطأ في الدمج، استخدام ملف PDF الجديد فقط
                    mergedPdfBase64 = doc.output('datauristring');
                }
            } else {
                // إذا لم يكن `existingContractPdf` موجودًا، استخدام العقد الجديد فقط
                mergedPdfBase64 = doc.output('datauristring');
            }

            console.log("mergedPdfBase64", mergedPdfBase64);
            document.getElementById(InputPdf).value = mergedPdfBase64;
        };
        // Helper function to create an image element from a blob
        const createImageFromBlob = (blob) => {
            return new Promise((resolve, reject) => {
                const img = new Image();
                img.onload = () => resolve(img);
                img.onerror = reject;
                img.src = URL.createObjectURL(blob);
            });
        };
    </script>
    <!--Script For Merge Pdfs-->
    <script>
        const mergePdfs = async (existingPdfPath, newPdfBlob) => {
            try {
                console.log(`Fetching existing PDF from ${existingPdfPath}`);
                const existingPdfResponse = await fetch(existingPdfPath);

                if (!existingPdfResponse.ok) {
                    console.error(`Failed to fetch existing PDF: ${existingPdfResponse.statusText}`);
                    throw new Error('Failed to fetch existing PDF');
                }

                const existingPdfBlob = await existingPdfResponse.blob();

                const existingPdfBytes = await existingPdfBlob.arrayBuffer();
                const newPdfBytes = await newPdfBlob.arrayBuffer();

                const existingPdfDoc = await PDFLib.PDFDocument.load(existingPdfBytes);
                const newPdfDoc = await PDFLib.PDFDocument.load(newPdfBytes);

                const copiedPages = await existingPdfDoc.copyPages(newPdfDoc, newPdfDoc.getPageIndices());
                copiedPages.forEach((page) => {
                    existingPdfDoc.addPage(page);
                });

                const mergedPdfBytes = await existingPdfDoc.save();
                const base64String = arrayBufferToBase64(mergedPdfBytes);

                console.log("base64String", base64String);
                return base64String;
            } catch (error) {
                console.error('Error in mergePdfs:', error);
                throw error;
            }
        };
        const arrayBufferToBase64 = (arrayBuffer) => {
            const uint8Array = new Uint8Array(arrayBuffer);
            let binaryString = '';
            uint8Array.forEach(byte => {
                binaryString += String.fromCharCode(byte);
            });
            return btoa(binaryString);
        };
    </script>
    <script>
        // submit Form
        document.addEventListener('DOMContentLoaded', function () {
            var form = document.getElementById('SettlementForm');
            var submitButton = document.getElementById('submitForm');

            submitButton.addEventListener('click', async function (event) {
                event.preventDefault();
                var AmountPayed = document.getElementById("AmountPayed").value;
                if ($("#SettlementForm").valid()) {
                    // Submit the form
                    CheckIfCanPayLessThanTotalAmount();
                    if (somethingIsNotOkay) {
                        $("#ContainerLoader").show();
                        // await sendStaticImageToWhatsApp();
                        // console.log("StaticImageToWhatsApp sent successfully.");

                        // await sendArInvoiceToWhatsApp();
                        // console.log("Arabic invoice sent successfully.");

                        // await sendEnInvoiceToWhatsApp();
                        // console.log("English invoice sent successfully.");

                        // if (AmountRequired >= 0 && parseFloat(AmountPayed) > 0) {
                        //     await sendArCatchReceiptToWhatsApp();
                        //     console.log("Arabic receipt sent successfully.");

                        //     await sendEnCatchReceiptToWhatsApp();
                        //     console.log("English receipt sent successfully.");

                        // }
                        // else if (AmountRequired < 0 && parseFloat(AmountPayed) > 0) {
                        //     await sendArPaymentReceiptToWhatsApp();
                        //     console.log("Arabic receipt sent successfully.");

                        //     await sendEnPaymentReceiptToWhatsApp();
                        //     console.log("English receipt sent successfully.");

                        // }


                        // await getPictureAndCreateArPdfContract();
                        // console.log("Arabic PDF contract creation completed successfully.");

                        // await getPictureAndCreateEnPdfContract();
                        // console.log("English PDF contract creation completed successfully.");

                        document.getElementById('ContractSettlement_PaymentMethod').disabled = false;
                        document.getElementById('ContractSettlement_SalesPoint').disabled = false;
                        form.submit();
                    }
                    else {
                        CheckIfCanPayLessThanTotalAmount();
                    }
                }
            });
        });
    </script>
    <script>
        async function dataChanged(number) {
            try {
                const response = await $.ajax({
                    url: "/BS/Contract/Get_ConvertedNumber_Action",
                    type: "GET",
                    data: { our_No: number },
                });
                return response;
            } catch (error) {
                console.error("Error occurred: ", error);
            }
        }
    </script>
    <script>
        function handleAmountPayed(input) {
            // Remove non-digit characters and additional decimal points
            input.value = input.value.replace(/[^0-9\.]/g, '');
            const decimalIndex = input.value.indexOf('.');
            // Limit to 9 digits before and after the decimal point
            if (decimalIndex !== -1) {
                const digitsBeforeDecimal = input.value.substring(0, decimalIndex);
                const digitsAfterDecimal = input.value.substring(decimalIndex + 1);

                // Limit to 2 digits after the decimal point
                input.value = digitsBeforeDecimal.substr(0, 7) + '.' + digitsAfterDecimal.substr(0, 2);

                // Remove additional decimal points
                if (input.value.indexOf('.', decimalIndex + 1) !== -1) {
                    const lastValidIndex = input.value.lastIndexOf('.');
                    input.value = input.value.substring(0, lastValidIndex) + input.value.substring(lastValidIndex + 1);
                }
            } else {
                // Limit to 7 digits before the decimal point
                input.value = input.value.substr(0, 7);
            }
        }
    </script>
    <script>
        // To decode some string
        function decodeHTMLEntities(text) {
            var textArea = document.createElement("textarea");
            textArea.innerHTML = text;
            return textArea.value;
        }
        // Function to format Hijri date
        function formatHijriDate(date) {
            const options = { weekday: 'long', day: 'numeric', year: 'numeric', month: 'long', calendar: 'islamic-umalqura' };
            return date.toLocaleDateString('ar-SA', options).replace(/هـ/g, ''); // Remove "هـ" suffix
        }
        function formatHijriEnDate(date) {
            const options = { weekday: 'long', day: 'numeric', year: 'numeric', month: 'long', calendar: 'islamic-umalqura' };
            return date.toLocaleDateString('en-US-u-ca-islamic-umalqura', options).replace(/AH/g, ''); // Remove "AH" suffix
        }
        function getFormatDate(date) {
            const parsedDate = new Date(date);
            if (!isNaN(parsedDate) && parsedDate != null && parsedDate != "") {
                var dateFormat = parsedDate.getFullYear() + '/' +
                    (parsedDate.getMonth() + 1).toString().padStart(2, '0') + '/' +
                    parsedDate.getDate().toString().padStart(2, '0') + ' ' +
                    parsedDate.getHours().toString().padStart(2, '0') + ':' +
                    parsedDate.getMinutes().toString().padStart(2, '0') + ':' +
                    parsedDate.getSeconds().toString().padStart(2, '0');
                return dateFormat;
            }
            return "";
        }
        function splitTextInHalf(text) {
            // Check if text is null, empty, or less than or equal to 100 characters
            if (text == null || text === "") {
                return ["", ""];
            }

            if (text.length <= 100) {
                return [text, ""];
            }

            // Find the middle of the text
            const middleIndex = Math.floor(text.length / 2);

            // Find the closest space to the middle to avoid splitting words
            const beforeMiddle = text.lastIndexOf(' ', middleIndex);
            const afterMiddle = text.indexOf(' ', middleIndex + 1);

            // Determine the best split point
            const splitIndex = (middleIndex - beforeMiddle < afterMiddle - middleIndex)
                ? beforeMiddle
                : afterMiddle;

            // Split the text into two parts
            const firstHalf = text.slice(0, splitIndex).trim();
            const secondHalf = text.slice(splitIndex).trim();

            return [firstHalf, secondHalf];
        }
        function splitNumberbeforeAndafterDecimal(number) {
            let cleanedValueString = number.replace(/,/g, "");
            let parts = cleanedValueString.split('.');
            let beforeDecimal = parts[0];
            let afterDecimal = parts.length > 1 ? parts[1] : "00";
            afterDecimal = afterDecimal.padEnd(2, '0');
            // Add thousands separators to the before decimal part
            beforeDecimal = beforeDecimal.replace(/\B(?=(\d{3})+(?!\d))/g, ',');
            return [beforeDecimal, afterDecimal];
        }
    </script>
    <script>
        function showSpinner(button) {
            button.dataset.originalContent = button.innerHTML;
            const spinner = document.createElement('div');
            spinner.classList.add('spinner-border', 'spinner-border-sm', 'text-warning');
            spinner.setAttribute('role', 'status');
            const checkIcon = document.createElement('i');
            checkIcon.classList.add('fa-solid', 'fa-check');
            button.innerHTML = '';
            button.appendChild(spinner);
            button.classList.add('spinner-payment-check');
        }

        function removeSpinnerAndChangeColor(button) {
            button.innerHTML = button.dataset.originalContent;
            const checkDiv = document.querySelector('.row .col-auto .systems-check');
            if (checkDiv) {
                checkDiv.style.backgroundColor = 'green';
            }
            button.classList.remove('spinner-payment-check');
        }
        function getFormattedDatesMiliadiAndHijri(language) {
            // Get the current Miladi date from the server (assuming server provides the date in a specific format)
            var dateTimeNow = decodeHTMLEntities('@DateTime.Now.ToString("yyyy-MM-ddTHH:mm:ss.fffK")'); // or "@DateTime.Now" if you prefer local server time
            const miladiDate = new Date(dateTimeNow);

            // Format the Miladi date
            const miladiOptions = { year: 'numeric', month: '2-digit', day: '2-digit' };
            const miladiDateString = miladiDate.toLocaleDateString('en-US', miladiOptions).split('/').join('/');

            // Initialize hijriDateString
            let hijriDateString;

            // Format the Hijri date based on the language
            if (language === "ar") {
                hijriDateString = formatHijriDate(miladiDate);
            } else {
                hijriDateString = formatHijriEnDate(miladiDate);
            }

            return {
                miladiDate: miladiDateString,
                hijriDate: hijriDateString
            };
        }

    </script>

}