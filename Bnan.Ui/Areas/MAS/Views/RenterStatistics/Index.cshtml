@using Bnan.Core.Extensions;
@using Bnan.Ui.ViewModels.MAS;
@using Microsoft.AspNetCore.Identity;
@using Newtonsoft.Json;
﻿@using Microsoft.AspNetCore.Builder;
@using Microsoft.AspNetCore.Localization;
@using Microsoft.AspNetCore.Http.Features;
@using Microsoft.AspNetCore.Mvc.Localization;
@using Microsoft.EntityFrameworkCore;
@using Microsoft.Extensions.Options;
@using System.Globalization;
@model MasStatistics_RentersVM
@inject UserManager<CrMasUserInformation> userManager
@inject SignInManager<CrMasUserInformation> signinManager
@inject IViewLocalizer localizer
@inject IOptions<RequestLocalizationOptions> options
@{
    var requestCulture = Context.Features.Get<IRequestCultureFeature>();
    ViewData["returnUrl"] = string.IsNullOrEmpty(Context.Request.Path) ? "~/" : $"~{Context.Request.Path.Value}";
    ViewData["Page-title"] = @localizer["RenterStatistics Data"];
    ViewData["Page-Hint"] = @localizer["RenterStatistics Hint"];
}

    <div class="col my-2 d-flex align-items-center justify-content-center">
    <div class="container NewUpdate-container">
        <div class="row justify-content-center">
            <div class="col-lg-11">
                <div class="row g-3 my-3">
                    <div class="col-md-12">
                        <h3>@localizer["RenterStatistics_Statistics_Renters_n"]</h3>
                    </div>
                    <div class="col-md-12 ">
                        <p class="d-inline-block headLines">@localizer["RenterStatistics_count_Renters"] : </p>
                        @*<p class="d-inline-block Saved-data headLines">@(Model.Renters_Count?.ToString("0") ?? "0") @localizer["RenterStatistics_Renter"]</p>*@
                        <p class="d-inline-block Saved-data headLines">@(Model.Renters_Count?.ToString("0") ?? "0")</p>

                    </div>
                    <div class="col-md-12">
                        <div class="row mt-3 g-2 justify-content-between">
                            <div class="col-lg-3">
                                <p class="headLines">@localizer["RenterStatistics_Type_n"]</p>
                                <div class="row">
                                    <div class="col-4 col-lg-9">
                                        <button class="btn stat-btn active-stat-btn" 
                                                onclick="handleButtonClick(this, NationalityChart)">
                                            @localizer["RenterStatistics_Nationality"]
                                        </button>
                                    </div>
                                    <div class="col-4 col-lg-9">
                                        <button class="btn stat-btn"
                                                onclick="handleButtonClick(this, ProfessionChart)">
                                            @localizer["RenterStatistics_profession"]
                                        </button>
                                    </div>
                                    <div class="col-4 col-lg-9">
                                        <button class="btn stat-btn"
                                                onclick="handleButtonClick(this, AreaChart)">
                                            @localizer["RenterStatistics_Rigon"]
                                        </button>
                                    </div>
                                    <div class="col-4 col-lg-9">
                                        <button class="btn stat-btn"
                                                onclick="handleButtonClick(this, CityChart)">
                                            @localizer["RenterStatistics_City"]
                                        </button>
                                    </div>
                                    <div class="col-4 col-lg-9">
                                        <button class="btn stat-btn"
                                                onclick="handleButtonClick(this, AgeChart)">
                                            @localizer["RenterStatistics_Age"]
                                        </button>
                                    </div>
                                </div>
                            </div>

                            <div class="col-lg-9 text-center charts-border">
                                <canvas id="myChart"></canvas>
                            </div>

                        </div>

                    </div>
                </div>

            </div>
        </div>
            <a asp-area="CAS" asp-controller="Home" asp-action="Index" data-bs-toggle="tooltip" data-bs-placement="top"
           data-bs-custom-class="custom-tooltip" data-bs-title="@localizer["BackToHome"]"
           class="new-Page-icon"><img src="~/MasSystem/images/back to main.svg" alt="man"></a>
    </div>
</div>




@section Scripts {


    <!--- @*<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>*@ --->
    <script src="~/MasSystem/js/chart.js"></script>
            
<!---@*    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
    

    <script src="https://code.jquery.com/jquery-3.6.4.min.js"></script>
    <script src="~/MasSystem/scripts/Scripts.js"></script>>*@--->
    <script>
        window.addEventListener('load', function () {
            $("#min-loader").toggleClass("d-none", true);
            NationalityChart()
        })
    </script>

    <script>
        let chartInstance = null;

        function handleButtonClick(button, chartFunction) {
            document.querySelectorAll('.stat-btn').forEach(btn => btn.classList.remove('active-stat-btn'));

            button.classList.add('active-stat-btn');

            chartFunction();
        }
        function createChart(chartType, chartData, chartOptions) {
            const ctx = document.getElementById('myChart').getContext('2d');

            if (chartInstance) {
                chartInstance.destroy();
            }

            chartInstance = new Chart(ctx, {
                type: chartType,
                data: chartData,
                options: chartOptions
            });
        }

        async function GetAllBy_Profession() {
            $("#min-loader").removeClass("d-none");
            return new Promise((resolve, reject) => {

            $.ajax({
                type: "GET",
                //data: {
                //    start: start, end: end
                //},
                url: "@Url.Action("GetAllBy_Profession", "RenterStatistics", new { Area = "MAS" })",
                success: function (response) {
                    $("#min-loader").toggleClass("d-none", true);
                    //$(".chart22").html(response);
                    console.log(response);
                    resolve(response); // عند نجاح الطلب، نقوم بإرجاع البيانات باستخدام resolve
                },
                error: function (error) {
                    reject(error); // إذا حدث خطأ في الطلب، نستخدم reject
                }
            });
            });
        }

        async function GetAllBy_City() {
            $("#min-loader").removeClass("d-none");
            return new Promise((resolve, reject) => {

                $.ajax({
                    type: "GET",
                    url: "@Url.Action("GetAllBy_City", "RenterStatistics", new { Area = "MAS" })",
                    success: function (response) {
                        $("#min-loader").toggleClass("d-none", true);
                        console.log(response);
                        resolve(response); // عند نجاح الطلب، نقوم بإرجاع البيانات باستخدام resolve
                    },
                    error: function (error) {
                        reject(error); // إذا حدث خطأ في الطلب، نستخدم reject
                    }
                });
            });
        }

        async function GetAllBy_Region() {
            $("#min-loader").removeClass("d-none");
            return new Promise((resolve, reject) => {

                $.ajax({
                    type: "GET",
                    url: "@Url.Action("GetAllBy_Region", "RenterStatistics", new { Area = "MAS" })",
                    success: function (response) {
                        $("#min-loader").toggleClass("d-none", true);
                        console.log(response);
                        resolve(response); // عند نجاح الطلب، نقوم بإرجاع البيانات باستخدام resolve
                    },
                    error: function (error) {
                        reject(error); // إذا حدث خطأ في الطلب، نستخدم reject
                    }
                });
            });
        }

        async function GetAllBy_Age() {
            $("#min-loader").removeClass("d-none");
            return new Promise((resolve, reject) => {

                $.ajax({
                    type: "GET",
                    url: "@Url.Action("GetAllBy_Age", "RenterStatistics", new { Area = "MAS" })",
                    success: function (response) {
                        $("#min-loader").toggleClass("d-none", true);
                        console.log(response);
                        resolve(response); // عند نجاح الطلب، نقوم بإرجاع البيانات باستخدام resolve
                    },
                    error: function (error) {
                        reject(error); // إذا حدث خطأ في الطلب، نستخدم reject
                    }
                });
            });
        }
        

        function NationalityChart() {
            let list_ChartData = @Html.Raw(Json.Serialize(Model.listMasChartdataVM));
            //console.log(list_ChartData);
            let labelsBranch;
            if ('@requestCulture?.RequestCulture.UICulture.Name' == "en-US") {

                labelsBranch = list_ChartData.map(function (paymentMethod) {
                    return paymentMethod.enName;
                });
            }
            else {
                labelsBranch = list_ChartData.map(function (paymentMethod) {
                    return paymentMethod.arName;
                });
            }

            let dataValues = list_ChartData.map(function (paymentMethod) {
                return paymentMethod.value;
            });
            createChart('polarArea', {
                //labels: ['سعودي', 'مصري', 'أخرى'],
                labels: labelsBranch,
                datasets: [{
                    //data: [345, 71, 169],
                    data: dataValues,
                    backgroundColor: [
                        'rgba(255, 99, 132, 0.7)',
                        'rgba(54, 162, 235, 0.7)',
                        'rgba(255, 206, 86, 0.7)',

                    ],
                    borderColor: [
                        'rgb(255, 255, 255)',
                        'rgb(255, 255, 255)',
                        'rgb(255, 255, 255)',


                    ],
                    borderWidth: 2
                }]
            }, {
                responsive: true,
                scales: {
                    r: {
                        pointLabels: {
                            display: false, // إخفاء النقاط التي تُعرض عليها التسميات داخل المحاور القطبية
                            //display: true,
                            centerPointLabels: true,
                            font: {
                                family: "'Cairo', sans-serif",
                                size: 12
                            }
                        }
                    }
                },
                plugins: {
                    legend: {
                        //display: false,  // إخفاء التسمية الخاصة بالصورة داخلياً
                        position: 'left',
                        labels: {
                            font: {
                                family: "'Cairo', sans-serif",
                                size: 12
                            }
                        }
                    },
                    title: {
                        display: true,
                        text: "@localizer["Renter_inChart_Nationality"]",
                        font: {
                            family: "'Cairo', sans-serif",
                            size: 15,
                            weight: '600'
                        },
                        padding: {
                            top: 20,
                            bottom: 25
                        }
                    }
                }
            });
        }

        async function ProfessionChart() {
            let list_ChartData = await GetAllBy_Profession();

            let labelsBranch;
            if ('@requestCulture?.RequestCulture.UICulture.Name' == "en-US") {

                labelsBranch = list_ChartData.map(function (paymentMethod) {
                    return paymentMethod.enName;
                });
            }
            else {
                labelsBranch = list_ChartData.map(function (paymentMethod) {
                    return paymentMethod.arName;
                });
            }
            ////@*var list_ChartData = @Html.Raw(Json.Serialize(Model.listMasChartdataVM));*@
            ////@*var list_ChartData = @Html.Raw(Json.Serialize(Model.listMasChartdataVM));*@
            //console.log(list_ChartData);
            let labelsBranch2;
            if ('@requestCulture?.RequestCulture.UICulture.Name' == "en-US") {
                // تحويل البيانات إلى تنسيق مناسب
                labelsBranch2 = list_ChartData.map(item => ({
                    data: [{ x: item.enName, y: item.value }],
                    backgroundColor: item.backgroundColor,
                    borderColor: item.borderColor,
                    pointRadius: 5
                }));
            }
            else {
                // تحويل البيانات إلى تنسيق مناسب
                labelsBranch2 = list_ChartData.map(item => ({
                    data: [{ x: item.arName, y: item.value }],
                    backgroundColor: item.backgroundColor,
                    borderColor: item.borderColor,
                    pointRadius: 5
                }));
            }
            

            createChart('scatter', {
                datasets: labelsBranch2,
            }, {
                responsive: true,
                animations: {
                    radius: {
                        duration: 1000,
                        easing: 'easeInOutQuad',
                        loop: true,
                        from: 5,
                        to: 8
                    },
                },
                plugins: {
                    legend: {
                        display: false
                    },
                    title: {
                        display: true,
                        text: "@localizer["Renter_inChart_Profession"]",
                        font: {
                            family: "'Cairo', sans-serif",
                            size: 15,
                            weight: '600'
                        },
                        padding: {
                            top: 20,
                            bottom: 25
                        }
                    }
                },
                scales: {
                    x: {
                        type: 'category',
                        //labels: ['أقل من 20', '25 - 21', '30 - 26', '35 - 31', '40 - 36', '50 - 41', '60 - 51', 'أعلى من 60'],
                        labels: labelsBranch,                       
                        ticks: {
                            display: true,
                            font: {
                                family: "'Cairo', sans-serif",
                                size: 12
                            }
                        }
                    },
                    y: {
                        beginAtZero: true,
                        ticks: {
                            display: true
                        }
                    }
                }
            });

   
        }
        async function AreaChart() {
            let list_ChartData = await GetAllBy_Region();
            ////@*var list_ChartData = @Html.Raw(Json.Serialize(Model.listMasChartdataVM));*@
            //console.log(list_ChartData);
            let labelsBranch;
            if ('@requestCulture?.RequestCulture.UICulture.Name' == "en-US") {

                labelsBranch = list_ChartData.map(function (paymentMethod) {
                    return paymentMethod.enName;
                });
            }
            else {
                labelsBranch = list_ChartData.map(function (paymentMethod) {
                    return paymentMethod.arName;
                });
            }

            let dataValues = list_ChartData.map(function (paymentMethod) {
                return paymentMethod.value;
            });
            createChart('bar', {
                //labels: ['الشرقية', 'الرياض ', 'مكة المكرمة', 'القصيم ', 'المدينة المنورة', 'غير متوفرة', 'أخرى'],
                labels: labelsBranch,
                datasets: [{
                    barThickness: 40,
                    minBarLength: 2,
                    //data: [15, 20, 30, 60, 90, 10, 4],
                    data: dataValues,
                    backgroundColor: ['#FF99AF', '#8BC9F3', '#FFE199', '#8ED7D7', '#C9ADFF', '#FFCC99', '#F1F2F3'],
                    borderColor: [
                        'rgb(255, 99, 132)',
                        'rgb(54, 162, 235)',
                        'rgb(255, 205, 86)',
                        'rgb(75, 192, 192)',
                        'rgb(153, 102, 255)',
                        'rgb(255, 159, 64)',
                        '#C9CBCF',

                    ],
                    borderWidth: 2
                }]
            }, {
                responsive: true,
                plugins: {
                    legend: {
                        display: false
                    },
                    title: {
                        display: true,
                        text: "@localizer["Renter_inChart_Region"]",
                        font: {
                            family: "'Cairo', sans-serif",
                            size: 15,
                            weight: '600'
                        },
                        padding: {
                            top: 20,
                            bottom: 25
                        }
                    }
                },
                scales: {
                    x: {
                        type: 'category',
                        ticks: {
                            display: true,
                            font: {
                                family: "'Cairo', sans-serif",
                                size: 12
                            }
                        }
                    }
                }
            });
        }
        async function CityChart() {
            let list_ChartData = await GetAllBy_City();
            ////@*var list_ChartData = @Html.Raw(Json.Serialize(Model.listMasChartdataVM));*@
            //console.log(list_ChartData);
            let labelsBranch;
            if ('@requestCulture?.RequestCulture.UICulture.Name' == "en-US") {

                labelsBranch = list_ChartData.map(function (paymentMethod) {
                    return paymentMethod.enName;
                });
            }
            else {
                labelsBranch = list_ChartData.map(function (paymentMethod) {
                    return paymentMethod.arName;
                });
            }

            let dataValues = list_ChartData.map(function (paymentMethod) {
                return paymentMethod.value;
            });
            createChart('bar', {
                //labels: ['الدمام', 'الرياض', 'مكة المكرمة', 'بريدة', 'المدينة المنورة', 'أخرى'],
                labels: labelsBranch,
                datasets: [{
                    barThickness: 40,
                    minBarLength: 2,
                    //data: [15, 20, 30, 60, 90, 10],
                    data: dataValues,
                    backgroundColor: ['#FF99AF', '#8BC9F3', '#FFE199', '#8ED7D7', '#C9ADFF', '#FFCC99'],
                    borderColor: [
                        'rgb(255, 99, 132)',
                        'rgb(54, 162, 235)',
                        'rgb(255, 205, 86)',
                        'rgb(75, 192, 192)',
                        'rgb(153, 102, 255)',
                        'rgb(255, 159, 64)',

                    ],
                    borderWidth: 2
                }]
            }, {
                responsive: true,
                plugins: {
                    legend: {
                        display: false
                    },
                    title: {
                        display: true,
                        text: "@localizer["Renter_inChart_City"]",
                        font: {
                            family: "'Cairo', sans-serif",
                            size: 15,
                            weight: '600'
                        },
                        padding: {
                            top: 20,
                            bottom: 25
                        }
                    }
                },
                scales: {
                    x: {
                        type: 'category',
                        ticks: {
                            display: true,
                            font: {
                                family: "'Cairo', sans-serif",
                                size: 12
                            }
                        }
                    }
                }
            });
        }
        async function AgeChart() {
            let list_ChartData = await GetAllBy_Age();

            let labelsBranch;
            if ('@requestCulture?.RequestCulture.UICulture.Name' == "en-US") {

                labelsBranch = list_ChartData.map(function (paymentMethod) {
                    return paymentMethod.enName;
                });
            }
            else {
                labelsBranch = list_ChartData.map(function (paymentMethod) {
                    return paymentMethod.arName;
                });
            }
            ////@*var list_ChartData = @Html.Raw(Json.Serialize(Model.listMasChartdataVM));*@
            ////@*var list_ChartData = @Html.Raw(Json.Serialize(Model.listMasChartdataVM));*@
            //console.log(list_ChartData);
            let labelsBranch2;
            if ('@requestCulture?.RequestCulture.UICulture.Name' == "en-US") {
                // تحويل البيانات إلى تنسيق مناسب
                labelsBranch2 = list_ChartData.map(item => ({
                    data: [{ x: item.enName, y: item.value }],
                    backgroundColor: item.backgroundColor,
                    borderColor: item.borderColor,
                    pointRadius: 5
                }));
            }
            else {
                // تحويل البيانات إلى تنسيق مناسب
                labelsBranch2 = list_ChartData.map(item => ({
                    data: [{ x: item.arName, y: item.value }],
                    backgroundColor: item.backgroundColor,
                    borderColor: item.borderColor,
                    pointRadius: 5
                }));
            }
            createChart('scatter', {
                datasets: labelsBranch2
            }, {
                responsive: true,
                animations: {
                    radius: {
                        duration: 1000,
                        easing: 'easeInOutQuad',
                        loop: true,
                        from: 5,
                        to: 8
                    },
                },
                plugins: {
                    legend: {
                        display: false
                    },
                    title: {
                        display: true,
                        text: "@localizer["Renter_inChart_Age"]",
                        font: {
                            family: "'Cairo', sans-serif",
                            size: 15,
                            weight: '600'
                        },
                        padding: {
                            top: 20,
                            bottom: 25
                        }
                    }
                },
                scales: {
                    x: {
                        type: 'category',
                        //labels: ['أقل من 20', '25 - 21', '30 - 26', '35 - 31', '40 - 36', '50 - 41', '60 - 51', 'أعلى من 60'],
                        labels: labelsBranch,
                        ticks: {
                            display: true,
                            font: {
                                family: "'Cairo', sans-serif",
                                size: 12
                            }
                        }
                    },
                    y: {
                        beginAtZero: true,
                        ticks: {
                            display: true
                        }
                    }
                }
            });
        }

    </script>

    <!--Charts-->
    <!--Charts-->
    <!--Charts-->
    <!--Charts-->
    <!--Charts-->

   @* <script>
            function GetAllByType(Type, listDrop, singleNo, company) {
                //console.log("Mazzen1")
            if (Type != null && Type != "" & Type != undefined) {
                //console.log("Mazzen2")
                    location.href = '@Url.Action("GetAllByType", "RenterStatistics")?Type=' + Type + '&listDrop=' + listDrop + '&singleNo=' + singleNo + '&company_now=' + company;
                }
        }
    </script>*@
    

    @*<script>


        $(document).ready(function () {
            // Bar Chart 2
            //Branch
            //DrawChart("response");
            var list_ChartData = @Html.Raw(Json.Serialize(Model.ChartBranchDataVM));
            console.log(list_ChartData);
            var labelsBranch;
            if ('@requestCulture?.RequestCulture.UICulture.Name' == "en-US") {

                labelsBranch = list_ChartData.map(function (paymentMethod) {
                    return paymentMethod.enName;
                });
            }
            else {
                labelsBranch = list_ChartData.map(function (paymentMethod) {
                    return paymentMethod.arName;
                });
            }


            var data = list_ChartData.map(function (paymentMethod) {
                return paymentMethod.value;
            });

            var barChart2 = document.getElementById("barChart2").getContext("2d");
            var myChart = new Chart(barChart2, {
                type: "bar",
                data: {
                    labels: labelsBranch,
                    datasets: [
                        {
                            data: data,
                            backgroundColor: [
                                "rgba(255, 99, 132, 1)",
                                "rgba(54, 162, 235, 1)",
                                "rgba(255, 206, 86, 1)",
                                "rgba(75, 192, 192, 1)",
                                "rgba(75, 110, 192, 1)",
                                "rgba(153, 102, 255, 1)",
                                "rgba(255, 99, 132, 1)",
                                "rgba(54, 162, 235, 1)",
                                "rgba(255, 206, 86, 1)",
                                "rgba(75, 192, 192, 1)",
                            ],
                            barThickness: 42, //Width of each Bar
                        }
                    ]
                },
                options: {
                    plugins: {

                        legend: {
                            display: false
                        }

                    },
                    scales: {
                        x: {
                            beginAtZero: true,
                            ticks: {
                                font: {
                                    family: 'Cairo, sans-serif', // Change the font family
                                    size: 16,
                                    // Change the font size
                                }
                            }
                        },
                        y: {
                            beginAtZero: true,                      
                            ticks: {
                                font: {
                                    family: 'Cairo, sans-serif', // Change the font family
                                    size: 16,
                                    // Change the font size
                                }
                            }
                        }

                    }
                }
            });

        });

    </script>*@
@*
    <script>
        //onchange="getSelectedType(this)"
        function getSelectedType(selectObject) {
            //var single = selectObject.value;
            var single = $('#SelectedType').val();
            var type = "";
            switch (single) {
              case "0":
                type = "Nationality";
                break;
              case "1":
                type = "MemperShip";
                break;
            case "2":
                type = "profession";
                break;
            case "3":
                type = "Rigon";
                break;
            case "4":
                type = "City";
                break;
            case "5":
                type = "Age";
                break;
            case "6":
                type = "Traded";
                break;
            case "7":
                type = "Dealing_Mechanism";
                break;
            case "8":
                type = "Status";
                break;
              //default:
              //      type = "Nationality";
            }
            var listDrop = "@ViewBag.concate_DropDown";
            //console.log(single);
            var company = $('#SelectedCompany').val();
            console.log(company);
            if (selectObject == "Companychanged") 
            {
                GetAllByType(type, listDrop, single, company);
            }
            else 
            {
                GetAllByType(type, listDrop, single, "-1" + company);
            }
        };
    </script>



    <script>
        $(document).ready(function () {
        var string ="@ViewBag.concate_DropDown";
        const usingSpread = [...string];
        const usingArrayFrom = Array.from(string);
        console.log(usingArrayFrom);

        var list_dropdown = ['0','1','2','3','4','5','6','7'];

        list_dropdown.forEach(myFunction_hide);

        usingArrayFrom.forEach(myFunction_show);
 
        function myFunction_hide(item, index) {
          var xitemId = "#"+item;
          console.log(xitemId);
          document.getElementById(item).style.display='none';
        }

        function myFunction_show(item, index) {
          var xitemId = "#"+item;
          console.log(xitemId);
          document.getElementById(item).style.display='inline';
        }

                var single = "@ViewBag.singleType";
                $('#SelectedType').val(single).change();
                console.log(single);
                console.log(usingArrayFrom.indexOf(single));
        });
    </script>
    *@
}

